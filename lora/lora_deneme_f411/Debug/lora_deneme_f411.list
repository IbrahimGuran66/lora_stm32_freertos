
lora_deneme_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005788  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c0  080059c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c8  080059c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080059d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dbc  20000010  080059e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dcc  080059e0  00024dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010aae  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a14  00000000  00000000  00030b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  00033548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8f  00000000  00000000  00034580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001834d  00000000  00000000  0003520f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121db  00000000  00000000  0004d55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000964c2  00000000  00000000  0005f737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004344  00000000  00000000  000f5bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f9f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005910 	.word	0x08005910

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005910 	.word	0x08005910

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <circ_buffer_enqueue>:
 * @param 	data	: 	Array of bytes to add to the buffer
 *
 * @param 	size 	:	Size of the data array
 */
void circ_buffer_enqueue(circ_buffer_t *cb, uint8_t* data, uint8_t size)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	4613      	mov	r3, r2
 80004e8:	71fb      	strb	r3, [r7, #7]
	if ((cb->end + 1) % BUFFER_SIZE == cb->start)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80004f0:	1c59      	adds	r1, r3, #1
 80004f2:	4b1e      	ldr	r3, [pc, #120]	; (800056c <circ_buffer_enqueue+0x90>)
 80004f4:	fb83 2301 	smull	r2, r3, r3, r1
 80004f8:	105a      	asrs	r2, r3, #1
 80004fa:	17cb      	asrs	r3, r1, #31
 80004fc:	1ad2      	subs	r2, r2, r3
 80004fe:	4613      	mov	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	4413      	add	r3, r2
 8000504:	1aca      	subs	r2, r1, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 800050c:	429a      	cmp	r2, r3
 800050e:	d029      	beq.n	8000564 <circ_buffer_enqueue+0x88>
	{
		// Buffer is full, do not add new element
		return;
	}
	memcpy(cb->buffer[cb->end], data, size * sizeof(uint8_t));
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 8000516:	461a      	mov	r2, r3
 8000518:	23f5      	movs	r3, #245	; 0xf5
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	4413      	add	r3, r2
 8000522:	79fa      	ldrb	r2, [r7, #7]
 8000524:	68b9      	ldr	r1, [r7, #8]
 8000526:	4618      	mov	r0, r3
 8000528:	f005 f9e4 	bl	80058f4 <memcpy>
	cb->elementSizes[cb->end] = size;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 8000532:	461a      	mov	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4413      	add	r3, r2
 8000538:	79fa      	ldrb	r2, [r7, #7]
 800053a:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
	cb->end = (cb->end + 1) % BUFFER_SIZE;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 8000544:	1c5a      	adds	r2, r3, #1
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <circ_buffer_enqueue+0x90>)
 8000548:	fb83 1302 	smull	r1, r3, r3, r2
 800054c:	1059      	asrs	r1, r3, #1
 800054e:	17d3      	asrs	r3, r2, #31
 8000550:	1ac9      	subs	r1, r1, r3
 8000552:	460b      	mov	r3, r1
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	440b      	add	r3, r1
 8000558:	1ad1      	subs	r1, r2, r3
 800055a:	b2ca      	uxtb	r2, r1
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 8000562:	e000      	b.n	8000566 <circ_buffer_enqueue+0x8a>
		return;
 8000564:	bf00      	nop
}
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	66666667 	.word	0x66666667

08000570 <circ_buffer_dequeue>:
 * @param 	size	:	Pointer to an integer to store the size of the returned array
 *
 * @return 	Pointer to the first element in the buffer
 */
uint8_t* circ_buffer_dequeue(circ_buffer_t *cb, uint8_t *size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	uint8_t *element = cb->buffer[cb->start];
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 8000580:	461a      	mov	r2, r3
 8000582:	23f5      	movs	r3, #245	; 0xf5
 8000584:	fb02 f303 	mul.w	r3, r2, r3
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	4413      	add	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
	if (size)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d009      	beq.n	80005a8 <circ_buffer_dequeue+0x38>
	{
		*size = cb->elementSizes[cb->start];
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 800059a:	461a      	mov	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	f893 24cb 	ldrb.w	r2, [r3, #1227]	; 0x4cb
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	701a      	strb	r2, [r3, #0]
	}
	cb->start = (cb->start + 1) % BUFFER_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <circ_buffer_dequeue+0x6c>)
 80005b2:	fb83 1302 	smull	r1, r3, r3, r2
 80005b6:	1059      	asrs	r1, r3, #1
 80005b8:	17d3      	asrs	r3, r2, #31
 80005ba:	1ac9      	subs	r1, r1, r3
 80005bc:	460b      	mov	r3, r1
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	440b      	add	r3, r1
 80005c2:	1ad1      	subs	r1, r2, r3
 80005c4:	b2ca      	uxtb	r2, r1
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
	return element;
 80005cc:	68fb      	ldr	r3, [r7, #12]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	66666667 	.word	0x66666667

080005e0 <circ_buffer_getNextSize>:
 * @param 	cb		: 	Pointer to the circular buffer
 *
 * @return 	Number	: 	of arrays in the buffer
 */
uint8_t circ_buffer_getNextSize(circ_buffer_t *cb)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	if (cb->start == cb->end)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f893 24c9 	ldrb.w	r2, [r3, #1225]	; 0x4c9
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d101      	bne.n	80005fc <circ_buffer_getNextSize+0x1c>
	{
		return 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e007      	b.n	800060c <circ_buffer_getNextSize+0x2c>
	}
	else
	{
		return cb->elementSizes[cb->start];
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 8000602:	461a      	mov	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4413      	add	r3, r2
 8000608:	f893 34cb 	ldrb.w	r3, [r3, #1227]	; 0x4cb
	}
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <e22_lora_init>:
					void* transmissionFunc,
					void* receptionFunc,
					void* receptionCallbackFunc,
					void* configModeFunc,
					void* TransceiverModeFunc)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	603b      	str	r3, [r7, #0]
	hE22.huart 						= huart;
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <e22_lora_init+0x64>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6013      	str	r3, [r2, #0]
	hE22.loraTransmit 				= transmissionFunc;
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <e22_lora_init+0x64>)
 8000630:	6053      	str	r3, [r2, #4]
	hE22.loraStartReception 		= receptionFunc;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a11      	ldr	r2, [pc, #68]	; (800067c <e22_lora_init+0x64>)
 8000636:	6093      	str	r3, [r2, #8]
	hE22.loraReceive		 		= receptionCallbackFunc;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <e22_lora_init+0x64>)
 800063c:	60d3      	str	r3, [r2, #12]
	hE22.loraConfigurationMode 		= configModeFunc;
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <e22_lora_init+0x64>)
 8000642:	6153      	str	r3, [r2, #20]
	hE22.loraTransceiverMode		= TransceiverModeFunc;
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	4a0d      	ldr	r2, [pc, #52]	; (800067c <e22_lora_init+0x64>)
 8000648:	6113      	str	r3, [r2, #16]

	//Assign DMA buffer pointers.
	hE22.pRxDmaBuffer = rxDmaBuffer;
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <e22_lora_init+0x64>)
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <e22_lora_init+0x68>)
 800064e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	hE22.pTxDmaBuffer = txDmaBuffer;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <e22_lora_init+0x64>)
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <e22_lora_init+0x6c>)
 8000656:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
	//transceiver mode as default
	hE22.loraTransceiverMode();
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <e22_lora_init+0x64>)
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	4798      	blx	r3

	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <e22_lora_init+0x64>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <e22_lora_init+0x64>)
 8000666:	6810      	ldr	r0, [r2, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <e22_lora_init+0x64>)
 800066a:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	; 0xab0
 800066e:	22f0      	movs	r2, #240	; 0xf0
 8000670:	4798      	blx	r3
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000002c 	.word	0x2000002c
 8000680:	20000ae4 	.word	0x20000ae4
 8000684:	20000bd4 	.word	0x20000bd4

08000688 <e22_lora_transnit>:
 *
 * @param channel	:	RF channel to send data over
 *
 */
void e22_lora_transnit(uint8_t *pData, uint16_t size, uint16_t address, uint8_t channel)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4603      	mov	r3, r0
 8000698:	817b      	strh	r3, [r7, #10]
 800069a:	460b      	mov	r3, r1
 800069c:	813b      	strh	r3, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	const uint8_t overheadSize = 3;
 80006a2:	2303      	movs	r3, #3
 80006a4:	75fb      	strb	r3, [r7, #23]

	memset(&hE22.packet, 0, sizeof(e22_packet_t));
 80006a6:	22f4      	movs	r2, #244	; 0xf4
 80006a8:	2100      	movs	r1, #0
 80006aa:	4815      	ldr	r0, [pc, #84]	; (8000700 <e22_lora_transnit+0x78>)
 80006ac:	f005 f8f6 	bl	800589c <memset>
	//Address 2 bytes swap
	hE22.packet.address = (address >> 8) | (address << 8);
 80006b0:	893b      	ldrh	r3, [r7, #8]
 80006b2:	0a1b      	lsrs	r3, r3, #8
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	893b      	ldrh	r3, [r7, #8]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <e22_lora_transnit+0x7c>)
 80006c6:	831a      	strh	r2, [r3, #24]

	hE22.packet.chanel = channel;
 80006c8:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <e22_lora_transnit+0x7c>)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	7693      	strb	r3, [r2, #26]

	hE22.txPortReady = true;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <e22_lora_transnit+0x7c>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

	memcpy(&hE22.packet.dataBuffer, pData, size);
 80006d6:	897b      	ldrh	r3, [r7, #10]
 80006d8:	461a      	mov	r2, r3
 80006da:	68f9      	ldr	r1, [r7, #12]
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <e22_lora_transnit+0x80>)
 80006de:	f005 f909 	bl	80058f4 <memcpy>

	circ_buffer_enqueue(&hE22.txBuffer, (uint8_t*)&hE22.packet, size + overheadSize);
 80006e2:	897b      	ldrh	r3, [r7, #10]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
 80006e8:	4413      	add	r3, r2
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	4904      	ldr	r1, [pc, #16]	; (8000700 <e22_lora_transnit+0x78>)
 80006f0:	4806      	ldr	r0, [pc, #24]	; (800070c <e22_lora_transnit+0x84>)
 80006f2:	f7ff fef3 	bl	80004dc <circ_buffer_enqueue>
}
 80006f6:	bf00      	nop
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000044 	.word	0x20000044
 8000704:	2000002c 	.word	0x2000002c
 8000708:	20000047 	.word	0x20000047
 800070c:	2000013a 	.word	0x2000013a

08000710 <e22_lora_manager>:
 * 			This function manages the E22 LoRa module by checking for packets in the TX circular buffer, dequeuing them, and transmitting
 * 			them via the E22 module.
 *
 */
void e22_lora_manager(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	uint8_t packetSize = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	70fb      	strb	r3, [r7, #3]
	uint8_t* pPacket = NULL;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
	//check for packet in TX circular buffer
	if(circ_buffer_getNextSize(&hE22.txBuffer))
 800071e:	481e      	ldr	r0, [pc, #120]	; (8000798 <e22_lora_manager+0x88>)
 8000720:	f7ff ff5e 	bl	80005e0 <circ_buffer_getNextSize>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d020      	beq.n	800076c <e22_lora_manager+0x5c>
	{
//		uint8_t packetSize = 0;
//		uint8_t* pPacket = NULL;
		if(hE22.txPortReady)
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <e22_lora_manager+0x8c>)
 800072c:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8000730:	2b00      	cmp	r3, #0
 8000732:	d01b      	beq.n	800076c <e22_lora_manager+0x5c>
		{
			hE22.txPortReady = false;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <e22_lora_manager+0x8c>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			// Dequeue packet from circular buffer
			pPacket = circ_buffer_dequeue(&hE22.txBuffer, &packetSize);
 800073c:	1cfb      	adds	r3, r7, #3
 800073e:	4619      	mov	r1, r3
 8000740:	4815      	ldr	r0, [pc, #84]	; (8000798 <e22_lora_manager+0x88>)
 8000742:	f7ff ff15 	bl	8000570 <circ_buffer_dequeue>
 8000746:	6078      	str	r0, [r7, #4]
			// Copy packet to DMA buffer
			memcpy(hE22.pTxDmaBuffer ,pPacket, packetSize);
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <e22_lora_manager+0x8c>)
 800074a:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 800074e:	78fa      	ldrb	r2, [r7, #3]
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	f005 f8ce 	bl	80058f4 <memcpy>
			// Transmit packet via the E22 module
			hE22.loraTransmit(hE22.huart, hE22.pTxDmaBuffer, packetSize);
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <e22_lora_manager+0x8c>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <e22_lora_manager+0x8c>)
 800075e:	6810      	ldr	r0, [r2, #0]
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <e22_lora_manager+0x8c>)
 8000762:	f8d2 1ab4 	ldr.w	r1, [r2, #2740]	; 0xab4
 8000766:	78fa      	ldrb	r2, [r7, #3]
 8000768:	b292      	uxth	r2, r2
 800076a:	4798      	blx	r3
		}
	}
	//check for packet in RX circular buffer
	if(circ_buffer_getNextSize(&hE22.rxBuffer))
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <e22_lora_manager+0x90>)
 800076e:	f7ff ff37 	bl	80005e0 <circ_buffer_getNextSize>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00b      	beq.n	8000790 <e22_lora_manager+0x80>
	{
		pPacket = circ_buffer_dequeue(&hE22.rxBuffer, &packetSize);
 8000778:	1cfb      	adds	r3, r7, #3
 800077a:	4619      	mov	r1, r3
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <e22_lora_manager+0x90>)
 800077e:	f7ff fef7 	bl	8000570 <circ_buffer_dequeue>
 8000782:	6078      	str	r0, [r7, #4]
		hE22.loraReceive(pPacket, packetSize);
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <e22_lora_manager+0x8c>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	78fa      	ldrb	r2, [r7, #3]
 800078a:	4611      	mov	r1, r2
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	4798      	blx	r3
	}
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000013a 	.word	0x2000013a
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	2000060a 	.word	0x2000060a

080007a4 <e22_lora_make_ready>:
/**
 * @brief 	Make transmission line status ready at TX complete callback
 *
 */
void e22_lora_make_ready(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	hE22.txPortReady = true;
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <e22_lora_make_ready+0x18>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	2000002c 	.word	0x2000002c

080007c0 <e22_lora_reception_complete>:
/**
 * @brief 	this function should be called at the UART RX complete callback.
 *
 */
void e22_lora_reception_complete(uint8_t size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	circ_buffer_enqueue(&hE22.rxBuffer, (uint8_t*)hE22.pRxDmaBuffer, size);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <e22_lora_reception_complete+0x34>)
 80007cc:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <e22_lora_reception_complete+0x38>)
 80007d6:	f7ff fe81 	bl	80004dc <circ_buffer_enqueue>
	//Activate UART reception again
	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <e22_lora_reception_complete+0x34>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <e22_lora_reception_complete+0x34>)
 80007e0:	6810      	ldr	r0, [r2, #0]
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <e22_lora_reception_complete+0x34>)
 80007e4:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	; 0xab0
 80007e8:	22f0      	movs	r2, #240	; 0xf0
 80007ea:	4798      	blx	r3
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000002c 	.word	0x2000002c
 80007f8:	2000060a 	.word	0x2000060a

080007fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <vApplicationGetIdleTaskMemory+0x2c>)
 800080c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <vApplicationGetIdleTaskMemory+0x30>)
 8000812:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000cc4 	.word	0x20000cc4
 800082c:	20000d18 	.word	0x20000d18

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fc61 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f865 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f965 	bl	8000b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000842:	f000 f93b 	bl	8000abc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000846:	f000 f90f 	bl	8000a68 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800084a:	f000 f8c5 	bl	80009d8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  // E22 LoRa modülünü yapılandırıyoruz.
  e22_lora_init(&huart1,
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <main+0xa0>)
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <main+0xa4>)
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <main+0xa8>)
 8000858:	4a20      	ldr	r2, [pc, #128]	; (80008dc <main+0xac>)
 800085a:	4921      	ldr	r1, [pc, #132]	; (80008e0 <main+0xb0>)
 800085c:	4821      	ldr	r0, [pc, #132]	; (80008e4 <main+0xb4>)
 800085e:	f7ff fedb 	bl	8000618 <e22_lora_init>
				main_lora_packet_receive,
				main_e22_configurationMode,
				main_e22_transceiverMode);

  // FREERTOS Task oluşturmayı başlatıyoruz.
  xTaskCreate(led_toggle_task, "Toggle GPIO13", 128, NULL, 1, NULL);
 8000862:	2300      	movs	r3, #0
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	2301      	movs	r3, #1
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2300      	movs	r3, #0
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	491e      	ldr	r1, [pc, #120]	; (80008e8 <main+0xb8>)
 8000870:	481e      	ldr	r0, [pc, #120]	; (80008ec <main+0xbc>)
 8000872:	f003 fe9b 	bl	80045ac <xTaskCreate>
  xTaskCreate(e22_handle_task, "E22 LoRa Handler", 128 * 4, NULL, 1, NULL);
 8000876:	2300      	movs	r3, #0
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	2301      	movs	r3, #1
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2300      	movs	r3, #0
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	491a      	ldr	r1, [pc, #104]	; (80008f0 <main+0xc0>)
 8000886:	481b      	ldr	r0, [pc, #108]	; (80008f4 <main+0xc4>)
 8000888:	f003 fe90 	bl	80045ac <xTaskCreate>
  xTaskCreate(e22_transmission_task, "E22 LoRa Tx Task", 128 * 4, NULL, 1, NULL);
 800088c:	2300      	movs	r3, #0
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	2301      	movs	r3, #1
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089a:	4917      	ldr	r1, [pc, #92]	; (80008f8 <main+0xc8>)
 800089c:	4817      	ldr	r0, [pc, #92]	; (80008fc <main+0xcc>)
 800089e:	f003 fe85 	bl	80045ac <xTaskCreate>

  vTaskStartScheduler();
 80008a2:	f004 f86b 	bl	800497c <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <main+0xd0>)
 80008a8:	1d3c      	adds	r4, r7, #4
 80008aa:	461d      	mov	r5, r3
 80008ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fd04 	bl	80042ca <osThreadCreate>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <main+0xd4>)
 80008c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008c8:	f003 fcf8 	bl	80042bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <main+0x9c>
 80008ce:	bf00      	nop
 80008d0:	08000ce9 	.word	0x08000ce9
 80008d4:	08000cf7 	.word	0x08000cf7
 80008d8:	08000d39 	.word	0x08000d39
 80008dc:	08003005 	.word	0x08003005
 80008e0:	08002f09 	.word	0x08002f09
 80008e4:	20000f60 	.word	0x20000f60
 80008e8:	08005928 	.word	0x08005928
 80008ec:	08000c35 	.word	0x08000c35
 80008f0:	08005938 	.word	0x08005938
 80008f4:	08000c5d 	.word	0x08000c5d
 80008f8:	0800594c 	.word	0x0800594c
 80008fc:	08000c85 	.word	0x08000c85
 8000900:	0800596c 	.word	0x0800596c
 8000904:	20001064 	.word	0x20001064

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f004 ffc0 	bl	800589c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <SystemClock_Config+0xc8>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <SystemClock_Config+0xc8>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <SystemClock_Config+0xc8>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <SystemClock_Config+0xcc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a20      	ldr	r2, [pc, #128]	; (80009d4 <SystemClock_Config+0xcc>)
 8000952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <SystemClock_Config+0xcc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000968:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000980:	2302      	movs	r3, #2
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000984:	2304      	movs	r3, #4
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4618      	mov	r0, r3
 800098e:	f001 faf3 	bl	8001f78 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000998:	f000 fa02 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2103      	movs	r1, #3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fd55 	bl	8002468 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009c4:	f000 f9ec 	bl	8000da0 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3750      	adds	r7, #80	; 0x50
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80009de:	463b      	mov	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_TIM10_Init+0x88>)
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <MX_TIM10_Init+0x8c>)
 80009ee:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_TIM10_Init+0x88>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_TIM10_Init+0x88>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_TIM10_Init+0x88>)
 80009fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a02:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_TIM10_Init+0x88>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_TIM10_Init+0x88>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <MX_TIM10_Init+0x88>)
 8000a12:	f001 ff49 	bl	80028a8 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8000a1c:	f000 f9c0 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <MX_TIM10_Init+0x88>)
 8000a22:	f001 ff90 	bl	8002946 <HAL_TIM_IC_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f9b8 	bl	8000da0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a34:	2301      	movs	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_TIM10_Init+0x88>)
 8000a48:	f001 ffd6 	bl	80029f8 <HAL_TIM_IC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8000a52:	f000 f9a5 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000f18 	.word	0x20000f18
 8000a64:	40014400 	.word	0x40014400

08000a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART1_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	f002 f9e4 	bl	8002e6c <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f979 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000f60 	.word	0x20000f60
 8000ab8:	40011000 	.word	0x40011000

08000abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_DMA_Init+0x4c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <MX_DMA_Init+0x4c>)
 8000acc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_DMA_Init+0x4c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2105      	movs	r1, #5
 8000ae2:	203a      	movs	r0, #58	; 0x3a
 8000ae4:	f000 fc57 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ae8:	203a      	movs	r0, #58	; 0x3a
 8000aea:	f000 fc70 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2105      	movs	r1, #5
 8000af2:	2046      	movs	r0, #70	; 0x46
 8000af4:	f000 fc4f 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000af8:	2046      	movs	r0, #70	; 0x46
 8000afa:	f000 fc68 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b3c      	ldr	r3, [pc, #240]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a30      	ldr	r2, [pc, #192]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a29      	ldr	r2, [pc, #164]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <MX_GPIO_Init+0x118>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2120      	movs	r1, #32
 8000b96:	4824      	ldr	r0, [pc, #144]	; (8000c28 <MX_GPIO_Init+0x11c>)
 8000b98:	f001 f9ba 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	4822      	ldr	r0, [pc, #136]	; (8000c2c <MX_GPIO_Init+0x120>)
 8000ba2:	f001 f9b5 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481c      	ldr	r0, [pc, #112]	; (8000c30 <MX_GPIO_Init+0x124>)
 8000bbe:	f001 f823 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <MX_GPIO_Init+0x11c>)
 8000bde:	f001 f813 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000be2:	2320      	movs	r3, #32
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <MX_GPIO_Init+0x11c>)
 8000bfa:	f001 f805 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_GPIO_Init+0x120>)
 8000c16:	f000 fff7 	bl	8001c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40020800 	.word	0x40020800

08000c34 <led_toggle_task>:

/* USER CODE BEGIN 4 */
static void led_toggle_task(void *parameter)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  static TickType_t xLastWakeTime; //görevin periyodik olarak çalışmasını sağlamak için
  const TickType_t xPeriod = pdMS_TO_TICKS(1000);  // 1 saniye delay
 8000c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c40:	60fb      	str	r3, [r7, #12]
  //pdMS_TO_TICKS makrosu, milisaniye cinsinden verilen değeri FreeRTOS'un tick sayısına dönüştürür.​
  xLastWakeTime = xTaskGetTickCount();
 8000c42:	f003 ffa5 	bl	8004b90 <xTaskGetTickCount>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <led_toggle_task+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
  //Geçerli tick sayısı alınarak xLastWakeTime değişkenine atanıyor. Bu, görevin doğru periyotlarla
  //çalışmasını sağlamak için başlangıç referansı olarak kullanılır.

  for(;;) //sonsuz döngü
  {
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000c4c:	68f9      	ldr	r1, [r7, #12]
 8000c4e:	4802      	ldr	r0, [pc, #8]	; (8000c58 <led_toggle_task+0x24>)
 8000c50:	f003 fde2 	bl	8004818 <vTaskDelayUntil>
 8000c54:	e7fa      	b.n	8000c4c <led_toggle_task+0x18>
 8000c56:	bf00      	nop
 8000c58:	20001068 	.word	0x20001068

08000c5c <e22_handle_task>:
  }
}

// E22 LoRa modülünün çalışma döngüsünü kontrol etmek için yapılmış bir background task’tır.
static void e22_handle_task(void *parameter)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  static TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(100);
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000c68:	f003 ff92 	bl	8004b90 <xTaskGetTickCount>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <e22_handle_task+0x24>)
 8000c70:	6013      	str	r3, [r2, #0]

  for(;;)
  {
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000c72:	68f9      	ldr	r1, [r7, #12]
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <e22_handle_task+0x24>)
 8000c76:	f003 fdcf 	bl	8004818 <vTaskDelayUntil>
    // E22 LoRa modülünün yönetim fonksiyonu çağrılır.
    // Bu fonksiyon, modülün durumunu kontrol eder ve gerekli işlemleri yapar.
    e22_lora_manager();
 8000c7a:	f7ff fd49 	bl	8000710 <e22_lora_manager>
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000c7e:	e7f8      	b.n	8000c72 <e22_handle_task+0x16>
 8000c80:	2000106c 	.word	0x2000106c

08000c84 <e22_transmission_task>:
  }
}

static void e22_transmission_task(void *parameter)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  static TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(1000);
 8000c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c90:	617b      	str	r3, [r7, #20]
  xLastWakeTime = xTaskGetTickCount();
 8000c92:	f003 ff7d 	bl	8004b90 <xTaskGetTickCount>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <e22_transmission_task+0x58>)
 8000c9a:	6013      	str	r3, [r2, #0]

  const uint8_t packetSize = 4; //  Gönderilecek paketin boyutu
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	74fb      	strb	r3, [r7, #19]
  const uint8_t receiverAddress = 0x09; // Alıcının adresi
 8000ca0:	2309      	movs	r3, #9
 8000ca2:	74bb      	strb	r3, [r7, #18]
  const uint8_t ComChannel = 0x06; //  İletişim kanalı
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	747b      	strb	r3, [r7, #17]
  uint8_t packet[5] = "ping"; // Gönderilecek veri paketi
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <e22_transmission_task+0x5c>)
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb2:	6018      	str	r0, [r3, #0]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	7019      	strb	r1, [r3, #0]

  for(;;)
  {
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000cb8:	6979      	ldr	r1, [r7, #20]
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <e22_transmission_task+0x58>)
 8000cbc:	f003 fdac 	bl	8004818 <vTaskDelayUntil>
    e22_lora_transnit(packet, packetSize, receiverAddress, ComChannel);
 8000cc0:	7cfb      	ldrb	r3, [r7, #19]
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	7cbb      	ldrb	r3, [r7, #18]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	7c7b      	ldrb	r3, [r7, #17]
 8000cca:	f107 000c 	add.w	r0, r7, #12
 8000cce:	f7ff fcdb 	bl	8000688 <e22_lora_transnit>
    // iletimi başlat, iletimdeyken ledi toggle yap
    HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <e22_transmission_task+0x60>)
 8000cd6:	f001 f934 	bl	8001f42 <HAL_GPIO_TogglePin>
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000cda:	e7ed      	b.n	8000cb8 <e22_transmission_task+0x34>
 8000cdc:	20001070 	.word	0x20001070
 8000ce0:	08005988 	.word	0x08005988
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <main_e22_transceiverMode>:
  }
}

static void main_e22_transceiverMode(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  // F411'de M0 ve M1 pinleri kullanılmıyor
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <main_e22_configurationMode>:

static void main_e22_configurationMode(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  // F411'de M0 ve M1 pinleri kullanılmıyor
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_UART_TxCpltCallback>:
// UART ile bir veri gönderme işlemi tamamlandığında otomatik olarak çağrılır.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  e22_lora_make_ready();
 8000d0c:	f7ff fd4a 	bl	80007a4 <e22_lora_make_ready>
// Bu fonksiyon, E22 modülünü yeni bir işleme (örneğin başka bir paket gönderimi)
// hazır duruma getirmek için çağrılır.
// Gönderim tamamlandıktan sonra sistemin yeni işlem yapabilmesi
// için tetikleme yapılmış olur.

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_UARTEx_RxEventCallback>:
// UART üzerinden veri alımı tamamlandığında otomatik olarak
// çağrılan bir HAL fonksiyonudur (DMA veya kesmeyle çalıştığında kullanılır).
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
  e22_lora_reception_complete(Size);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fd49 	bl	80007c0 <e22_lora_reception_complete>
// Bu fonksiyon, alınan verinin işlenmesini başlatır.
// Alınan Size kadar byte’lık veriyi ele alacak şekilde E22 modülünün
// işleyici fonksiyonuna yönlendirir.
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <main_lora_packet_receive>:

// Bu fonksiyon, gelen LoRa paketlerini yorumlamak için tasarlanmıştır.
// Veriyi alır, içerik kontrolü yapar ve belirli komutlara karşı tepki verir.
static void main_lora_packet_receive(uint8_t* dataPacket, uint8_t size)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0be      	sub	sp, #248	; 0xf8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
  uint8_t loraPacket[MAX_DATA_PACKET_SIZE] = {0}; // Gelen paketi tutmak için sıfırlarla başlatılmış bir tampon (buffer) oluşturuluyor.
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	22ec      	movs	r2, #236	; 0xec
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fda3 	bl	800589c <memset>
  memcpy(&loraPacket, dataPacket, size);
 8000d56:	78fa      	ldrb	r2, [r7, #3]
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fdc8 	bl	80058f4 <memcpy>
 //Gelen veri (dataPacket) size kadar loraPacket tamponuna kopyalanıyor.

  if (0 == memcmp(loraPacket, "pong", size))
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	4907      	ldr	r1, [pc, #28]	; (8000d88 <main_lora_packet_receive+0x50>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 fd85 	bl	800587c <memcmp>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d103      	bne.n	8000d80 <main_lora_packet_receive+0x48>
  {
	  // Kopyalanan veri ile "pong" kelimesi aynı mı diye karşılaştırma yapılır.
	  // memcmp sonucu 0 ise iki veri aynıdır.
    HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8000d78:	2120      	movs	r1, #32
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <main_lora_packet_receive+0x54>)
 8000d7c:	f001 f8e1 	bl	8001f42 <HAL_GPIO_TogglePin>
    // Eğer gelen veri "pong" ise, bir LED’in durumu değiştirilir (açıkken kapanır, kapalıysa açılır).
  }
}
 8000d80:	bf00      	nop
 8000d82:	37f8      	adds	r7, #248	; 0xf8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	08005990 	.word	0x08005990
 8000d8c:	40020000 	.word	0x40020000

08000d90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f003 fae2 	bl	8004362 <osDelay>
 8000d9e:	e7fb      	b.n	8000d98 <StartDefaultTask+0x8>

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_MspInit+0x54>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <HAL_MspInit+0x54>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_MspInit+0x54>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_MspInit+0x54>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_MspInit+0x54>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_MspInit+0x54>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	210f      	movs	r1, #15
 8000dee:	f06f 0001 	mvn.w	r0, #1
 8000df2:	f000 fad0 	bl	8001396 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM10)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_TIM_Base_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12c      	bne.n	8000e80 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_TIM_Base_MspInit+0x88>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_TIM_Base_MspInit+0x88>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_TIM_Base_MspInit+0x88>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_TIM_Base_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_TIM_Base_MspInit+0x88>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_TIM_Base_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000e70:	2303      	movs	r3, #3
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_TIM_Base_MspInit+0x8c>)
 8000e7c:	f000 fec4 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40014400 	.word	0x40014400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020400 	.word	0x40020400

08000e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <HAL_UART_MspInit+0x150>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	f040 8091 	bne.w	8000fda <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <HAL_UART_MspInit+0x154>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec0:	4a49      	ldr	r2, [pc, #292]	; (8000fe8 <HAL_UART_MspInit+0x154>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec8:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HAL_UART_MspInit+0x154>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <HAL_UART_MspInit+0x154>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a42      	ldr	r2, [pc, #264]	; (8000fe8 <HAL_UART_MspInit+0x154>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee4:	4b40      	ldr	r3, [pc, #256]	; (8000fe8 <HAL_UART_MspInit+0x154>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ef0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f02:	2307      	movs	r3, #7
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4837      	ldr	r0, [pc, #220]	; (8000fec <HAL_UART_MspInit+0x158>)
 8000f0e:	f000 fe7b 	bl	8001c08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f14:	4a37      	ldr	r2, [pc, #220]	; (8000ff4 <HAL_UART_MspInit+0x160>)
 8000f16:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f18:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f20:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f26:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2c:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f32:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f34:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4c:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f52:	4827      	ldr	r0, [pc, #156]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f54:	f000 fa56 	bl	8001404 <HAL_DMA_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000f5e:	f7ff ff1f 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
 8000f68:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <HAL_UART_MspInit+0x15c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000f70:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <HAL_UART_MspInit+0x168>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000f7e:	2240      	movs	r2, #64	; 0x40
 8000f80:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fae:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000fb0:	f000 fa28 	bl	8001404 <HAL_DMA_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000fba:	f7ff fef1 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc4:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <HAL_UART_MspInit+0x164>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2105      	movs	r1, #5
 8000fce:	2025      	movs	r0, #37	; 0x25
 8000fd0:	f000 f9e1 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fd4:	2025      	movs	r0, #37	; 0x25
 8000fd6:	f000 f9fa 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40011000 	.word	0x40011000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	20000fa4 	.word	0x20000fa4
 8000ff4:	40026440 	.word	0x40026440
 8000ff8:	20001004 	.word	0x20001004
 8000ffc:	400264b8 	.word	0x400264b8

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f8b6 	bl	80011a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001034:	f003 ffa6 	bl	8004f84 <xTaskGetSchedulerState>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d001      	beq.n	8001042 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800103e:	f004 f9e3 	bl	8005408 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <USART1_IRQHandler+0x10>)
 800104e:	f002 f83f 	bl	80030d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000f60 	.word	0x20000f60

0800105c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <DMA2_Stream2_IRQHandler+0x10>)
 8001062:	f000 fb67 	bl	8001734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000fa4 	.word	0x20000fa4

08001070 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <DMA2_Stream7_IRQHandler+0x10>)
 8001076:	f000 fb5d 	bl	8001734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20001004 	.word	0x20001004

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ae:	490e      	ldr	r1, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
	  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c4:	4c0b      	ldr	r4, [pc, #44]	; (80010f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d2:	f7ff ffd7 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f004 fbe9 	bl	80058ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fba9 	bl	8000830 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010ec:	080059d0 	.word	0x080059d0
  ldr r2, =_sbss
 80010f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010f4:	20004dcc 	.word	0x20004dcc

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f92b 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fe3c 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f943 	bl	80013ea <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f90b 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20001074 	.word	0x20001074

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20001074 	.word	0x20001074

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff3e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff31 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff feda 	bl	80011c8 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e099      	b.n	8001554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001440:	e00f      	b.n	8001462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001442:	f7ff fec1 	bl	80011c8 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b05      	cmp	r3, #5
 800144e:	d908      	bls.n	8001462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2220      	movs	r2, #32
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2203      	movs	r2, #3
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e078      	b.n	8001554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e8      	bne.n	8001442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_DMA_Init+0x158>)
 800147c:	4013      	ands	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800148e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d107      	bne.n	80014cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4313      	orrs	r3, r2
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f023 0307 	bic.w	r3, r3, #7
 80014e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d117      	bne.n	8001526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00e      	beq.n	8001526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fb01 	bl	8001b10 <DMA_CheckFifoParam>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001522:	2301      	movs	r3, #1
 8001524:	e016      	b.n	8001554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fab8 	bl	8001aa4 <DMA_CalcBaseAndBitshift>
 8001534:	4603      	mov	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	223f      	movs	r2, #63	; 0x3f
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	f010803f 	.word	0xf010803f

08001560 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_DMA_Start_IT+0x26>
 8001582:	2302      	movs	r3, #2
 8001584:	e040      	b.n	8001608 <HAL_DMA_Start_IT+0xa8>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d12f      	bne.n	80015fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2202      	movs	r2, #2
 800159e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fa4a 	bl	8001a48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	223f      	movs	r2, #63	; 0x3f
 80015ba:	409a      	lsls	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0216 	orr.w	r2, r2, #22
 80015ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0208 	orr.w	r2, r2, #8
 80015e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e005      	b.n	8001606 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001602:	2302      	movs	r3, #2
 8001604:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001606:	7dfb      	ldrb	r3, [r7, #23]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800161e:	f7ff fdd3 	bl	80011c8 <HAL_GetTick>
 8001622:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d008      	beq.n	8001642 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e052      	b.n	80016e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0216 	bic.w	r2, r2, #22
 8001650:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001660:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <HAL_DMA_Abort+0x62>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0208 	bic.w	r2, r2, #8
 8001680:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0201 	bic.w	r2, r2, #1
 8001690:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001692:	e013      	b.n	80016bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001694:	f7ff fd98 	bl	80011c8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d90c      	bls.n	80016bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2220      	movs	r2, #32
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2203      	movs	r2, #3
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e015      	b.n	80016e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1e4      	bne.n	8001694 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	223f      	movs	r2, #63	; 0x3f
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d004      	beq.n	800170e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00c      	b.n	8001728 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2205      	movs	r2, #5
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001740:	4b8e      	ldr	r3, [pc, #568]	; (800197c <HAL_DMA_IRQHandler+0x248>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a8e      	ldr	r2, [pc, #568]	; (8001980 <HAL_DMA_IRQHandler+0x24c>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0a9b      	lsrs	r3, r3, #10
 800174c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2208      	movs	r2, #8
 8001760:	409a      	lsls	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01a      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0204 	bic.w	r2, r2, #4
 8001786:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	2208      	movs	r2, #8
 800178e:	409a      	lsls	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	2201      	movs	r2, #1
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d012      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00b      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2201      	movs	r2, #1
 80017c4:	409a      	lsls	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	f043 0202 	orr.w	r2, r3, #2
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	2204      	movs	r2, #4
 80017dc:	409a      	lsls	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d012      	beq.n	800180c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00b      	beq.n	800180c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2204      	movs	r2, #4
 80017fa:	409a      	lsls	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f043 0204 	orr.w	r2, r3, #4
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	2210      	movs	r2, #16
 8001812:	409a      	lsls	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d043      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d03c      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2210      	movs	r2, #16
 8001830:	409a      	lsls	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d018      	beq.n	8001876 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d108      	bne.n	8001864 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d024      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
 8001862:	e01f      	b.n	80018a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01b      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
 8001874:	e016      	b.n	80018a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d107      	bne.n	8001894 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0208 	bic.w	r2, r2, #8
 8001892:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	2220      	movs	r2, #32
 80018aa:	409a      	lsls	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 808f 	beq.w	80019d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8087 	beq.w	80019d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ca:	2220      	movs	r2, #32
 80018cc:	409a      	lsls	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d136      	bne.n	800194c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0216 	bic.w	r2, r2, #22
 80018ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	d103      	bne.n	800190e <HAL_DMA_IRQHandler+0x1da>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0208 	bic.w	r2, r2, #8
 800191c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	223f      	movs	r2, #63	; 0x3f
 8001924:	409a      	lsls	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193e:	2b00      	cmp	r3, #0
 8001940:	d07e      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
        }
        return;
 800194a:	e079      	b.n	8001a40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d01d      	beq.n	8001996 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10d      	bne.n	8001984 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	2b00      	cmp	r3, #0
 800196e:	d031      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
 8001978:	e02c      	b.n	80019d4 <HAL_DMA_IRQHandler+0x2a0>
 800197a:	bf00      	nop
 800197c:	20000000 	.word	0x20000000
 8001980:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d023      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
 8001994:	e01e      	b.n	80019d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10f      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0210 	bic.w	r2, r2, #16
 80019b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d032      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d022      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2205      	movs	r2, #5
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d307      	bcc.n	8001a1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f2      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x2cc>
 8001a1a:	e000      	b.n	8001a1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
 8001a3e:	e000      	b.n	8001a42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a40:	bf00      	nop
    }
  }
}
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b40      	cmp	r3, #64	; 0x40
 8001a74:	d108      	bne.n	8001a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a86:	e007      	b.n	8001a98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	60da      	str	r2, [r3, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3b10      	subs	r3, #16
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <DMA_CalcBaseAndBitshift+0x64>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <DMA_CalcBaseAndBitshift+0x68>)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d909      	bls.n	8001ae6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ada:	f023 0303 	bic.w	r3, r3, #3
 8001ade:	1d1a      	adds	r2, r3, #4
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ae4:	e007      	b.n	8001af6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	aaaaaaab 	.word	0xaaaaaaab
 8001b0c:	080059b8 	.word	0x080059b8

08001b10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d11f      	bne.n	8001b6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d856      	bhi.n	8001bde <DMA_CheckFifoParam+0xce>
 8001b30:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <DMA_CheckFifoParam+0x28>)
 8001b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b36:	bf00      	nop
 8001b38:	08001b49 	.word	0x08001b49
 8001b3c:	08001b5b 	.word	0x08001b5b
 8001b40:	08001b49 	.word	0x08001b49
 8001b44:	08001bdf 	.word	0x08001bdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d046      	beq.n	8001be2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b58:	e043      	b.n	8001be2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b62:	d140      	bne.n	8001be6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b68:	e03d      	b.n	8001be6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b72:	d121      	bne.n	8001bb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d837      	bhi.n	8001bea <DMA_CheckFifoParam+0xda>
 8001b7a:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <DMA_CheckFifoParam+0x70>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001b91 	.word	0x08001b91
 8001b84:	08001b97 	.word	0x08001b97
 8001b88:	08001b91 	.word	0x08001b91
 8001b8c:	08001ba9 	.word	0x08001ba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
      break;
 8001b94:	e030      	b.n	8001bf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d025      	beq.n	8001bee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba6:	e022      	b.n	8001bee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bb0:	d11f      	bne.n	8001bf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bb6:	e01c      	b.n	8001bf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d903      	bls.n	8001bc6 <DMA_CheckFifoParam+0xb6>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d003      	beq.n	8001bcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bc4:	e018      	b.n	8001bf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bca:	e015      	b.n	8001bf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00e      	beq.n	8001bf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
      break;
 8001bdc:	e00b      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bde:	bf00      	nop
 8001be0:	e00a      	b.n	8001bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001be2:	bf00      	nop
 8001be4:	e008      	b.n	8001bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001be6:	bf00      	nop
 8001be8:	e006      	b.n	8001bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bea:	bf00      	nop
 8001bec:	e004      	b.n	8001bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bee:	bf00      	nop
 8001bf0:	e002      	b.n	8001bf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bf2:	bf00      	nop
 8001bf4:	e000      	b.n	8001bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf6:	bf00      	nop
    }
  } 
  
  return status; 
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e159      	b.n	8001ed8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8148 	bne.w	8001ed2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d005      	beq.n	8001c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d017      	beq.n	8001cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d123      	bne.n	8001d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80a2 	beq.w	8001ed2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001daa:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <HAL_GPIO_Init+0x2ec>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x202>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a48      	ldr	r2, [pc, #288]	; (8001efc <HAL_GPIO_Init+0x2f4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x1fe>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a47      	ldr	r2, [pc, #284]	; (8001f00 <HAL_GPIO_Init+0x2f8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x1fa>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a46      	ldr	r2, [pc, #280]	; (8001f04 <HAL_GPIO_Init+0x2fc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x1f6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a45      	ldr	r2, [pc, #276]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x1f2>
 8001df6:	2304      	movs	r3, #4
 8001df8:	e008      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f002 0203 	and.w	r2, r2, #3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1c:	4935      	ldr	r1, [pc, #212]	; (8001ef4 <HAL_GPIO_Init+0x2ec>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e78:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ecc:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	f67f aea2 	bls.w	8001c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40013c00 	.word	0x40013c00

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f2c:	e003      	b.n	8001f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	041a      	lsls	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f54:	887a      	ldrh	r2, [r7, #2]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	400b      	ands	r3, r1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e267      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d075      	beq.n	8002082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f96:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d00c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa2:	4b85      	ldr	r3, [pc, #532]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d112      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fae:	4b82      	ldr	r3, [pc, #520]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	4b7e      	ldr	r3, [pc, #504]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05b      	beq.n	8002080 <HAL_RCC_OscConfig+0x108>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d157      	bne.n	8002080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e242      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_OscConfig+0x74>
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e01d      	b.n	8002028 <HAL_RCC_OscConfig+0xb0>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x98>
 8001ff6:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6f      	ldr	r2, [pc, #444]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6c      	ldr	r2, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0xb0>
 8002010:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a68      	ldr	r2, [pc, #416]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a65      	ldr	r2, [pc, #404]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff f8ca 	bl	80011c8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff f8c6 	bl	80011c8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e207      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0xc0>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff f8b6 	bl	80011c8 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff f8b2 	bl	80011c8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1f3      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0xe8>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d063      	beq.n	8002156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d11c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a6:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x152>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e1c7      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4937      	ldr	r1, [pc, #220]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	e03a      	b.n	8002156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_OscConfig+0x244>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7ff f86b 	bl	80011c8 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff f867 	bl	80011c8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e1a8      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4925      	ldr	r1, [pc, #148]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCC_OscConfig+0x244>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff f84a 	bl	80011c8 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002138:	f7ff f846 	bl	80011c8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e187      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d036      	beq.n	80021d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_RCC_OscConfig+0x248>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7ff f82a 	bl	80011c8 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002178:	f7ff f826 	bl	80011c8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e167      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x240>)
 800218c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x200>
 8002196:	e01b      	b.n	80021d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_OscConfig+0x248>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7ff f813 	bl	80011c8 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	e00e      	b.n	80021c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a6:	f7ff f80f 	bl	80011c8 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d907      	bls.n	80021c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e150      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
 80021b8:	40023800 	.word	0x40023800
 80021bc:	42470000 	.word	0x42470000
 80021c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 80021c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ea      	bne.n	80021a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8097 	beq.w	800230c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e2:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b7d      	ldr	r3, [pc, #500]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a7c      	ldr	r2, [pc, #496]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b7a      	ldr	r3, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b77      	ldr	r3, [pc, #476]	; (80023ec <HAL_RCC_OscConfig+0x474>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b74      	ldr	r3, [pc, #464]	; (80023ec <HAL_RCC_OscConfig+0x474>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a73      	ldr	r2, [pc, #460]	; (80023ec <HAL_RCC_OscConfig+0x474>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe ffcf 	bl	80011c8 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe ffcb 	bl	80011c8 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e10c      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x474>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x2ea>
 8002254:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
 8002260:	e01c      	b.n	800229c <HAL_RCC_OscConfig+0x324>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b05      	cmp	r3, #5
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x30c>
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a5e      	ldr	r2, [pc, #376]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
 8002276:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a5b      	ldr	r2, [pc, #364]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0x324>
 8002284:	4b58      	ldr	r3, [pc, #352]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	4a57      	ldr	r2, [pc, #348]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6713      	str	r3, [r2, #112]	; 0x70
 8002290:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a54      	ldr	r2, [pc, #336]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe ff90 	bl	80011c8 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f7fe ff8c 	bl	80011c8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0cb      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c2:	4b49      	ldr	r3, [pc, #292]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0ee      	beq.n	80022ac <HAL_RCC_OscConfig+0x334>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7fe ff7a 	bl	80011c8 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe ff76 	bl	80011c8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0b5      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ee:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ee      	bne.n	80022d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4a38      	ldr	r2, [pc, #224]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80a1 	beq.w	8002458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b08      	cmp	r3, #8
 8002320:	d05c      	beq.n	80023dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d141      	bne.n	80023ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_RCC_OscConfig+0x478>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe ff4a 	bl	80011c8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe ff46 	bl	80011c8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e087      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	019b      	lsls	r3, r3, #6
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	3b01      	subs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	491b      	ldr	r1, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x478>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe ff1f 	bl	80011c8 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238e:	f7fe ff1b 	bl	80011c8 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e05c      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x416>
 80023ac:	e054      	b.n	8002458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_RCC_OscConfig+0x478>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe ff08 	bl	80011c8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe ff04 	bl	80011c8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e045      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_OscConfig+0x470>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x444>
 80023da:	e03d      	b.n	8002458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e038      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_RCC_OscConfig+0x4ec>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d028      	beq.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d121      	bne.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d11a      	bne.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800242a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800242c:	4293      	cmp	r3, r2
 800242e:	d111      	bne.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	3b01      	subs	r3, #1
 800243e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d107      	bne.n	8002454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800

08002468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0cc      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b68      	ldr	r3, [pc, #416]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d90c      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b63      	ldr	r3, [pc, #396]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0b8      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d4:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a52      	ldr	r2, [pc, #328]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e0:	4b50      	ldr	r3, [pc, #320]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	494d      	ldr	r1, [pc, #308]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d044      	beq.n	8002588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d119      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e07f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d003      	beq.n	8002526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	2b03      	cmp	r3, #3
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e067      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4934      	ldr	r1, [pc, #208]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002558:	f7fe fe36 	bl	80011c8 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7fe fe32 	bl	80011c8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e04f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d1eb      	bne.n	8002560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d20c      	bcs.n	80025b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e032      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4916      	ldr	r1, [pc, #88]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	490e      	ldr	r1, [pc, #56]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ee:	f000 f821 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	490a      	ldr	r1, [pc, #40]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	5ccb      	ldrb	r3, [r1, r3]
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	4a09      	ldr	r2, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fd96 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023c00 	.word	0x40023c00
 8002624:	40023800 	.word	0x40023800
 8002628:	080059a0 	.word	0x080059a0
 800262c:	20000000 	.word	0x20000000
 8002630:	20000004 	.word	0x20000004

08002634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002638:	b094      	sub	sp, #80	; 0x50
 800263a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	647b      	str	r3, [r7, #68]	; 0x44
 8002640:	2300      	movs	r3, #0
 8002642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002644:	2300      	movs	r3, #0
 8002646:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800264c:	4b79      	ldr	r3, [pc, #484]	; (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d00d      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x40>
 8002658:	2b08      	cmp	r3, #8
 800265a:	f200 80e1 	bhi.w	8002820 <HAL_RCC_GetSysClockFreq+0x1ec>
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x34>
 8002662:	2b04      	cmp	r3, #4
 8002664:	d003      	beq.n	800266e <HAL_RCC_GetSysClockFreq+0x3a>
 8002666:	e0db      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b73      	ldr	r3, [pc, #460]	; (8002838 <HAL_RCC_GetSysClockFreq+0x204>)
 800266a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800266c:	e0db      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800266e:	4b73      	ldr	r3, [pc, #460]	; (800283c <HAL_RCC_GetSysClockFreq+0x208>)
 8002670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002672:	e0d8      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002674:	4b6f      	ldr	r3, [pc, #444]	; (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800267e:	4b6d      	ldr	r3, [pc, #436]	; (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d063      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268a:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	099b      	lsrs	r3, r3, #6
 8002690:	2200      	movs	r2, #0
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
 8002694:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269c:	633b      	str	r3, [r7, #48]	; 0x30
 800269e:	2300      	movs	r3, #0
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
 80026a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026a6:	4622      	mov	r2, r4
 80026a8:	462b      	mov	r3, r5
 80026aa:	f04f 0000 	mov.w	r0, #0
 80026ae:	f04f 0100 	mov.w	r1, #0
 80026b2:	0159      	lsls	r1, r3, #5
 80026b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b8:	0150      	lsls	r0, r2, #5
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4621      	mov	r1, r4
 80026c0:	1a51      	subs	r1, r2, r1
 80026c2:	6139      	str	r1, [r7, #16]
 80026c4:	4629      	mov	r1, r5
 80026c6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d8:	4659      	mov	r1, fp
 80026da:	018b      	lsls	r3, r1, #6
 80026dc:	4651      	mov	r1, sl
 80026de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e2:	4651      	mov	r1, sl
 80026e4:	018a      	lsls	r2, r1, #6
 80026e6:	4651      	mov	r1, sl
 80026e8:	ebb2 0801 	subs.w	r8, r2, r1
 80026ec:	4659      	mov	r1, fp
 80026ee:	eb63 0901 	sbc.w	r9, r3, r1
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002706:	4690      	mov	r8, r2
 8002708:	4699      	mov	r9, r3
 800270a:	4623      	mov	r3, r4
 800270c:	eb18 0303 	adds.w	r3, r8, r3
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	462b      	mov	r3, r5
 8002714:	eb49 0303 	adc.w	r3, r9, r3
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002726:	4629      	mov	r1, r5
 8002728:	024b      	lsls	r3, r1, #9
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002730:	4621      	mov	r1, r4
 8002732:	024a      	lsls	r2, r1, #9
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273a:	2200      	movs	r2, #0
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
 800273e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002744:	f7fd fd4c 	bl	80001e0 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002750:	e058      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	2200      	movs	r2, #0
 800275a:	4618      	mov	r0, r3
 800275c:	4611      	mov	r1, r2
 800275e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002762:	623b      	str	r3, [r7, #32]
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
 8002768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800276c:	4642      	mov	r2, r8
 800276e:	464b      	mov	r3, r9
 8002770:	f04f 0000 	mov.w	r0, #0
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	0159      	lsls	r1, r3, #5
 800277a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277e:	0150      	lsls	r0, r2, #5
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4641      	mov	r1, r8
 8002786:	ebb2 0a01 	subs.w	sl, r2, r1
 800278a:	4649      	mov	r1, r9
 800278c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800279c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027a4:	ebb2 040a 	subs.w	r4, r2, sl
 80027a8:	eb63 050b 	sbc.w	r5, r3, fp
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	00eb      	lsls	r3, r5, #3
 80027b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ba:	00e2      	lsls	r2, r4, #3
 80027bc:	4614      	mov	r4, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	4643      	mov	r3, r8
 80027c2:	18e3      	adds	r3, r4, r3
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	464b      	mov	r3, r9
 80027c8:	eb45 0303 	adc.w	r3, r5, r3
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027da:	4629      	mov	r1, r5
 80027dc:	028b      	lsls	r3, r1, #10
 80027de:	4621      	mov	r1, r4
 80027e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e4:	4621      	mov	r1, r4
 80027e6:	028a      	lsls	r2, r1, #10
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ee:	2200      	movs	r2, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	61fa      	str	r2, [r7, #28]
 80027f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f8:	f7fd fcf2 	bl	80001e0 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4613      	mov	r3, r2
 8002802:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_GetSysClockFreq+0x200>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	3301      	adds	r3, #1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002814:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800281e:	e002      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetSysClockFreq+0x204>)
 8002822:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002828:	4618      	mov	r0, r3
 800282a:	3750      	adds	r7, #80	; 0x50
 800282c:	46bd      	mov	sp, r7
 800282e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800
 8002838:	00f42400 	.word	0x00f42400
 800283c:	007a1200 	.word	0x007a1200

08002840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCC_GetHCLKFreq+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000

08002858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800285c:	f7ff fff0 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0a9b      	lsrs	r3, r3, #10
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	; (800287c <HAL_RCC_GetPCLK1Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	080059b0 	.word	0x080059b0

08002880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002884:	f7ff ffdc 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0b5b      	lsrs	r3, r3, #13
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4903      	ldr	r1, [pc, #12]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40023800 	.word	0x40023800
 80028a4:	080059b0 	.word	0x080059b0

080028a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e041      	b.n	800293e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fa98 	bl	8000e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 f922 	bl	8002b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e041      	b.n	80029dc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f839 	bl	80029e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f000 f8d3 	bl	8002b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e088      	b.n	8002b28 <HAL_TIM_IC_ConfigChannel+0x130>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11b      	bne.n	8002a5c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f000 f8fc 	bl	8002c30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020c 	bic.w	r2, r2, #12
 8002a46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6999      	ldr	r1, [r3, #24]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	619a      	str	r2, [r3, #24]
 8002a5a:	e060      	b.n	8002b1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d11c      	bne.n	8002a9c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f000 f945 	bl	8002d00 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6999      	ldr	r1, [r3, #24]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	021a      	lsls	r2, r3, #8
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	619a      	str	r2, [r3, #24]
 8002a9a:	e040      	b.n	8002b1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d11b      	bne.n	8002ada <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f000 f962 	bl	8002d7a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 020c 	bic.w	r2, r2, #12
 8002ac4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69d9      	ldr	r1, [r3, #28]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	61da      	str	r2, [r3, #28]
 8002ad8:	e021      	b.n	8002b1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d11c      	bne.n	8002b1a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6819      	ldr	r1, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f000 f97f 	bl	8002df2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b02:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69d9      	ldr	r1, [r3, #28]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	021a      	lsls	r2, r3, #8
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	61da      	str	r2, [r3, #28]
 8002b18:	e001      	b.n	8002b1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <TIM_Base_SetConfig+0xe4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00f      	beq.n	8002b68 <TIM_Base_SetConfig+0x38>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4e:	d00b      	beq.n	8002b68 <TIM_Base_SetConfig+0x38>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <TIM_Base_SetConfig+0xe8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <TIM_Base_SetConfig+0x38>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <TIM_Base_SetConfig+0xec>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_Base_SetConfig+0x38>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <TIM_Base_SetConfig+0xf0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d108      	bne.n	8002b7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <TIM_Base_SetConfig+0xe4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01b      	beq.n	8002bba <TIM_Base_SetConfig+0x8a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b88:	d017      	beq.n	8002bba <TIM_Base_SetConfig+0x8a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <TIM_Base_SetConfig+0xe8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <TIM_Base_SetConfig+0x8a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <TIM_Base_SetConfig+0xec>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00f      	beq.n	8002bba <TIM_Base_SetConfig+0x8a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <TIM_Base_SetConfig+0xf0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00b      	beq.n	8002bba <TIM_Base_SetConfig+0x8a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <TIM_Base_SetConfig+0xf4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <TIM_Base_SetConfig+0x8a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <TIM_Base_SetConfig+0xf8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <TIM_Base_SetConfig+0x8a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <TIM_Base_SetConfig+0xfc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d108      	bne.n	8002bcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <TIM_Base_SetConfig+0xe4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d103      	bne.n	8002c00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	615a      	str	r2, [r3, #20]
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	40000c00 	.word	0x40000c00
 8002c24:	40014000 	.word	0x40014000
 8002c28:	40014400 	.word	0x40014400
 8002c2c:	40014800 	.word	0x40014800

08002c30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f023 0201 	bic.w	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4a24      	ldr	r2, [pc, #144]	; (8002cec <TIM_TI1_SetConfig+0xbc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <TIM_TI1_SetConfig+0x56>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d00f      	beq.n	8002c86 <TIM_TI1_SetConfig+0x56>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <TIM_TI1_SetConfig+0xc0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <TIM_TI1_SetConfig+0x56>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a20      	ldr	r2, [pc, #128]	; (8002cf4 <TIM_TI1_SetConfig+0xc4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <TIM_TI1_SetConfig+0x56>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <TIM_TI1_SetConfig+0xc8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_TI1_SetConfig+0x56>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <TIM_TI1_SetConfig+0xcc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <TIM_TI1_SetConfig+0x5a>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <TIM_TI1_SetConfig+0x5c>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e003      	b.n	8002caa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f023 030a 	bic.w	r3, r3, #10
 8002cc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f003 030a 	and.w	r3, r3, #10
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40000c00 	.word	0x40000c00
 8002cfc:	40014000 	.word	0x40014000

08002d00 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f023 0210 	bic.w	r2, r3, #16
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	031b      	lsls	r3, r3, #12
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b087      	sub	sp, #28
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b087      	sub	sp, #28
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	031b      	lsls	r3, r3, #12
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002e44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	031b      	lsls	r3, r3, #12
 8002e4a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	621a      	str	r2, [r3, #32]
}
 8002e60:	bf00      	nop
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e03f      	b.n	8002efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fffe 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 ff77 	bl	8003da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	; 0x30
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d165      	bne.n	8002fee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_UART_Transmit_DMA+0x26>
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e05e      	b.n	8002ff0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Transmit_DMA+0x38>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e057      	b.n	8002ff0 <HAL_UART_Transmit_DMA+0xe8>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2221      	movs	r2, #33	; 0x21
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	4a22      	ldr	r2, [pc, #136]	; (8002ff8 <HAL_UART_Transmit_DMA+0xf0>)
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <HAL_UART_Transmit_DMA+0xf4>)
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	4a20      	ldr	r2, [pc, #128]	; (8003000 <HAL_UART_Transmit_DMA+0xf8>)
 8002f7e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	2200      	movs	r2, #0
 8002f86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002f88:	f107 0308 	add.w	r3, r7, #8
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	f7fe fade 	bl	8001560 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3314      	adds	r3, #20
 8002fbc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8002fd8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	6a39      	ldr	r1, [r7, #32]
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e5      	bne.n	8002fb6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e000      	b.n	8002ff0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
  }
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3730      	adds	r7, #48	; 0x30
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	0800363d 	.word	0x0800363d
 8002ffc:	080036d7 	.word	0x080036d7
 8003000:	0800384f 	.word	0x0800384f

08003004 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b20      	cmp	r3, #32
 800301c:	d152      	bne.n	80030c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e04b      	b.n	80030c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003038:	2302      	movs	r3, #2
 800303a:	e044      	b.n	80030c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	461a      	mov	r2, r3
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fc47 	bl	80038e4 <UART_Start_Receive_DMA>
 8003056:	4603      	mov	r3, r0
 8003058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800305c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003060:	2b00      	cmp	r3, #0
 8003062:	d12c      	bne.n	80030be <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	2b01      	cmp	r3, #1
 800306a:	d125      	bne.n	80030b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	617b      	str	r3, [r7, #20]
   return(result);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f043 0310 	orr.w	r3, r3, #16
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a2:	627a      	str	r2, [r7, #36]	; 0x24
 80030a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6a39      	ldr	r1, [r7, #32]
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e5      	bne.n	8003082 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80030b6:	e002      	b.n	80030be <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80030be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030c2:	e000      	b.n	80030c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3730      	adds	r7, #48	; 0x30
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b0ba      	sub	sp, #232	; 0xe8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800310e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_UART_IRQHandler+0x66>
 8003122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fd7d 	bl	8003c2e <UART_Receive_IT>
      return;
 8003134:	e256      	b.n	80035e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80de 	beq.w	80032fc <HAL_UART_IRQHandler+0x22c>
 8003140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800314c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003150:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80d1 	beq.w	80032fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_UART_IRQHandler+0xae>
 8003166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800317e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_UART_IRQHandler+0xd2>
 800318a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0202 	orr.w	r2, r3, #2
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_UART_IRQHandler+0xf6>
 80031ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d011      	beq.n	80031f6 <HAL_UART_IRQHandler+0x126>
 80031d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f043 0208 	orr.w	r2, r3, #8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 81ed 	beq.w	80035da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_UART_IRQHandler+0x14e>
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fd08 	bl	8003c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <HAL_UART_IRQHandler+0x17a>
 8003242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d04f      	beq.n	80032ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fc10 	bl	8003a70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d141      	bne.n	80032e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3314      	adds	r3, #20
 8003286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800328a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800328e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800329a:	e841 2300 	strex	r3, r2, [r1]
 800329e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1d9      	bne.n	800325e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d013      	beq.n	80032da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4a7d      	ldr	r2, [pc, #500]	; (80034ac <HAL_UART_IRQHandler+0x3dc>)
 80032b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fa16 	bl	80016f0 <HAL_DMA_Abort_IT>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d4:	4610      	mov	r0, r2
 80032d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e00e      	b.n	80032f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9a4 	bl	8003628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e00a      	b.n	80032f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9a0 	bl	8003628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e006      	b.n	80032f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f99c 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032f6:	e170      	b.n	80035da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f8:	bf00      	nop
    return;
 80032fa:	e16e      	b.n	80035da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	2b01      	cmp	r3, #1
 8003302:	f040 814a 	bne.w	800359a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8143 	beq.w	800359a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 813c 	beq.w	800359a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	f040 80b4 	bne.w	80034b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8140 	beq.w	80035de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003366:	429a      	cmp	r2, r3
 8003368:	f080 8139 	bcs.w	80035de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003372:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337e:	f000 8088 	beq.w	8003492 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800339c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1d9      	bne.n	8003382 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e1      	bne.n	80033ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3314      	adds	r3, #20
 8003410:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800341a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800341c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3314      	adds	r3, #20
 800342a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800342e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003430:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003434:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800343c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e3      	bne.n	800340a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003462:	f023 0310 	bic.w	r3, r3, #16
 8003466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003474:	65ba      	str	r2, [r7, #88]	; 0x58
 8003476:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800347a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e3      	bne.n	8003450 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe f8bf 	bl	8001610 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800349a:	b29b      	uxth	r3, r3
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fc38 	bl	8000d18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034a8:	e099      	b.n	80035de <HAL_UART_IRQHandler+0x50e>
 80034aa:	bf00      	nop
 80034ac:	08003b37 	.word	0x08003b37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 808b 	beq.w	80035e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8086 	beq.w	80035e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034fa:	647a      	str	r2, [r7, #68]	; 0x44
 80034fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e3      	bne.n	80034d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3314      	adds	r3, #20
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	623b      	str	r3, [r7, #32]
   return(result);
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3314      	adds	r3, #20
 800352e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003532:	633a      	str	r2, [r7, #48]	; 0x30
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e3      	bne.n	800350e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	60fb      	str	r3, [r7, #12]
   return(result);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0310 	bic.w	r3, r3, #16
 800356a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003578:	61fa      	str	r2, [r7, #28]
 800357a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	69b9      	ldr	r1, [r7, #24]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	617b      	str	r3, [r7, #20]
   return(result);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e3      	bne.n	8003554 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800358c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fbc0 	bl	8000d18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003598:	e023      	b.n	80035e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_UART_IRQHandler+0x4ea>
 80035a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fad3 	bl	8003b5e <UART_Transmit_IT>
    return;
 80035b8:	e014      	b.n	80035e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <HAL_UART_IRQHandler+0x514>
 80035c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fb13 	bl	8003bfe <UART_EndTransmit_IT>
    return;
 80035d8:	e004      	b.n	80035e4 <HAL_UART_IRQHandler+0x514>
    return;
 80035da:	bf00      	nop
 80035dc:	e002      	b.n	80035e4 <HAL_UART_IRQHandler+0x514>
      return;
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <HAL_UART_IRQHandler+0x514>
      return;
 80035e2:	bf00      	nop
  }
}
 80035e4:	37e8      	adds	r7, #232	; 0xe8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop

080035ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b090      	sub	sp, #64	; 0x40
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d137      	bne.n	80036c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365a:	2200      	movs	r2, #0
 800365c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3314      	adds	r3, #20
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	623b      	str	r3, [r7, #32]
   return(result);
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003674:	63bb      	str	r3, [r7, #56]	; 0x38
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800367e:	633a      	str	r2, [r7, #48]	; 0x30
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e5      	bne.n	800365e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b2:	61fa      	str	r2, [r7, #28]
 80036b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	617b      	str	r3, [r7, #20]
   return(result);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e5      	bne.n	8003692 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036c6:	e002      	b.n	80036ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80036c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036ca:	f7fd fb1b 	bl	8000d04 <HAL_UART_TxCpltCallback>
}
 80036ce:	bf00      	nop
 80036d0:	3740      	adds	r7, #64	; 0x40
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff ff81 	bl	80035ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b09c      	sub	sp, #112	; 0x70
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d172      	bne.n	80037f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003710:	2200      	movs	r2, #0
 8003712:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	330c      	adds	r3, #12
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800372a:	66bb      	str	r3, [r7, #104]	; 0x68
 800372c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003734:	65ba      	str	r2, [r7, #88]	; 0x58
 8003736:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800373a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	667b      	str	r3, [r7, #100]	; 0x64
 8003760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3314      	adds	r3, #20
 8003766:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003768:	647a      	str	r2, [r7, #68]	; 0x44
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800376e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800377c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3314      	adds	r3, #20
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	623b      	str	r3, [r7, #32]
   return(result);
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003792:	663b      	str	r3, [r7, #96]	; 0x60
 8003794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3314      	adds	r3, #20
 800379a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800379c:	633a      	str	r2, [r7, #48]	; 0x30
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e5      	bne.n	800377c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d119      	bne.n	80037f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0310 	bic.w	r3, r3, #16
 80037d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037e0:	61fa      	str	r2, [r7, #28]
 80037e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	617b      	str	r3, [r7, #20]
   return(result);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d106      	bne.n	800380a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003800:	4619      	mov	r1, r3
 8003802:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003804:	f7fd fa88 	bl	8000d18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003808:	e002      	b.n	8003810 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800380a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800380c:	f7ff fef8 	bl	8003600 <HAL_UART_RxCpltCallback>
}
 8003810:	bf00      	nop
 8003812:	3770      	adds	r7, #112	; 0x70
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	2b01      	cmp	r3, #1
 800382c:	d108      	bne.n	8003840 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	b29b      	uxth	r3, r3
 8003836:	4619      	mov	r1, r3
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7fd fa6d 	bl	8000d18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800383e:	e002      	b.n	8003846 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff fee7 	bl	8003614 <HAL_UART_RxHalfCpltCallback>
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b21      	cmp	r3, #33	; 0x21
 8003880:	d108      	bne.n	8003894 <UART_DMAError+0x46>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2200      	movs	r2, #0
 800388c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800388e:	68b8      	ldr	r0, [r7, #8]
 8003890:	f000 f8c6 	bl	8003a20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	bf0c      	ite	eq
 80038a2:	2301      	moveq	r3, #1
 80038a4:	2300      	movne	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b22      	cmp	r3, #34	; 0x22
 80038b4:	d108      	bne.n	80038c8 <UART_DMAError+0x7a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2200      	movs	r2, #0
 80038c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80038c2:	68b8      	ldr	r0, [r7, #8]
 80038c4:	f000 f8d4 	bl	8003a70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038d4:	68b8      	ldr	r0, [r7, #8]
 80038d6:	f7ff fea7 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b098      	sub	sp, #96	; 0x60
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2222      	movs	r2, #34	; 0x22
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	4a40      	ldr	r2, [pc, #256]	; (8003a14 <UART_Start_Receive_DMA+0x130>)
 8003912:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	4a3f      	ldr	r2, [pc, #252]	; (8003a18 <UART_Start_Receive_DMA+0x134>)
 800391a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	4a3e      	ldr	r2, [pc, #248]	; (8003a1c <UART_Start_Receive_DMA+0x138>)
 8003922:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	2200      	movs	r2, #0
 800392a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800392c:	f107 0308 	add.w	r3, r7, #8
 8003930:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	f7fd fe0c 	bl	8001560 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d019      	beq.n	80039a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	65bb      	str	r3, [r7, #88]	; 0x58
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800398e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003990:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800399c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	657b      	str	r3, [r7, #84]	; 0x54
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3314      	adds	r3, #20
 80039c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e5      	bne.n	80039a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3314      	adds	r3, #20
 80039dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	617b      	str	r3, [r7, #20]
   return(result);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ec:	653b      	str	r3, [r7, #80]	; 0x50
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3314      	adds	r3, #20
 80039f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039f6:	627a      	str	r2, [r7, #36]	; 0x24
 80039f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6a39      	ldr	r1, [r7, #32]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e5      	bne.n	80039d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3760      	adds	r7, #96	; 0x60
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	080036f3 	.word	0x080036f3
 8003a18:	08003819 	.word	0x08003819
 8003a1c:	0800384f 	.word	0x0800384f

08003a20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	61ba      	str	r2, [r7, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6979      	ldr	r1, [r7, #20]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	613b      	str	r3, [r7, #16]
   return(result);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e5      	bne.n	8003a28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003a64:	bf00      	nop
 8003a66:	3724      	adds	r7, #36	; 0x24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b095      	sub	sp, #84	; 0x54
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a98:	643a      	str	r2, [r7, #64]	; 0x40
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e5      	bne.n	8003a78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3314      	adds	r3, #20
 8003aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e5      	bne.n	8003aac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d119      	bne.n	8003b1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f023 0310 	bic.w	r3, r3, #16
 8003afe:	647b      	str	r3, [r7, #68]	; 0x44
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b08:	61ba      	str	r2, [r7, #24]
 8003b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6979      	ldr	r1, [r7, #20]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	613b      	str	r3, [r7, #16]
   return(result);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e5      	bne.n	8003ae8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b2a:	bf00      	nop
 8003b2c:	3754      	adds	r7, #84	; 0x54
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f7ff fd69 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b21      	cmp	r3, #33	; 0x21
 8003b70:	d13e      	bne.n	8003bf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d114      	bne.n	8003ba6 <UART_Transmit_IT+0x48>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d110      	bne.n	8003ba6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	621a      	str	r2, [r3, #32]
 8003ba4:	e008      	b.n	8003bb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	1c59      	adds	r1, r3, #1
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6211      	str	r1, [r2, #32]
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10f      	bne.n	8003bec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e000      	b.n	8003bf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd f870 	bl	8000d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b08c      	sub	sp, #48	; 0x30
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b22      	cmp	r3, #34	; 0x22
 8003c40:	f040 80ab 	bne.w	8003d9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4c:	d117      	bne.n	8003c7e <UART_Receive_IT+0x50>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d113      	bne.n	8003c7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	1c9a      	adds	r2, r3, #2
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c7c:	e026      	b.n	8003ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c90:	d007      	beq.n	8003ca2 <UART_Receive_IT+0x74>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <UART_Receive_IT+0x82>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e008      	b.n	8003cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d15a      	bne.n	8003d96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0220 	bic.w	r2, r2, #32
 8003cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d135      	bne.n	8003d8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	613b      	str	r3, [r7, #16]
   return(result);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f023 0310 	bic.w	r3, r3, #16
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d46:	623a      	str	r2, [r7, #32]
 8003d48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	69f9      	ldr	r1, [r7, #28]
 8003d4c:	6a3a      	ldr	r2, [r7, #32]
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e5      	bne.n	8003d26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d10a      	bne.n	8003d7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fc ffc7 	bl	8000d18 <HAL_UARTEx_RxEventCallback>
 8003d8a:	e002      	b.n	8003d92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fc37 	bl	8003600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e002      	b.n	8003d9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	e000      	b.n	8003d9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
  }
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3730      	adds	r7, #48	; 0x30
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da8:	b0c0      	sub	sp, #256	; 0x100
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	68d9      	ldr	r1, [r3, #12]
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	ea40 0301 	orr.w	r3, r0, r1
 8003dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dfc:	f021 010c 	bic.w	r1, r1, #12
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1e:	6999      	ldr	r1, [r3, #24]
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	ea40 0301 	orr.w	r3, r0, r1
 8003e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b8f      	ldr	r3, [pc, #572]	; (8004070 <UART_SetConfig+0x2cc>)
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d005      	beq.n	8003e44 <UART_SetConfig+0xa0>
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b8d      	ldr	r3, [pc, #564]	; (8004074 <UART_SetConfig+0x2d0>)
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d104      	bne.n	8003e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e44:	f7fe fd1c 	bl	8002880 <HAL_RCC_GetPCLK2Freq>
 8003e48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e4c:	e003      	b.n	8003e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e4e:	f7fe fd03 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 8003e52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e60:	f040 810c 	bne.w	800407c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e76:	4622      	mov	r2, r4
 8003e78:	462b      	mov	r3, r5
 8003e7a:	1891      	adds	r1, r2, r2
 8003e7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e7e:	415b      	adcs	r3, r3
 8003e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e86:	4621      	mov	r1, r4
 8003e88:	eb12 0801 	adds.w	r8, r2, r1
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	eb43 0901 	adc.w	r9, r3, r1
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea6:	4690      	mov	r8, r2
 8003ea8:	4699      	mov	r9, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	eb18 0303 	adds.w	r3, r8, r3
 8003eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	eb49 0303 	adc.w	r3, r9, r3
 8003eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003eca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	18db      	adds	r3, r3, r3
 8003ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ed8:	4613      	mov	r3, r2
 8003eda:	eb42 0303 	adc.w	r3, r2, r3
 8003ede:	657b      	str	r3, [r7, #84]	; 0x54
 8003ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ee8:	f7fc f97a 	bl	80001e0 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4b61      	ldr	r3, [pc, #388]	; (8004078 <UART_SetConfig+0x2d4>)
 8003ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	011c      	lsls	r4, r3, #4
 8003efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	1891      	adds	r1, r2, r2
 8003f12:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f14:	415b      	adcs	r3, r3
 8003f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f22:	4649      	mov	r1, r9
 8003f24:	eb43 0b01 	adc.w	fp, r3, r1
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f3c:	4692      	mov	sl, r2
 8003f3e:	469b      	mov	fp, r3
 8003f40:	4643      	mov	r3, r8
 8003f42:	eb1a 0303 	adds.w	r3, sl, r3
 8003f46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	18db      	adds	r3, r3, r3
 8003f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6e:	4613      	mov	r3, r2
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	647b      	str	r3, [r7, #68]	; 0x44
 8003f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f7e:	f7fc f92f 	bl	80001e0 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <UART_SetConfig+0x2d4>)
 8003f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2264      	movs	r2, #100	; 0x64
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	1acb      	subs	r3, r1, r3
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f9e:	4b36      	ldr	r3, [pc, #216]	; (8004078 <UART_SetConfig+0x2d4>)
 8003fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fac:	441c      	add	r4, r3
 8003fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	1891      	adds	r1, r2, r2
 8003fc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fc8:	415b      	adcs	r3, r3
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	1851      	adds	r1, r2, r1
 8003fd4:	6339      	str	r1, [r7, #48]	; 0x30
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	414b      	adcs	r3, r1
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fe8:	4659      	mov	r1, fp
 8003fea:	00cb      	lsls	r3, r1, #3
 8003fec:	4651      	mov	r1, sl
 8003fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff2:	4651      	mov	r1, sl
 8003ff4:	00ca      	lsls	r2, r1, #3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004004:	464b      	mov	r3, r9
 8004006:	460a      	mov	r2, r1
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800401c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004024:	460b      	mov	r3, r1
 8004026:	18db      	adds	r3, r3, r3
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
 800402a:	4613      	mov	r3, r2
 800402c:	eb42 0303 	adc.w	r3, r2, r3
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800403a:	f7fc f8d1 	bl	80001e0 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <UART_SetConfig+0x2d4>)
 8004044:	fba3 1302 	umull	r1, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	2164      	movs	r1, #100	; 0x64
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3332      	adds	r3, #50	; 0x32
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <UART_SetConfig+0x2d4>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	f003 0207 	and.w	r2, r3, #7
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4422      	add	r2, r4
 800406a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800406c:	e106      	b.n	800427c <UART_SetConfig+0x4d8>
 800406e:	bf00      	nop
 8004070:	40011000 	.word	0x40011000
 8004074:	40011400 	.word	0x40011400
 8004078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800407c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004080:	2200      	movs	r2, #0
 8004082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004086:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800408a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800408e:	4642      	mov	r2, r8
 8004090:	464b      	mov	r3, r9
 8004092:	1891      	adds	r1, r2, r2
 8004094:	6239      	str	r1, [r7, #32]
 8004096:	415b      	adcs	r3, r3
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
 800409a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800409e:	4641      	mov	r1, r8
 80040a0:	1854      	adds	r4, r2, r1
 80040a2:	4649      	mov	r1, r9
 80040a4:	eb43 0501 	adc.w	r5, r3, r1
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	00eb      	lsls	r3, r5, #3
 80040b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b6:	00e2      	lsls	r2, r4, #3
 80040b8:	4614      	mov	r4, r2
 80040ba:	461d      	mov	r5, r3
 80040bc:	4643      	mov	r3, r8
 80040be:	18e3      	adds	r3, r4, r3
 80040c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040c4:	464b      	mov	r3, r9
 80040c6:	eb45 0303 	adc.w	r3, r5, r3
 80040ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040ea:	4629      	mov	r1, r5
 80040ec:	008b      	lsls	r3, r1, #2
 80040ee:	4621      	mov	r1, r4
 80040f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f4:	4621      	mov	r1, r4
 80040f6:	008a      	lsls	r2, r1, #2
 80040f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040fc:	f7fc f870 	bl	80001e0 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4b60      	ldr	r3, [pc, #384]	; (8004288 <UART_SetConfig+0x4e4>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	011c      	lsls	r4, r3, #4
 800410e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004112:	2200      	movs	r2, #0
 8004114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004118:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800411c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	1891      	adds	r1, r2, r2
 8004126:	61b9      	str	r1, [r7, #24]
 8004128:	415b      	adcs	r3, r3
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004130:	4641      	mov	r1, r8
 8004132:	1851      	adds	r1, r2, r1
 8004134:	6139      	str	r1, [r7, #16]
 8004136:	4649      	mov	r1, r9
 8004138:	414b      	adcs	r3, r1
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004148:	4659      	mov	r1, fp
 800414a:	00cb      	lsls	r3, r1, #3
 800414c:	4651      	mov	r1, sl
 800414e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004152:	4651      	mov	r1, sl
 8004154:	00ca      	lsls	r2, r1, #3
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	4603      	mov	r3, r0
 800415c:	4642      	mov	r2, r8
 800415e:	189b      	adds	r3, r3, r2
 8004160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004164:	464b      	mov	r3, r9
 8004166:	460a      	mov	r2, r1
 8004168:	eb42 0303 	adc.w	r3, r2, r3
 800416c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	67bb      	str	r3, [r7, #120]	; 0x78
 800417a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004188:	4649      	mov	r1, r9
 800418a:	008b      	lsls	r3, r1, #2
 800418c:	4641      	mov	r1, r8
 800418e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004192:	4641      	mov	r1, r8
 8004194:	008a      	lsls	r2, r1, #2
 8004196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800419a:	f7fc f821 	bl	80001e0 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	4b38      	ldr	r3, [pc, #224]	; (8004288 <UART_SetConfig+0x4e4>)
 80041a6:	fba3 2301 	umull	r2, r3, r3, r1
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2264      	movs	r2, #100	; 0x64
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	1acb      	subs	r3, r1, r3
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	3332      	adds	r3, #50	; 0x32
 80041b8:	4a33      	ldr	r2, [pc, #204]	; (8004288 <UART_SetConfig+0x4e4>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c4:	441c      	add	r4, r3
 80041c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ca:	2200      	movs	r2, #0
 80041cc:	673b      	str	r3, [r7, #112]	; 0x70
 80041ce:	677a      	str	r2, [r7, #116]	; 0x74
 80041d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041d4:	4642      	mov	r2, r8
 80041d6:	464b      	mov	r3, r9
 80041d8:	1891      	adds	r1, r2, r2
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	415b      	adcs	r3, r3
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e4:	4641      	mov	r1, r8
 80041e6:	1851      	adds	r1, r2, r1
 80041e8:	6039      	str	r1, [r7, #0]
 80041ea:	4649      	mov	r1, r9
 80041ec:	414b      	adcs	r3, r1
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041fc:	4659      	mov	r1, fp
 80041fe:	00cb      	lsls	r3, r1, #3
 8004200:	4651      	mov	r1, sl
 8004202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004206:	4651      	mov	r1, sl
 8004208:	00ca      	lsls	r2, r1, #3
 800420a:	4610      	mov	r0, r2
 800420c:	4619      	mov	r1, r3
 800420e:	4603      	mov	r3, r0
 8004210:	4642      	mov	r2, r8
 8004212:	189b      	adds	r3, r3, r2
 8004214:	66bb      	str	r3, [r7, #104]	; 0x68
 8004216:	464b      	mov	r3, r9
 8004218:	460a      	mov	r2, r1
 800421a:	eb42 0303 	adc.w	r3, r2, r3
 800421e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	663b      	str	r3, [r7, #96]	; 0x60
 800422a:	667a      	str	r2, [r7, #100]	; 0x64
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004238:	4649      	mov	r1, r9
 800423a:	008b      	lsls	r3, r1, #2
 800423c:	4641      	mov	r1, r8
 800423e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004242:	4641      	mov	r1, r8
 8004244:	008a      	lsls	r2, r1, #2
 8004246:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800424a:	f7fb ffc9 	bl	80001e0 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <UART_SetConfig+0x4e4>)
 8004254:	fba3 1302 	umull	r1, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2164      	movs	r1, #100	; 0x64
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	3332      	adds	r3, #50	; 0x32
 8004266:	4a08      	ldr	r2, [pc, #32]	; (8004288 <UART_SetConfig+0x4e4>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	f003 020f 	and.w	r2, r3, #15
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4422      	add	r2, r4
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004282:	46bd      	mov	sp, r7
 8004284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004288:	51eb851f 	.word	0x51eb851f

0800428c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800429a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800429e:	2b84      	cmp	r3, #132	; 0x84
 80042a0:	d005      	beq.n	80042ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	3303      	adds	r3, #3
 80042ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042ae:	68fb      	ldr	r3, [r7, #12]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042c0:	f000 fb5c 	bl	800497c <vTaskStartScheduler>
  
  return osOK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	bd80      	pop	{r7, pc}

080042ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042cc:	b089      	sub	sp, #36	; 0x24
 80042ce:	af04      	add	r7, sp, #16
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d020      	beq.n	800431e <osThreadCreate+0x54>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01c      	beq.n	800431e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685c      	ldr	r4, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691e      	ldr	r6, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff ffc8 	bl	800428c <makeFreeRtosPriority>
 80042fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004306:	9202      	str	r2, [sp, #8]
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	9100      	str	r1, [sp, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4632      	mov	r2, r6
 8004310:	4629      	mov	r1, r5
 8004312:	4620      	mov	r0, r4
 8004314:	f000 f8ed 	bl	80044f2 <xTaskCreateStatic>
 8004318:	4603      	mov	r3, r0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e01c      	b.n	8004358 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685c      	ldr	r4, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800432a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ffaa 	bl	800428c <makeFreeRtosPriority>
 8004338:	4602      	mov	r2, r0
 800433a:	f107 030c 	add.w	r3, r7, #12
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	4632      	mov	r2, r6
 8004346:	4629      	mov	r1, r5
 8004348:	4620      	mov	r0, r4
 800434a:	f000 f92f 	bl	80045ac <xTaskCreate>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004358:	68fb      	ldr	r3, [r7, #12]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004362 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <osDelay+0x16>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	e000      	b.n	800437a <osDelay+0x18>
 8004378:	2301      	movs	r3, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f000 faca 	bl	8004914 <vTaskDelay>
  
  return osOK;
 8004380:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f103 0208 	add.w	r2, r3, #8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f04f 32ff 	mov.w	r2, #4294967295
 80043a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f103 0208 	add.w	r2, r3, #8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f103 0208 	add.w	r2, r3, #8
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	601a      	str	r2, [r3, #0]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d103      	bne.n	800444c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	e00c      	b.n	8004466 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3308      	adds	r3, #8
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e002      	b.n	800445a <vListInsert+0x2e>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	d2f6      	bcs.n	8004454 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6892      	ldr	r2, [r2, #8]
 80044b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6852      	ldr	r2, [r2, #4]
 80044be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d103      	bne.n	80044d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	1e5a      	subs	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b08e      	sub	sp, #56	; 0x38
 80044f6:	af04      	add	r7, sp, #16
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <xTaskCreateStatic+0x46>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	61fb      	str	r3, [r7, #28]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004538:	2354      	movs	r3, #84	; 0x54
 800453a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b54      	cmp	r3, #84	; 0x54
 8004540:	d00a      	beq.n	8004558 <xTaskCreateStatic+0x66>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	61bb      	str	r3, [r7, #24]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004558:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01e      	beq.n	800459e <xTaskCreateStatic+0xac>
 8004560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004562:	2b00      	cmp	r3, #0
 8004564:	d01b      	beq.n	800459e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800456e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004578:	2300      	movs	r3, #0
 800457a:	9303      	str	r3, [sp, #12]
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	9302      	str	r3, [sp, #8]
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f850 	bl	8004636 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004598:	f000 f8d4 	bl	8004744 <prvAddNewTaskToReadyList>
 800459c:	e001      	b.n	80045a2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045a2:	697b      	ldr	r3, [r7, #20]
	}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3728      	adds	r7, #40	; 0x28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08c      	sub	sp, #48	; 0x30
 80045b0:	af04      	add	r7, sp, #16
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 ff71 	bl	80054a8 <pvPortMalloc>
 80045c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00e      	beq.n	80045ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045ce:	2054      	movs	r0, #84	; 0x54
 80045d0:	f000 ff6a 	bl	80054a8 <pvPortMalloc>
 80045d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
 80045e2:	e005      	b.n	80045f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045e4:	6978      	ldr	r0, [r7, #20]
 80045e6:	f001 f82b 	bl	8005640 <vPortFree>
 80045ea:	e001      	b.n	80045f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d017      	beq.n	8004626 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045fe:	88fa      	ldrh	r2, [r7, #6]
 8004600:	2300      	movs	r3, #0
 8004602:	9303      	str	r3, [sp, #12]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	9302      	str	r3, [sp, #8]
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f80e 	bl	8004636 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800461a:	69f8      	ldr	r0, [r7, #28]
 800461c:	f000 f892 	bl	8004744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004620:	2301      	movs	r3, #1
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	e002      	b.n	800462c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800462c:	69bb      	ldr	r3, [r7, #24]
	}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b088      	sub	sp, #32
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
 8004642:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800464e:	3b01      	subs	r3, #1
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f023 0307 	bic.w	r3, r3, #7
 800465c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <prvInitialiseNewTask+0x48>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	617b      	str	r3, [r7, #20]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01f      	beq.n	80046c4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	e012      	b.n	80046b0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4413      	add	r3, r2
 8004690:	7819      	ldrb	r1, [r3, #0]
 8004692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	3334      	adds	r3, #52	; 0x34
 800469a:	460a      	mov	r2, r1
 800469c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	2b0f      	cmp	r3, #15
 80046b4:	d9e9      	bls.n	800468a <prvInitialiseNewTask+0x54>
 80046b6:	e000      	b.n	80046ba <prvInitialiseNewTask+0x84>
			{
				break;
 80046b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c2:	e003      	b.n	80046cc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d901      	bls.n	80046d6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046d2:	2306      	movs	r3, #6
 80046d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	2200      	movs	r2, #0
 80046e6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	3304      	adds	r3, #4
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fe6c 	bl	80043ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	3318      	adds	r3, #24
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fe67 	bl	80043ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004700:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	f1c3 0207 	rsb	r2, r3, #7
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004710:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	2200      	movs	r2, #0
 8004716:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	69b8      	ldr	r0, [r7, #24]
 8004726:	f000 fcb1 	bl	800508c <pxPortInitialiseStack>
 800472a:	4602      	mov	r2, r0
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800473c:	bf00      	nop
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800474c:	f000 fdca 	bl	80052e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004750:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <prvAddNewTaskToReadyList+0xb8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	4a29      	ldr	r2, [pc, #164]	; (80047fc <prvAddNewTaskToReadyList+0xb8>)
 8004758:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800475a:	4b29      	ldr	r3, [pc, #164]	; (8004800 <prvAddNewTaskToReadyList+0xbc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004762:	4a27      	ldr	r2, [pc, #156]	; (8004800 <prvAddNewTaskToReadyList+0xbc>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004768:	4b24      	ldr	r3, [pc, #144]	; (80047fc <prvAddNewTaskToReadyList+0xb8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d110      	bne.n	8004792 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004770:	f000 fb4a 	bl	8004e08 <prvInitialiseTaskLists>
 8004774:	e00d      	b.n	8004792 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004776:	4b23      	ldr	r3, [pc, #140]	; (8004804 <prvAddNewTaskToReadyList+0xc0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <prvAddNewTaskToReadyList+0xbc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	429a      	cmp	r2, r3
 800478a:	d802      	bhi.n	8004792 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800478c:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <prvAddNewTaskToReadyList+0xbc>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <prvAddNewTaskToReadyList+0xc4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3301      	adds	r3, #1
 8004798:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <prvAddNewTaskToReadyList+0xc4>)
 800479a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	2201      	movs	r2, #1
 80047a2:	409a      	lsls	r2, r3
 80047a4:	4b19      	ldr	r3, [pc, #100]	; (800480c <prvAddNewTaskToReadyList+0xc8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	4a18      	ldr	r2, [pc, #96]	; (800480c <prvAddNewTaskToReadyList+0xc8>)
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <prvAddNewTaskToReadyList+0xcc>)
 80047bc:	441a      	add	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7ff fe0d 	bl	80043e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047ca:	f000 fdbb 	bl	8005344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <prvAddNewTaskToReadyList+0xc0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <prvAddNewTaskToReadyList+0xbc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d207      	bcs.n	80047f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <prvAddNewTaskToReadyList+0xd0>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20001178 	.word	0x20001178
 8004800:	20001078 	.word	0x20001078
 8004804:	20001184 	.word	0x20001184
 8004808:	20001194 	.word	0x20001194
 800480c:	20001180 	.word	0x20001180
 8004810:	2000107c 	.word	0x2000107c
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <vTaskDelayUntil+0x2a>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	617b      	str	r3, [r7, #20]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <vTaskDelayUntil+0x46>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	613b      	str	r3, [r7, #16]
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <vTaskDelayUntil+0xf0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <vTaskDelayUntil+0x64>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	60fb      	str	r3, [r7, #12]
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800487c:	f000 f8de 	bl	8004a3c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004880:	4b22      	ldr	r3, [pc, #136]	; (800490c <vTaskDelayUntil+0xf4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	4413      	add	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6a3a      	ldr	r2, [r7, #32]
 8004896:	429a      	cmp	r2, r3
 8004898:	d20b      	bcs.n	80048b2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d211      	bcs.n	80048c8 <vTaskDelayUntil+0xb0>
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d90d      	bls.n	80048c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
 80048b0:	e00a      	b.n	80048c8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d303      	bcc.n	80048c4 <vTaskDelayUntil+0xac>
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d901      	bls.n	80048c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80048c4:	2301      	movs	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2100      	movs	r1, #0
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fb6f 	bl	8004fc0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80048e2:	f000 f8b9 	bl	8004a58 <xTaskResumeAll>
 80048e6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d107      	bne.n	80048fe <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <vTaskDelayUntil+0xf8>)
 80048f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048fe:	bf00      	nop
 8004900:	3728      	adds	r7, #40	; 0x28
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200011a0 	.word	0x200011a0
 800490c:	2000117c 	.word	0x2000117c
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d017      	beq.n	8004956 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <vTaskDelay+0x60>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <vTaskDelay+0x30>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60bb      	str	r3, [r7, #8]
}
 8004940:	bf00      	nop
 8004942:	e7fe      	b.n	8004942 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004944:	f000 f87a 	bl	8004a3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004948:	2100      	movs	r1, #0
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fb38 	bl	8004fc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004950:	f000 f882 	bl	8004a58 <xTaskResumeAll>
 8004954:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d107      	bne.n	800496c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <vTaskDelay+0x64>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200011a0 	.word	0x200011a0
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800498a:	463a      	mov	r2, r7
 800498c:	1d39      	adds	r1, r7, #4
 800498e:	f107 0308 	add.w	r3, r7, #8
 8004992:	4618      	mov	r0, r3
 8004994:	f7fb ff32 	bl	80007fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004998:	6839      	ldr	r1, [r7, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	9202      	str	r2, [sp, #8]
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	2300      	movs	r3, #0
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2300      	movs	r3, #0
 80049a8:	460a      	mov	r2, r1
 80049aa:	491e      	ldr	r1, [pc, #120]	; (8004a24 <vTaskStartScheduler+0xa8>)
 80049ac:	481e      	ldr	r0, [pc, #120]	; (8004a28 <vTaskStartScheduler+0xac>)
 80049ae:	f7ff fda0 	bl	80044f2 <xTaskCreateStatic>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <vTaskStartScheduler+0xb0>)
 80049b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049b8:	4b1c      	ldr	r3, [pc, #112]	; (8004a2c <vTaskStartScheduler+0xb0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	e001      	b.n	80049ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d116      	bne.n	80049fe <vTaskStartScheduler+0x82>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	613b      	str	r3, [r7, #16]
}
 80049e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <vTaskStartScheduler+0xb4>)
 80049e6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <vTaskStartScheduler+0xb8>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049f2:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <vTaskStartScheduler+0xbc>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049f8:	f000 fbd2 	bl	80051a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049fc:	e00e      	b.n	8004a1c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d10a      	bne.n	8004a1c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	60fb      	str	r3, [r7, #12]
}
 8004a18:	bf00      	nop
 8004a1a:	e7fe      	b.n	8004a1a <vTaskStartScheduler+0x9e>
}
 8004a1c:	bf00      	nop
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	08005998 	.word	0x08005998
 8004a28:	08004dd9 	.word	0x08004dd9
 8004a2c:	2000119c 	.word	0x2000119c
 8004a30:	20001198 	.word	0x20001198
 8004a34:	20001184 	.word	0x20001184
 8004a38:	2000117c 	.word	0x2000117c

08004a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <vTaskSuspendAll+0x18>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a03      	ldr	r2, [pc, #12]	; (8004a54 <vTaskSuspendAll+0x18>)
 8004a48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	200011a0 	.word	0x200011a0

08004a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a66:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	603b      	str	r3, [r7, #0]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a84:	f000 fc2e 	bl	80052e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a88:	4b38      	ldr	r3, [pc, #224]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	4a37      	ldr	r2, [pc, #220]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a92:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d161      	bne.n	8004b5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a9a:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <xTaskResumeAll+0x118>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d05d      	beq.n	8004b5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aa2:	e02e      	b.n	8004b02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aa4:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <xTaskResumeAll+0x11c>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3318      	adds	r3, #24
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fcf4 	bl	800449e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fcef 	bl	800449e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <xTaskResumeAll+0x120>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <xTaskResumeAll+0x120>)
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <xTaskResumeAll+0x124>)
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7ff fc7b 	bl	80043e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <xTaskResumeAll+0x128>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d302      	bcc.n	8004b02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004afc:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <xTaskResumeAll+0x12c>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <xTaskResumeAll+0x11c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1cc      	bne.n	8004aa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b10:	f000 fa18 	bl	8004f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b14:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <xTaskResumeAll+0x130>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d010      	beq.n	8004b42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b20:	f000 f846 	bl	8004bb0 <xTaskIncrementTick>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <xTaskResumeAll+0x12c>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f1      	bne.n	8004b20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <xTaskResumeAll+0x130>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <xTaskResumeAll+0x12c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <xTaskResumeAll+0x134>)
 8004b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b5e:	f000 fbf1 	bl	8005344 <vPortExitCritical>

	return xAlreadyYielded;
 8004b62:	68bb      	ldr	r3, [r7, #8]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	200011a0 	.word	0x200011a0
 8004b70:	20001178 	.word	0x20001178
 8004b74:	20001138 	.word	0x20001138
 8004b78:	20001180 	.word	0x20001180
 8004b7c:	2000107c 	.word	0x2000107c
 8004b80:	20001078 	.word	0x20001078
 8004b84:	2000118c 	.word	0x2000118c
 8004b88:	20001188 	.word	0x20001188
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <xTaskGetTickCount+0x1c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b9c:	687b      	ldr	r3, [r7, #4]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	2000117c 	.word	0x2000117c

08004bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bba:	4b4e      	ldr	r3, [pc, #312]	; (8004cf4 <xTaskIncrementTick+0x144>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 808e 	bne.w	8004ce0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bc4:	4b4c      	ldr	r3, [pc, #304]	; (8004cf8 <xTaskIncrementTick+0x148>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bcc:	4a4a      	ldr	r2, [pc, #296]	; (8004cf8 <xTaskIncrementTick+0x148>)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d120      	bne.n	8004c1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bd8:	4b48      	ldr	r3, [pc, #288]	; (8004cfc <xTaskIncrementTick+0x14c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	603b      	str	r3, [r7, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	e7fe      	b.n	8004bf6 <xTaskIncrementTick+0x46>
 8004bf8:	4b40      	ldr	r3, [pc, #256]	; (8004cfc <xTaskIncrementTick+0x14c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	4b40      	ldr	r3, [pc, #256]	; (8004d00 <xTaskIncrementTick+0x150>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a3e      	ldr	r2, [pc, #248]	; (8004cfc <xTaskIncrementTick+0x14c>)
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4a3e      	ldr	r2, [pc, #248]	; (8004d00 <xTaskIncrementTick+0x150>)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b3d      	ldr	r3, [pc, #244]	; (8004d04 <xTaskIncrementTick+0x154>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	4a3c      	ldr	r2, [pc, #240]	; (8004d04 <xTaskIncrementTick+0x154>)
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	f000 f995 	bl	8004f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	; (8004d08 <xTaskIncrementTick+0x158>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d348      	bcc.n	8004cb6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c24:	4b35      	ldr	r3, [pc, #212]	; (8004cfc <xTaskIncrementTick+0x14c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d104      	bne.n	8004c38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2e:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <xTaskIncrementTick+0x158>)
 8004c30:	f04f 32ff 	mov.w	r2, #4294967295
 8004c34:	601a      	str	r2, [r3, #0]
					break;
 8004c36:	e03e      	b.n	8004cb6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c38:	4b30      	ldr	r3, [pc, #192]	; (8004cfc <xTaskIncrementTick+0x14c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d203      	bcs.n	8004c58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c50:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <xTaskIncrementTick+0x158>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c56:	e02e      	b.n	8004cb6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fc1e 	bl	800449e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3318      	adds	r3, #24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fc15 	bl	800449e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	2201      	movs	r2, #1
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <xTaskIncrementTick+0x15c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	4a22      	ldr	r2, [pc, #136]	; (8004d0c <xTaskIncrementTick+0x15c>)
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <xTaskIncrementTick+0x160>)
 8004c94:	441a      	add	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f7ff fba1 	bl	80043e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <xTaskIncrementTick+0x164>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d3b9      	bcc.n	8004c24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cb4:	e7b6      	b.n	8004c24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cb6:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <xTaskIncrementTick+0x164>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	4914      	ldr	r1, [pc, #80]	; (8004d10 <xTaskIncrementTick+0x160>)
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d901      	bls.n	8004cd2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <xTaskIncrementTick+0x168>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	e004      	b.n	8004cea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <xTaskIncrementTick+0x16c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <xTaskIncrementTick+0x16c>)
 8004ce8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cea:	697b      	ldr	r3, [r7, #20]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	200011a0 	.word	0x200011a0
 8004cf8:	2000117c 	.word	0x2000117c
 8004cfc:	20001130 	.word	0x20001130
 8004d00:	20001134 	.word	0x20001134
 8004d04:	20001190 	.word	0x20001190
 8004d08:	20001198 	.word	0x20001198
 8004d0c:	20001180 	.word	0x20001180
 8004d10:	2000107c 	.word	0x2000107c
 8004d14:	20001078 	.word	0x20001078
 8004d18:	2000118c 	.word	0x2000118c
 8004d1c:	20001188 	.word	0x20001188

08004d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d26:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <vTaskSwitchContext+0xa4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d2e:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <vTaskSwitchContext+0xa8>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d34:	e03f      	b.n	8004db6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <vTaskSwitchContext+0xa8>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3c:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <vTaskSwitchContext+0xac>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d4a:	7afb      	ldrb	r3, [r7, #11]
 8004d4c:	f1c3 031f 	rsb	r3, r3, #31
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	491f      	ldr	r1, [pc, #124]	; (8004dd0 <vTaskSwitchContext+0xb0>)
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	607b      	str	r3, [r7, #4]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <vTaskSwitchContext+0x5a>
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <vTaskSwitchContext+0xb0>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d104      	bne.n	8004dac <vTaskSwitchContext+0x8c>
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <vTaskSwitchContext+0xb4>)
 8004db4:	6013      	str	r3, [r2, #0]
}
 8004db6:	bf00      	nop
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	200011a0 	.word	0x200011a0
 8004dc8:	2000118c 	.word	0x2000118c
 8004dcc:	20001180 	.word	0x20001180
 8004dd0:	2000107c 	.word	0x2000107c
 8004dd4:	20001078 	.word	0x20001078

08004dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004de0:	f000 f852 	bl	8004e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <prvIdleTask+0x28>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d9f9      	bls.n	8004de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <prvIdleTask+0x2c>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dfc:	e7f0      	b.n	8004de0 <prvIdleTask+0x8>
 8004dfe:	bf00      	nop
 8004e00:	2000107c 	.word	0x2000107c
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
 8004e12:	e00c      	b.n	8004e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4a12      	ldr	r2, [pc, #72]	; (8004e68 <prvInitialiseTaskLists+0x60>)
 8004e20:	4413      	add	r3, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fab1 	bl	800438a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d9ef      	bls.n	8004e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e34:	480d      	ldr	r0, [pc, #52]	; (8004e6c <prvInitialiseTaskLists+0x64>)
 8004e36:	f7ff faa8 	bl	800438a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e3a:	480d      	ldr	r0, [pc, #52]	; (8004e70 <prvInitialiseTaskLists+0x68>)
 8004e3c:	f7ff faa5 	bl	800438a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e40:	480c      	ldr	r0, [pc, #48]	; (8004e74 <prvInitialiseTaskLists+0x6c>)
 8004e42:	f7ff faa2 	bl	800438a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e46:	480c      	ldr	r0, [pc, #48]	; (8004e78 <prvInitialiseTaskLists+0x70>)
 8004e48:	f7ff fa9f 	bl	800438a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e4c:	480b      	ldr	r0, [pc, #44]	; (8004e7c <prvInitialiseTaskLists+0x74>)
 8004e4e:	f7ff fa9c 	bl	800438a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <prvInitialiseTaskLists+0x78>)
 8004e54:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <prvInitialiseTaskLists+0x64>)
 8004e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <prvInitialiseTaskLists+0x7c>)
 8004e5a:	4a05      	ldr	r2, [pc, #20]	; (8004e70 <prvInitialiseTaskLists+0x68>)
 8004e5c:	601a      	str	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	2000107c 	.word	0x2000107c
 8004e6c:	20001108 	.word	0x20001108
 8004e70:	2000111c 	.word	0x2000111c
 8004e74:	20001138 	.word	0x20001138
 8004e78:	2000114c 	.word	0x2000114c
 8004e7c:	20001164 	.word	0x20001164
 8004e80:	20001130 	.word	0x20001130
 8004e84:	20001134 	.word	0x20001134

08004e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e8e:	e019      	b.n	8004ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e90:	f000 fa28 	bl	80052e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e94:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <prvCheckTasksWaitingTermination+0x50>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fafc 	bl	800449e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <prvCheckTasksWaitingTermination+0x54>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	4a0b      	ldr	r2, [pc, #44]	; (8004edc <prvCheckTasksWaitingTermination+0x54>)
 8004eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <prvCheckTasksWaitingTermination+0x58>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <prvCheckTasksWaitingTermination+0x58>)
 8004eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eba:	f000 fa43 	bl	8005344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f810 	bl	8004ee4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <prvCheckTasksWaitingTermination+0x58>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e1      	bne.n	8004e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	2000114c 	.word	0x2000114c
 8004edc:	20001178 	.word	0x20001178
 8004ee0:	20001160 	.word	0x20001160

08004ee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d108      	bne.n	8004f08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fba0 	bl	8005640 <vPortFree>
				vPortFree( pxTCB );
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb9d 	bl	8005640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f06:	e018      	b.n	8004f3a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d103      	bne.n	8004f1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fb94 	bl	8005640 <vPortFree>
	}
 8004f18:	e00f      	b.n	8004f3a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d00a      	beq.n	8004f3a <prvDeleteTCB+0x56>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60fb      	str	r3, [r7, #12]
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <prvDeleteTCB+0x54>
	}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <prvResetNextTaskUnblockTime+0x38>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <prvResetNextTaskUnblockTime+0x3c>)
 8004f56:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f5c:	e008      	b.n	8004f70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <prvResetNextTaskUnblockTime+0x38>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <prvResetNextTaskUnblockTime+0x3c>)
 8004f6e:	6013      	str	r3, [r2, #0]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20001130 	.word	0x20001130
 8004f80:	20001198 	.word	0x20001198

08004f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <xTaskGetSchedulerState+0x34>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f92:	2301      	movs	r3, #1
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	e008      	b.n	8004faa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f98:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <xTaskGetSchedulerState+0x38>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	e001      	b.n	8004faa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004faa:	687b      	ldr	r3, [r7, #4]
	}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	20001184 	.word	0x20001184
 8004fbc:	200011a0 	.word	0x200011a0

08004fc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fca:	4b29      	ldr	r3, [pc, #164]	; (8005070 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fa61 	bl	800449e <uxListRemove>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	2201      	movs	r2, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	4a20      	ldr	r2, [pc, #128]	; (8005078 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ff8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d10a      	bne.n	8005018 <prvAddCurrentTaskToDelayedList+0x58>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3304      	adds	r3, #4
 800500e:	4619      	mov	r1, r3
 8005010:	481a      	ldr	r0, [pc, #104]	; (800507c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005012:	f7ff f9e7 	bl	80043e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005016:	e026      	b.n	8005066 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005020:	4b14      	ldr	r3, [pc, #80]	; (8005074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	429a      	cmp	r2, r3
 800502e:	d209      	bcs.n	8005044 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f7ff f9f5 	bl	800442c <vListInsert>
}
 8005042:	e010      	b.n	8005066 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3304      	adds	r3, #4
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f7ff f9eb 	bl	800442c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005056:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	d202      	bcs.n	8005066 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005060:	4a09      	ldr	r2, [pc, #36]	; (8005088 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6013      	str	r3, [r2, #0]
}
 8005066:	bf00      	nop
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	2000117c 	.word	0x2000117c
 8005074:	20001078 	.word	0x20001078
 8005078:	20001180 	.word	0x20001180
 800507c:	20001164 	.word	0x20001164
 8005080:	20001134 	.word	0x20001134
 8005084:	20001130 	.word	0x20001130
 8005088:	20001198 	.word	0x20001198

0800508c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3b04      	subs	r3, #4
 800509c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3b04      	subs	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f023 0201 	bic.w	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3b04      	subs	r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050bc:	4a0c      	ldr	r2, [pc, #48]	; (80050f0 <pxPortInitialiseStack+0x64>)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3b14      	subs	r3, #20
 80050c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b04      	subs	r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f06f 0202 	mvn.w	r2, #2
 80050da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3b20      	subs	r3, #32
 80050e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050e2:	68fb      	ldr	r3, [r7, #12]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	080050f5 	.word	0x080050f5

080050f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050fe:	4b12      	ldr	r3, [pc, #72]	; (8005148 <prvTaskExitError+0x54>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d00a      	beq.n	800511e <prvTaskExitError+0x2a>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <prvTaskExitError+0x28>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	60bb      	str	r3, [r7, #8]
}
 8005130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005132:	bf00      	nop
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0fc      	beq.n	8005134 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	2000000c 	.word	0x2000000c
 800514c:	00000000 	.word	0x00000000

08005150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <pxCurrentTCBConst2>)
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	6808      	ldr	r0, [r1, #0]
 8005156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	f380 8809 	msr	PSP, r0
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8811 	msr	BASEPRI, r0
 800516a:	4770      	bx	lr
 800516c:	f3af 8000 	nop.w

08005170 <pxCurrentTCBConst2>:
 8005170:	20001078 	.word	0x20001078
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop

08005178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005178:	4808      	ldr	r0, [pc, #32]	; (800519c <prvPortStartFirstTask+0x24>)
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	6800      	ldr	r0, [r0, #0]
 800517e:	f380 8808 	msr	MSP, r0
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f380 8814 	msr	CONTROL, r0
 800518a:	b662      	cpsie	i
 800518c:	b661      	cpsie	f
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	df00      	svc	0
 8005198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800519a:	bf00      	nop
 800519c:	e000ed08 	.word	0xe000ed08

080051a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051a6:	4b46      	ldr	r3, [pc, #280]	; (80052c0 <xPortStartScheduler+0x120>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a46      	ldr	r2, [pc, #280]	; (80052c4 <xPortStartScheduler+0x124>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d10a      	bne.n	80051c6 <xPortStartScheduler+0x26>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	613b      	str	r3, [r7, #16]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051c6:	4b3e      	ldr	r3, [pc, #248]	; (80052c0 <xPortStartScheduler+0x120>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a3f      	ldr	r2, [pc, #252]	; (80052c8 <xPortStartScheduler+0x128>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d10a      	bne.n	80051e6 <xPortStartScheduler+0x46>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	60fb      	str	r3, [r7, #12]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051e6:	4b39      	ldr	r3, [pc, #228]	; (80052cc <xPortStartScheduler+0x12c>)
 80051e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	22ff      	movs	r2, #255	; 0xff
 80051f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005208:	b2da      	uxtb	r2, r3
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <xPortStartScheduler+0x130>)
 800520c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800520e:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <xPortStartScheduler+0x134>)
 8005210:	2207      	movs	r2, #7
 8005212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005214:	e009      	b.n	800522a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005216:	4b2f      	ldr	r3, [pc, #188]	; (80052d4 <xPortStartScheduler+0x134>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3b01      	subs	r3, #1
 800521c:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <xPortStartScheduler+0x134>)
 800521e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d0ef      	beq.n	8005216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005236:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <xPortStartScheduler+0x134>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1c3 0307 	rsb	r3, r3, #7
 800523e:	2b04      	cmp	r3, #4
 8005240:	d00a      	beq.n	8005258 <xPortStartScheduler+0xb8>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	60bb      	str	r3, [r7, #8]
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005258:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <xPortStartScheduler+0x134>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <xPortStartScheduler+0x134>)
 8005260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <xPortStartScheduler+0x134>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800526a:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <xPortStartScheduler+0x134>)
 800526c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	b2da      	uxtb	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005276:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <xPortStartScheduler+0x138>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <xPortStartScheduler+0x138>)
 800527c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <xPortStartScheduler+0x138>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <xPortStartScheduler+0x138>)
 8005288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800528c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800528e:	f000 f8dd 	bl	800544c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <xPortStartScheduler+0x13c>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005298:	f000 f8fc 	bl	8005494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <xPortStartScheduler+0x140>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0f      	ldr	r2, [pc, #60]	; (80052e0 <xPortStartScheduler+0x140>)
 80052a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80052a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052a8:	f7ff ff66 	bl	8005178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052ac:	f7ff fd38 	bl	8004d20 <vTaskSwitchContext>
	prvTaskExitError();
 80052b0:	f7ff ff20 	bl	80050f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	e000ed00 	.word	0xe000ed00
 80052c4:	410fc271 	.word	0x410fc271
 80052c8:	410fc270 	.word	0x410fc270
 80052cc:	e000e400 	.word	0xe000e400
 80052d0:	200011a4 	.word	0x200011a4
 80052d4:	200011a8 	.word	0x200011a8
 80052d8:	e000ed20 	.word	0xe000ed20
 80052dc:	2000000c 	.word	0x2000000c
 80052e0:	e000ef34 	.word	0xe000ef34

080052e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
}
 80052fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052fe:	4b0f      	ldr	r3, [pc, #60]	; (800533c <vPortEnterCritical+0x58>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3301      	adds	r3, #1
 8005304:	4a0d      	ldr	r2, [pc, #52]	; (800533c <vPortEnterCritical+0x58>)
 8005306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <vPortEnterCritical+0x58>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d10f      	bne.n	8005330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <vPortEnterCritical+0x5c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <vPortEnterCritical+0x4c>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	603b      	str	r3, [r7, #0]
}
 800532c:	bf00      	nop
 800532e:	e7fe      	b.n	800532e <vPortEnterCritical+0x4a>
	}
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	2000000c 	.word	0x2000000c
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800534a:	4b12      	ldr	r3, [pc, #72]	; (8005394 <vPortExitCritical+0x50>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <vPortExitCritical+0x24>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	607b      	str	r3, [r7, #4]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <vPortExitCritical+0x50>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3b01      	subs	r3, #1
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <vPortExitCritical+0x50>)
 8005370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005372:	4b08      	ldr	r3, [pc, #32]	; (8005394 <vPortExitCritical+0x50>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <vPortExitCritical+0x42>
 800537a:	2300      	movs	r3, #0
 800537c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	2000000c 	.word	0x2000000c
	...

080053a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053a0:	f3ef 8009 	mrs	r0, PSP
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <pxCurrentTCBConst>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	f01e 0f10 	tst.w	lr, #16
 80053b0:	bf08      	it	eq
 80053b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ba:	6010      	str	r0, [r2, #0]
 80053bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053c4:	f380 8811 	msr	BASEPRI, r0
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f7ff fca6 	bl	8004d20 <vTaskSwitchContext>
 80053d4:	f04f 0000 	mov.w	r0, #0
 80053d8:	f380 8811 	msr	BASEPRI, r0
 80053dc:	bc09      	pop	{r0, r3}
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	6808      	ldr	r0, [r1, #0]
 80053e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e6:	f01e 0f10 	tst.w	lr, #16
 80053ea:	bf08      	it	eq
 80053ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053f0:	f380 8809 	msr	PSP, r0
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w

08005400 <pxCurrentTCBConst>:
 8005400:	20001078 	.word	0x20001078
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
}
 8005420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005422:	f7ff fbc5 	bl	8004bb0 <xTaskIncrementTick>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <xPortSysTickHandler+0x40>)
 800542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	2300      	movs	r3, #0
 8005436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f383 8811 	msr	BASEPRI, r3
}
 800543e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <vPortSetupTimerInterrupt+0x34>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <vPortSetupTimerInterrupt+0x38>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <vPortSetupTimerInterrupt+0x3c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <vPortSetupTimerInterrupt+0x40>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <vPortSetupTimerInterrupt+0x44>)
 800546a:	3b01      	subs	r3, #1
 800546c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <vPortSetupTimerInterrupt+0x34>)
 8005470:	2207      	movs	r2, #7
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	e000e010 	.word	0xe000e010
 8005484:	e000e018 	.word	0xe000e018
 8005488:	20000000 	.word	0x20000000
 800548c:	10624dd3 	.word	0x10624dd3
 8005490:	e000e014 	.word	0xe000e014

08005494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054a4 <vPortEnableVFP+0x10>
 8005498:	6801      	ldr	r1, [r0, #0]
 800549a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800549e:	6001      	str	r1, [r0, #0]
 80054a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054a2:	bf00      	nop
 80054a4:	e000ed88 	.word	0xe000ed88

080054a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054b4:	f7ff fac2 	bl	8004a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054b8:	4b5b      	ldr	r3, [pc, #364]	; (8005628 <pvPortMalloc+0x180>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054c0:	f000 f920 	bl	8005704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054c4:	4b59      	ldr	r3, [pc, #356]	; (800562c <pvPortMalloc+0x184>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 8093 	bne.w	80055f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01d      	beq.n	8005514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054d8:	2208      	movs	r2, #8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d014      	beq.n	8005514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f023 0307 	bic.w	r3, r3, #7
 80054f0:	3308      	adds	r3, #8
 80054f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <pvPortMalloc+0x6c>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	617b      	str	r3, [r7, #20]
}
 8005510:	bf00      	nop
 8005512:	e7fe      	b.n	8005512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d06e      	beq.n	80055f8 <pvPortMalloc+0x150>
 800551a:	4b45      	ldr	r3, [pc, #276]	; (8005630 <pvPortMalloc+0x188>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d869      	bhi.n	80055f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005524:	4b43      	ldr	r3, [pc, #268]	; (8005634 <pvPortMalloc+0x18c>)
 8005526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <pvPortMalloc+0x18c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800552e:	e004      	b.n	800553a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d903      	bls.n	800554c <pvPortMalloc+0xa4>
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f1      	bne.n	8005530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <pvPortMalloc+0x180>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	429a      	cmp	r2, r3
 8005554:	d050      	beq.n	80055f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2208      	movs	r2, #8
 800555c:	4413      	add	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	2308      	movs	r3, #8
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	429a      	cmp	r2, r3
 8005576:	d91f      	bls.n	80055b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <pvPortMalloc+0xf8>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	613b      	str	r3, [r7, #16]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055b2:	69b8      	ldr	r0, [r7, #24]
 80055b4:	f000 f908 	bl	80057c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055b8:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <pvPortMalloc+0x188>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <pvPortMalloc+0x188>)
 80055c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <pvPortMalloc+0x188>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <pvPortMalloc+0x190>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d203      	bcs.n	80055da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <pvPortMalloc+0x188>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <pvPortMalloc+0x190>)
 80055d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <pvPortMalloc+0x184>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055ee:	4b13      	ldr	r3, [pc, #76]	; (800563c <pvPortMalloc+0x194>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a11      	ldr	r2, [pc, #68]	; (800563c <pvPortMalloc+0x194>)
 80055f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055f8:	f7ff fa2e 	bl	8004a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <pvPortMalloc+0x174>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60fb      	str	r3, [r7, #12]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <pvPortMalloc+0x172>
	return pvReturn;
 800561c:	69fb      	ldr	r3, [r7, #28]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	; 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20004db4 	.word	0x20004db4
 800562c:	20004dc8 	.word	0x20004dc8
 8005630:	20004db8 	.word	0x20004db8
 8005634:	20004dac 	.word	0x20004dac
 8005638:	20004dbc 	.word	0x20004dbc
 800563c:	20004dc0 	.word	0x20004dc0

08005640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04d      	beq.n	80056ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005652:	2308      	movs	r3, #8
 8005654:	425b      	negs	r3, r3
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <vPortFree+0xb8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <vPortFree+0x44>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60fb      	str	r3, [r7, #12]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <vPortFree+0x62>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60bb      	str	r3, [r7, #8]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <vPortFree+0xb8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01e      	beq.n	80056ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11a      	bne.n	80056ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <vPortFree+0xb8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056c8:	f7ff f9b8 	bl	8004a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <vPortFree+0xbc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4413      	add	r3, r2
 80056d6:	4a09      	ldr	r2, [pc, #36]	; (80056fc <vPortFree+0xbc>)
 80056d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056da:	6938      	ldr	r0, [r7, #16]
 80056dc:	f000 f874 	bl	80057c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <vPortFree+0xc0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	4a06      	ldr	r2, [pc, #24]	; (8005700 <vPortFree+0xc0>)
 80056e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056ea:	f7ff f9b5 	bl	8004a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20004dc8 	.word	0x20004dc8
 80056fc:	20004db8 	.word	0x20004db8
 8005700:	20004dc4 	.word	0x20004dc4

08005704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800570a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800570e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <prvHeapInit+0xac>)
 8005712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3307      	adds	r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <prvHeapInit+0xac>)
 8005734:	4413      	add	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800573c:	4a1d      	ldr	r2, [pc, #116]	; (80057b4 <prvHeapInit+0xb0>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005742:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <prvHeapInit+0xb0>)
 8005744:	2200      	movs	r2, #0
 8005746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005750:	2208      	movs	r2, #8
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <prvHeapInit+0xb4>)
 8005764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005766:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <prvHeapInit+0xb4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <prvHeapInit+0xb4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <prvHeapInit+0xb4>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <prvHeapInit+0xb8>)
 8005792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <prvHeapInit+0xbc>)
 800579a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <prvHeapInit+0xc0>)
 800579e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	200011ac 	.word	0x200011ac
 80057b4:	20004dac 	.word	0x20004dac
 80057b8:	20004db4 	.word	0x20004db4
 80057bc:	20004dbc 	.word	0x20004dbc
 80057c0:	20004db8 	.word	0x20004db8
 80057c4:	20004dc8 	.word	0x20004dc8

080057c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057d0:	4b28      	ldr	r3, [pc, #160]	; (8005874 <prvInsertBlockIntoFreeList+0xac>)
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e002      	b.n	80057dc <prvInsertBlockIntoFreeList+0x14>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d8f7      	bhi.n	80057d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d108      	bne.n	800580a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	441a      	add	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	441a      	add	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d118      	bne.n	8005850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d00d      	beq.n	8005846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	441a      	add	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e008      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e003      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d002      	beq.n	8005866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20004dac 	.word	0x20004dac
 8005878:	20004db4 	.word	0x20004db4

0800587c <memcmp>:
 800587c:	b510      	push	{r4, lr}
 800587e:	3901      	subs	r1, #1
 8005880:	4402      	add	r2, r0
 8005882:	4290      	cmp	r0, r2
 8005884:	d101      	bne.n	800588a <memcmp+0xe>
 8005886:	2000      	movs	r0, #0
 8005888:	e005      	b.n	8005896 <memcmp+0x1a>
 800588a:	7803      	ldrb	r3, [r0, #0]
 800588c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005890:	42a3      	cmp	r3, r4
 8005892:	d001      	beq.n	8005898 <memcmp+0x1c>
 8005894:	1b18      	subs	r0, r3, r4
 8005896:	bd10      	pop	{r4, pc}
 8005898:	3001      	adds	r0, #1
 800589a:	e7f2      	b.n	8005882 <memcmp+0x6>

0800589c <memset>:
 800589c:	4402      	add	r2, r0
 800589e:	4603      	mov	r3, r0
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d100      	bne.n	80058a6 <memset+0xa>
 80058a4:	4770      	bx	lr
 80058a6:	f803 1b01 	strb.w	r1, [r3], #1
 80058aa:	e7f9      	b.n	80058a0 <memset+0x4>

080058ac <__libc_init_array>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4d0d      	ldr	r5, [pc, #52]	; (80058e4 <__libc_init_array+0x38>)
 80058b0:	4c0d      	ldr	r4, [pc, #52]	; (80058e8 <__libc_init_array+0x3c>)
 80058b2:	1b64      	subs	r4, r4, r5
 80058b4:	10a4      	asrs	r4, r4, #2
 80058b6:	2600      	movs	r6, #0
 80058b8:	42a6      	cmp	r6, r4
 80058ba:	d109      	bne.n	80058d0 <__libc_init_array+0x24>
 80058bc:	4d0b      	ldr	r5, [pc, #44]	; (80058ec <__libc_init_array+0x40>)
 80058be:	4c0c      	ldr	r4, [pc, #48]	; (80058f0 <__libc_init_array+0x44>)
 80058c0:	f000 f826 	bl	8005910 <_init>
 80058c4:	1b64      	subs	r4, r4, r5
 80058c6:	10a4      	asrs	r4, r4, #2
 80058c8:	2600      	movs	r6, #0
 80058ca:	42a6      	cmp	r6, r4
 80058cc:	d105      	bne.n	80058da <__libc_init_array+0x2e>
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d4:	4798      	blx	r3
 80058d6:	3601      	adds	r6, #1
 80058d8:	e7ee      	b.n	80058b8 <__libc_init_array+0xc>
 80058da:	f855 3b04 	ldr.w	r3, [r5], #4
 80058de:	4798      	blx	r3
 80058e0:	3601      	adds	r6, #1
 80058e2:	e7f2      	b.n	80058ca <__libc_init_array+0x1e>
 80058e4:	080059c8 	.word	0x080059c8
 80058e8:	080059c8 	.word	0x080059c8
 80058ec:	080059c8 	.word	0x080059c8
 80058f0:	080059cc 	.word	0x080059cc

080058f4 <memcpy>:
 80058f4:	440a      	add	r2, r1
 80058f6:	4291      	cmp	r1, r2
 80058f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058fc:	d100      	bne.n	8005900 <memcpy+0xc>
 80058fe:	4770      	bx	lr
 8005900:	b510      	push	{r4, lr}
 8005902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590a:	4291      	cmp	r1, r2
 800590c:	d1f9      	bne.n	8005902 <memcpy+0xe>
 800590e:	bd10      	pop	{r4, pc}

08005910 <_init>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr

0800591c <_fini>:
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	bf00      	nop
 8005920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005922:	bc08      	pop	{r3}
 8005924:	469e      	mov	lr, r3
 8005926:	4770      	bx	lr
