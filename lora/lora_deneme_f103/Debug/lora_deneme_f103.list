
lora_deneme_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c1c  08004c1c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004c1c  08004c1c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c1c  08004c1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d88  20000010  08004c34  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d98  08004c34  00021d98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010eca  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c10  00000000  00000000  00030f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00033b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d92  00000000  00000000  00034cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001999a  00000000  00000000  00035a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131ce  00000000  00000000  0004f3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092fbd  00000000  00000000  000625ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004870  00000000  00000000  000f5588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f9df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b64 	.word	0x08004b64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004b64 	.word	0x08004b64

08000150 <circ_buffer_enqueue>:
 * @param 	data	: 	Array of bytes to add to the buffer
 *
 * @param 	size 	:	Size of the data array
 */
void circ_buffer_enqueue(circ_buffer_t *cb, uint8_t* data, uint8_t size)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	4613      	mov	r3, r2
 800015c:	71fb      	strb	r3, [r7, #7]
	if ((cb->end + 1) % BUFFER_SIZE == cb->start)
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 8000164:	1c59      	adds	r1, r3, #1
 8000166:	4b1e      	ldr	r3, [pc, #120]	; (80001e0 <circ_buffer_enqueue+0x90>)
 8000168:	fb83 2301 	smull	r2, r3, r3, r1
 800016c:	105a      	asrs	r2, r3, #1
 800016e:	17cb      	asrs	r3, r1, #31
 8000170:	1ad2      	subs	r2, r2, r3
 8000172:	4613      	mov	r3, r2
 8000174:	009b      	lsls	r3, r3, #2
 8000176:	4413      	add	r3, r2
 8000178:	1aca      	subs	r2, r1, r3
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 8000180:	429a      	cmp	r2, r3
 8000182:	d029      	beq.n	80001d8 <circ_buffer_enqueue+0x88>
	{
		// Buffer is full, do not add new element
		return;
	}
	memcpy(cb->buffer[cb->end], data, size * sizeof(uint8_t));
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 800018a:	461a      	mov	r2, r3
 800018c:	23f5      	movs	r3, #245	; 0xf5
 800018e:	fb02 f303 	mul.w	r3, r2, r3
 8000192:	68fa      	ldr	r2, [r7, #12]
 8000194:	4413      	add	r3, r2
 8000196:	79fa      	ldrb	r2, [r7, #7]
 8000198:	68b9      	ldr	r1, [r7, #8]
 800019a:	4618      	mov	r0, r3
 800019c:	f004 fcd4 	bl	8004b48 <memcpy>
	cb->elementSizes[cb->end] = size;
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80001a6:	461a      	mov	r2, r3
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	4413      	add	r3, r2
 80001ac:	79fa      	ldrb	r2, [r7, #7]
 80001ae:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
	cb->end = (cb->end + 1) % BUFFER_SIZE;
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80001b8:	1c5a      	adds	r2, r3, #1
 80001ba:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <circ_buffer_enqueue+0x90>)
 80001bc:	fb83 1302 	smull	r1, r3, r3, r2
 80001c0:	1059      	asrs	r1, r3, #1
 80001c2:	17d3      	asrs	r3, r2, #31
 80001c4:	1ac9      	subs	r1, r1, r3
 80001c6:	460b      	mov	r3, r1
 80001c8:	009b      	lsls	r3, r3, #2
 80001ca:	440b      	add	r3, r1
 80001cc:	1ad1      	subs	r1, r2, r3
 80001ce:	b2ca      	uxtb	r2, r1
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 80001d6:	e000      	b.n	80001da <circ_buffer_enqueue+0x8a>
		return;
 80001d8:	bf00      	nop
}
 80001da:	3710      	adds	r7, #16
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	66666667 	.word	0x66666667

080001e4 <circ_buffer_dequeue>:
 * @param 	size	:	Pointer to an integer to store the size of the returned array
 *
 * @return 	Pointer to the first element in the buffer
 */
uint8_t* circ_buffer_dequeue(circ_buffer_t *cb, uint8_t *size)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
	uint8_t *element = cb->buffer[cb->start];
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 80001f4:	461a      	mov	r2, r3
 80001f6:	23f5      	movs	r3, #245	; 0xf5
 80001f8:	fb02 f303 	mul.w	r3, r2, r3
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	60fb      	str	r3, [r7, #12]
	if (size)
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d009      	beq.n	800021c <circ_buffer_dequeue+0x38>
	{
		*size = cb->elementSizes[cb->start];
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 800020e:	461a      	mov	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4413      	add	r3, r2
 8000214:	f893 24cb 	ldrb.w	r2, [r3, #1227]	; 0x4cb
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	701a      	strb	r2, [r3, #0]
	}
	cb->start = (cb->start + 1) % BUFFER_SIZE;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <circ_buffer_dequeue+0x68>)
 8000226:	fb83 1302 	smull	r1, r3, r3, r2
 800022a:	1059      	asrs	r1, r3, #1
 800022c:	17d3      	asrs	r3, r2, #31
 800022e:	1ac9      	subs	r1, r1, r3
 8000230:	460b      	mov	r3, r1
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	440b      	add	r3, r1
 8000236:	1ad1      	subs	r1, r2, r3
 8000238:	b2ca      	uxtb	r2, r1
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
	return element;
 8000240:	68fb      	ldr	r3, [r7, #12]
}
 8000242:	4618      	mov	r0, r3
 8000244:	3714      	adds	r7, #20
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	66666667 	.word	0x66666667

08000250 <circ_buffer_getNextSize>:
 * @param 	cb		: 	Pointer to the circular buffer
 *
 * @return 	Number	: 	of arrays in the buffer
 */
uint8_t circ_buffer_getNextSize(circ_buffer_t *cb)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	if (cb->start == cb->end)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f893 24c9 	ldrb.w	r2, [r3, #1225]	; 0x4c9
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 8000264:	429a      	cmp	r2, r3
 8000266:	d101      	bne.n	800026c <circ_buffer_getNextSize+0x1c>
	{
		return 0;
 8000268:	2300      	movs	r3, #0
 800026a:	e007      	b.n	800027c <circ_buffer_getNextSize+0x2c>
	}
	else
	{
		return cb->elementSizes[cb->start];
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 8000272:	461a      	mov	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	f893 34cb 	ldrb.w	r3, [r3, #1227]	; 0x4cb
	}
}
 800027c:	4618      	mov	r0, r3
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
	...

08000288 <e22_lora_init>:
					void* transmissionFunc,
					void* receptionFunc,
					void* receptionCallbackFunc,
					void* configModeFunc,
					void* TransceiverModeFunc)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
 8000294:	603b      	str	r3, [r7, #0]
	hE22.huart 						= huart;
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <e22_lora_init+0x64>)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	6013      	str	r3, [r2, #0]
	hE22.loraTransmit 				= transmissionFunc;
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	4a13      	ldr	r2, [pc, #76]	; (80002ec <e22_lora_init+0x64>)
 80002a0:	6053      	str	r3, [r2, #4]
	hE22.loraStartReception 		= receptionFunc;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a11      	ldr	r2, [pc, #68]	; (80002ec <e22_lora_init+0x64>)
 80002a6:	6093      	str	r3, [r2, #8]
	hE22.loraReceive		 		= receptionCallbackFunc;
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	4a10      	ldr	r2, [pc, #64]	; (80002ec <e22_lora_init+0x64>)
 80002ac:	60d3      	str	r3, [r2, #12]
	hE22.loraConfigurationMode 		= configModeFunc;
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <e22_lora_init+0x64>)
 80002b2:	6153      	str	r3, [r2, #20]
	hE22.loraTransceiverMode		= TransceiverModeFunc;
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <e22_lora_init+0x64>)
 80002b8:	6113      	str	r3, [r2, #16]

	//Assign DMA buffer pointers.
	hE22.pRxDmaBuffer = rxDmaBuffer;
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <e22_lora_init+0x64>)
 80002bc:	4a0c      	ldr	r2, [pc, #48]	; (80002f0 <e22_lora_init+0x68>)
 80002be:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	hE22.pTxDmaBuffer = txDmaBuffer;
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <e22_lora_init+0x64>)
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <e22_lora_init+0x6c>)
 80002c6:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
	//transceiver mode as default
	hE22.loraTransceiverMode();
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <e22_lora_init+0x64>)
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	4798      	blx	r3

	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <e22_lora_init+0x64>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a05      	ldr	r2, [pc, #20]	; (80002ec <e22_lora_init+0x64>)
 80002d6:	6810      	ldr	r0, [r2, #0]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <e22_lora_init+0x64>)
 80002da:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	; 0xab0
 80002de:	22f0      	movs	r2, #240	; 0xf0
 80002e0:	4798      	blx	r3
}
 80002e2:	bf00      	nop
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	2000002c 	.word	0x2000002c
 80002f0:	20000ae4 	.word	0x20000ae4
 80002f4:	20000bd4 	.word	0x20000bd4

080002f8 <e22_lora_transnit>:
 *
 * @param channel	:	RF channel to send data over
 *
 */
void e22_lora_transnit(uint8_t *pData, uint16_t size, uint16_t address, uint8_t channel)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	4608      	mov	r0, r1
 8000302:	4611      	mov	r1, r2
 8000304:	461a      	mov	r2, r3
 8000306:	4603      	mov	r3, r0
 8000308:	817b      	strh	r3, [r7, #10]
 800030a:	460b      	mov	r3, r1
 800030c:	813b      	strh	r3, [r7, #8]
 800030e:	4613      	mov	r3, r2
 8000310:	71fb      	strb	r3, [r7, #7]
	const uint8_t overheadSize = 3;
 8000312:	2303      	movs	r3, #3
 8000314:	75fb      	strb	r3, [r7, #23]

	memset(&hE22.packet, 0, sizeof(e22_packet_t));
 8000316:	22f4      	movs	r2, #244	; 0xf4
 8000318:	2100      	movs	r1, #0
 800031a:	4815      	ldr	r0, [pc, #84]	; (8000370 <e22_lora_transnit+0x78>)
 800031c:	f004 fbe8 	bl	8004af0 <memset>
	//Address 2 bytes swap
	hE22.packet.address = (address >> 8) | (address << 8);
 8000320:	893b      	ldrh	r3, [r7, #8]
 8000322:	0a1b      	lsrs	r3, r3, #8
 8000324:	b29b      	uxth	r3, r3
 8000326:	b21a      	sxth	r2, r3
 8000328:	893b      	ldrh	r3, [r7, #8]
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	b21b      	sxth	r3, r3
 800032e:	4313      	orrs	r3, r2
 8000330:	b21b      	sxth	r3, r3
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <e22_lora_transnit+0x7c>)
 8000336:	831a      	strh	r2, [r3, #24]

	hE22.packet.chanel = channel;
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <e22_lora_transnit+0x7c>)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	7693      	strb	r3, [r2, #26]

	hE22.txPortReady = true;
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <e22_lora_transnit+0x7c>)
 8000340:	2201      	movs	r2, #1
 8000342:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

	memcpy(&hE22.packet.dataBuffer, pData, size);
 8000346:	897b      	ldrh	r3, [r7, #10]
 8000348:	461a      	mov	r2, r3
 800034a:	68f9      	ldr	r1, [r7, #12]
 800034c:	480a      	ldr	r0, [pc, #40]	; (8000378 <e22_lora_transnit+0x80>)
 800034e:	f004 fbfb 	bl	8004b48 <memcpy>

	circ_buffer_enqueue(&hE22.txBuffer, (uint8_t*)&hE22.packet, size + overheadSize);
 8000352:	897b      	ldrh	r3, [r7, #10]
 8000354:	b2da      	uxtb	r2, r3
 8000356:	7dfb      	ldrb	r3, [r7, #23]
 8000358:	4413      	add	r3, r2
 800035a:	b2db      	uxtb	r3, r3
 800035c:	461a      	mov	r2, r3
 800035e:	4904      	ldr	r1, [pc, #16]	; (8000370 <e22_lora_transnit+0x78>)
 8000360:	4806      	ldr	r0, [pc, #24]	; (800037c <e22_lora_transnit+0x84>)
 8000362:	f7ff fef5 	bl	8000150 <circ_buffer_enqueue>
}
 8000366:	bf00      	nop
 8000368:	3718      	adds	r7, #24
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000044 	.word	0x20000044
 8000374:	2000002c 	.word	0x2000002c
 8000378:	20000047 	.word	0x20000047
 800037c:	2000013a 	.word	0x2000013a

08000380 <e22_lora_manager>:
 * 			This function manages the E22 LoRa module by checking for packets in the TX circular buffer, dequeuing them, and transmitting
 * 			them via the E22 module.
 *
 */
void e22_lora_manager(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	uint8_t packetSize = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	70fb      	strb	r3, [r7, #3]
	uint8_t* pPacket = NULL;
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
	//check for packet in TX circular buffer
	if(circ_buffer_getNextSize(&hE22.txBuffer))
 800038e:	481e      	ldr	r0, [pc, #120]	; (8000408 <e22_lora_manager+0x88>)
 8000390:	f7ff ff5e 	bl	8000250 <circ_buffer_getNextSize>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d020      	beq.n	80003dc <e22_lora_manager+0x5c>
	{
//		uint8_t packetSize = 0;
//		uint8_t* pPacket = NULL;
		if(hE22.txPortReady)
 800039a:	4b1c      	ldr	r3, [pc, #112]	; (800040c <e22_lora_manager+0x8c>)
 800039c:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d01b      	beq.n	80003dc <e22_lora_manager+0x5c>
		{
			hE22.txPortReady = false;
 80003a4:	4b19      	ldr	r3, [pc, #100]	; (800040c <e22_lora_manager+0x8c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			// Dequeue packet from circular buffer
			pPacket = circ_buffer_dequeue(&hE22.txBuffer, &packetSize);
 80003ac:	1cfb      	adds	r3, r7, #3
 80003ae:	4619      	mov	r1, r3
 80003b0:	4815      	ldr	r0, [pc, #84]	; (8000408 <e22_lora_manager+0x88>)
 80003b2:	f7ff ff17 	bl	80001e4 <circ_buffer_dequeue>
 80003b6:	6078      	str	r0, [r7, #4]
			// Copy packet to DMA buffer
			memcpy(hE22.pTxDmaBuffer ,pPacket, packetSize);
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <e22_lora_manager+0x8c>)
 80003ba:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 80003be:	78fa      	ldrb	r2, [r7, #3]
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f004 fbc0 	bl	8004b48 <memcpy>
			// Transmit packet via the E22 module
			hE22.loraTransmit(hE22.huart, hE22.pTxDmaBuffer, packetSize);
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <e22_lora_manager+0x8c>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4a0f      	ldr	r2, [pc, #60]	; (800040c <e22_lora_manager+0x8c>)
 80003ce:	6810      	ldr	r0, [r2, #0]
 80003d0:	4a0e      	ldr	r2, [pc, #56]	; (800040c <e22_lora_manager+0x8c>)
 80003d2:	f8d2 1ab4 	ldr.w	r1, [r2, #2740]	; 0xab4
 80003d6:	78fa      	ldrb	r2, [r7, #3]
 80003d8:	b292      	uxth	r2, r2
 80003da:	4798      	blx	r3
		}
	}
	//check for packet in RX circular buffer
	if(circ_buffer_getNextSize(&hE22.rxBuffer))
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <e22_lora_manager+0x90>)
 80003de:	f7ff ff37 	bl	8000250 <circ_buffer_getNextSize>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d00b      	beq.n	8000400 <e22_lora_manager+0x80>
	{
		pPacket = circ_buffer_dequeue(&hE22.rxBuffer, &packetSize);
 80003e8:	1cfb      	adds	r3, r7, #3
 80003ea:	4619      	mov	r1, r3
 80003ec:	4808      	ldr	r0, [pc, #32]	; (8000410 <e22_lora_manager+0x90>)
 80003ee:	f7ff fef9 	bl	80001e4 <circ_buffer_dequeue>
 80003f2:	6078      	str	r0, [r7, #4]
		hE22.loraReceive(pPacket, packetSize);
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <e22_lora_manager+0x8c>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	78fa      	ldrb	r2, [r7, #3]
 80003fa:	4611      	mov	r1, r2
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	4798      	blx	r3
	}
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	2000013a 	.word	0x2000013a
 800040c:	2000002c 	.word	0x2000002c
 8000410:	2000060a 	.word	0x2000060a

08000414 <e22_lora_make_ready>:
/**
 * @brief 	Make transmission line status ready at TX complete callback
 *
 */
void e22_lora_make_ready(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	hE22.txPortReady = true;
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <e22_lora_make_ready+0x14>)
 800041a:	2201      	movs	r2, #1
 800041c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	2000002c 	.word	0x2000002c

0800042c <e22_lora_reception_complete>:
/**
 * @brief 	this function should be called at the UART RX complete callback.
 *
 */
void e22_lora_reception_complete(uint8_t size)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
	circ_buffer_enqueue(&hE22.rxBuffer, (uint8_t*)hE22.pRxDmaBuffer, size);
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <e22_lora_reception_complete+0x34>)
 8000438:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800043c:	79fa      	ldrb	r2, [r7, #7]
 800043e:	4619      	mov	r1, r3
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <e22_lora_reception_complete+0x38>)
 8000442:	f7ff fe85 	bl	8000150 <circ_buffer_enqueue>
	//Activate UART reception again
	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <e22_lora_reception_complete+0x34>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4a05      	ldr	r2, [pc, #20]	; (8000460 <e22_lora_reception_complete+0x34>)
 800044c:	6810      	ldr	r0, [r2, #0]
 800044e:	4a04      	ldr	r2, [pc, #16]	; (8000460 <e22_lora_reception_complete+0x34>)
 8000450:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	; 0xab0
 8000454:	22f0      	movs	r2, #240	; 0xf0
 8000456:	4798      	blx	r3
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000002c 	.word	0x2000002c
 8000464:	2000060a 	.word	0x2000060a

08000468 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	4a06      	ldr	r2, [pc, #24]	; (8000490 <vApplicationGetIdleTaskMemory+0x28>)
 8000478:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <vApplicationGetIdleTaskMemory+0x2c>)
 800047e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	20000cc4 	.word	0x20000cc4
 8000494:	20000d18 	.word	0x20000d18

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b5b0      	push	{r4, r5, r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049e:	f000 fbff 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a2:	f000 f865 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a6:	f000 f945 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 80004aa:	f000 f91d 	bl	80006e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004ae:	f000 f8f1 	bl	8000694 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80004b2:	f000 f8a3 	bl	80005fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // E22 LoRa modülünü yapılandırıyoruz.
    e22_lora_init(&huart1,
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <main+0xa0>)
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	4b20      	ldr	r3, [pc, #128]	; (800053c <main+0xa4>)
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	4b20      	ldr	r3, [pc, #128]	; (8000540 <main+0xa8>)
 80004c0:	4a20      	ldr	r2, [pc, #128]	; (8000544 <main+0xac>)
 80004c2:	4921      	ldr	r1, [pc, #132]	; (8000548 <main+0xb0>)
 80004c4:	4821      	ldr	r0, [pc, #132]	; (800054c <main+0xb4>)
 80004c6:	f7ff fedf 	bl	8000288 <e22_lora_init>
  				main_e22_configurationMode,
  				main_e22_transceiverMode);


    // FREERTOS Task oluşturmayı başlatıyoruz.
    xTaskCreate(led_toggle_task, "Toggle LED", 128, NULL, 1, NULL);
 80004ca:	2300      	movs	r3, #0
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2300      	movs	r3, #0
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	491e      	ldr	r1, [pc, #120]	; (8000550 <main+0xb8>)
 80004d8:	481e      	ldr	r0, [pc, #120]	; (8000554 <main+0xbc>)
 80004da:	f003 f9f1 	bl	80038c0 <xTaskCreate>

    xTaskCreate(e22_handle_task, "E22 LoRa Handler", 128 * 4, NULL, 1, NULL);
 80004de:	2300      	movs	r3, #0
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	2301      	movs	r3, #1
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2300      	movs	r3, #0
 80004e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ec:	491a      	ldr	r1, [pc, #104]	; (8000558 <main+0xc0>)
 80004ee:	481b      	ldr	r0, [pc, #108]	; (800055c <main+0xc4>)
 80004f0:	f003 f9e6 	bl	80038c0 <xTaskCreate>

    xTaskCreate(e22_transmission_task, "E22 LoRa Tx Task", 128 * 4, NULL, 1, NULL);
 80004f4:	2300      	movs	r3, #0
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	2301      	movs	r3, #1
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2300      	movs	r3, #0
 80004fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000502:	4917      	ldr	r1, [pc, #92]	; (8000560 <main+0xc8>)
 8000504:	4817      	ldr	r0, [pc, #92]	; (8000564 <main+0xcc>)
 8000506:	f003 f9db 	bl	80038c0 <xTaskCreate>

    vTaskStartScheduler();
 800050a:	f003 fbc1 	bl	8003c90 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <main+0xd0>)
 8000510:	1d3c      	adds	r4, r7, #4
 8000512:	461d      	mov	r5, r3
 8000514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000518:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800051c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f003 f85f 	bl	80035e8 <osThreadCreate>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <main+0xd4>)
 800052e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000530:	f003 f853 	bl	80035da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x9c>
 8000536:	bf00      	nop
 8000538:	080008fd 	.word	0x080008fd
 800053c:	08000909 	.word	0x08000909
 8000540:	08000949 	.word	0x08000949
 8000544:	08002705 	.word	0x08002705
 8000548:	08002625 	.word	0x08002625
 800054c:	20000f60 	.word	0x20000f60
 8000550:	08004b7c 	.word	0x08004b7c
 8000554:	08000855 	.word	0x08000855
 8000558:	08004b88 	.word	0x08004b88
 800055c:	0800087d 	.word	0x0800087d
 8000560:	08004b9c 	.word	0x08004b9c
 8000564:	080008a5 	.word	0x080008a5
 8000568:	08004bbc 	.word	0x08004bbc
 800056c:	20001030 	.word	0x20001030

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b090      	sub	sp, #64	; 0x40
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	2228      	movs	r2, #40	; 0x28
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fab6 	bl	8004af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000596:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 f95b 	bl	8001874 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005c4:	f000 f9f4 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fbc8 	bl	8001d78 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ee:	f000 f9df 	bl	80009b0 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3740      	adds	r7, #64	; 0x40
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_TIM2_Init+0x94>)
 800061a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800061e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_TIM2_Init+0x94>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_TIM2_Init+0x94>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_TIM2_Init+0x94>)
 800062e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_TIM2_Init+0x94>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_TIM2_Init+0x94>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000640:	4813      	ldr	r0, [pc, #76]	; (8000690 <MX_TIM2_Init+0x94>)
 8000642:	f001 fd27 	bl	8002094 <HAL_TIM_Base_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800064c:	f000 f9b0 	bl	80009b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	4619      	mov	r1, r3
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_TIM2_Init+0x94>)
 800065e:	f001 fd68 	bl	8002132 <HAL_TIM_ConfigClockSource>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 f9a2 	bl	80009b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_TIM2_Init+0x94>)
 800067a:	f001 ff25 	bl	80024c8 <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000684:	f000 f994 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000f18 	.word	0x20000f18

08000694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_USART1_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006cc:	f001 ff5a 	bl	8002584 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f96b 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000f60 	.word	0x20000f60
 80006e4:	40013800 	.word	0x40013800

080006e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_DMA_Init+0x48>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <MX_DMA_Init+0x48>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_DMA_Init+0x48>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2105      	movs	r1, #5
 800070a:	200e      	movs	r0, #14
 800070c:	f000 fc01 	bl	8000f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000710:	200e      	movs	r0, #14
 8000712:	f000 fc1a 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2105      	movs	r1, #5
 800071a:	200f      	movs	r0, #15
 800071c:	f000 fbf9 	bl	8000f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000720:	200f      	movs	r0, #15
 8000722:	f000 fc12 	bl	8000f4a <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_GPIO_Init+0x10c>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a3c      	ldr	r2, [pc, #240]	; (8000840 <MX_GPIO_Init+0x10c>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0310 	and.w	r3, r3, #16
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000760:	4b37      	ldr	r3, [pc, #220]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a36      	ldr	r2, [pc, #216]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b34      	ldr	r3, [pc, #208]	; (8000840 <MX_GPIO_Init+0x10c>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0320 	and.w	r3, r3, #32
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b31      	ldr	r3, [pc, #196]	; (8000840 <MX_GPIO_Init+0x10c>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a30      	ldr	r2, [pc, #192]	; (8000840 <MX_GPIO_Init+0x10c>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a2a      	ldr	r2, [pc, #168]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MX_GPIO_Init+0x10c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0308 	and.w	r3, r3, #8
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2120      	movs	r1, #32
 80007ac:	4825      	ldr	r0, [pc, #148]	; (8000844 <MX_GPIO_Init+0x110>)
 80007ae:	f001 f80d 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2106      	movs	r1, #6
 80007b6:	4824      	ldr	r0, [pc, #144]	; (8000848 <MX_GPIO_Init+0x114>)
 80007b8:	f001 f808 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_GPIO_Init+0x118>)
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	481f      	ldr	r0, [pc, #124]	; (8000850 <MX_GPIO_Init+0x11c>)
 80007d2:	f000 fe77 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d6:	230c      	movs	r3, #12
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	4816      	ldr	r0, [pc, #88]	; (8000844 <MX_GPIO_Init+0x110>)
 80007ea:	f000 fe6b 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 80007ee:	2320      	movs	r3, #32
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	480f      	ldr	r0, [pc, #60]	; (8000844 <MX_GPIO_Init+0x110>)
 8000806:	f000 fe5d 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 800080a:	2306      	movs	r3, #6
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2302      	movs	r3, #2
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	4619      	mov	r1, r3
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <MX_GPIO_Init+0x114>)
 8000822:	f000 fe4f 	bl	80014c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2105      	movs	r1, #5
 800082a:	2028      	movs	r0, #40	; 0x28
 800082c:	f000 fb71 	bl	8000f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000830:	2028      	movs	r0, #40	; 0x28
 8000832:	f000 fb8a 	bl	8000f4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000
 8000844:	40010800 	.word	0x40010800
 8000848:	40010c00 	.word	0x40010c00
 800084c:	10110000 	.word	0x10110000
 8000850:	40011000 	.word	0x40011000

08000854 <led_toggle_task>:

/* USER CODE BEGIN 4 */
static void led_toggle_task(void *parameter)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  static TickType_t xLastWakeTime; //görevin periyodik olarak çalışmasını sağlamak için
  const TickType_t xPeriod = pdMS_TO_TICKS(1000);  // 1 saniye delay
 800085c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000860:	60fb      	str	r3, [r7, #12]
  //pdMS_TO_TICKS makrosu, milisaniye cinsinden verilen değeri FreeRTOS'un tick sayısına dönüştürür.​
  xLastWakeTime = xTaskGetTickCount();
 8000862:	f003 fb1f 	bl	8003ea4 <xTaskGetTickCount>
 8000866:	4603      	mov	r3, r0
 8000868:	4a03      	ldr	r2, [pc, #12]	; (8000878 <led_toggle_task+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
  //Geçerli tick sayısı alınarak xLastWakeTime değişkenine atanıyor. Bu, görevin doğru periyotlarla
  //çalışmasını sağlamak için başlangıç referansı olarak kullanılır.

  for(;;) // sonsuz döngü
  {
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800086c:	68f9      	ldr	r1, [r7, #12]
 800086e:	4802      	ldr	r0, [pc, #8]	; (8000878 <led_toggle_task+0x24>)
 8000870:	f003 f95c 	bl	8003b2c <vTaskDelayUntil>
 8000874:	e7fa      	b.n	800086c <led_toggle_task+0x18>
 8000876:	bf00      	nop
 8000878:	20001034 	.word	0x20001034

0800087c <e22_handle_task>:
  }
}

// E22 LoRa modülünün çalışma döngüsünü kontrol etmek için yapılmış bir background task’tır.
static void e22_handle_task(void *parameter)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  static TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(100);
 8000884:	2364      	movs	r3, #100	; 0x64
 8000886:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000888:	f003 fb0c 	bl	8003ea4 <xTaskGetTickCount>
 800088c:	4603      	mov	r3, r0
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <e22_handle_task+0x24>)
 8000890:	6013      	str	r3, [r2, #0]

  for(;;)
  {
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000892:	68f9      	ldr	r1, [r7, #12]
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <e22_handle_task+0x24>)
 8000896:	f003 f949 	bl	8003b2c <vTaskDelayUntil>
    // E22 LoRa modülünün yönetim fonksiyonu çağrılır.
    // Bu fonksiyon, modülün durumunu kontrol eder ve gerekli işlemleri yapar.
    e22_lora_manager();
 800089a:	f7ff fd71 	bl	8000380 <e22_lora_manager>
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800089e:	e7f8      	b.n	8000892 <e22_handle_task+0x16>
 80008a0:	20001038 	.word	0x20001038

080008a4 <e22_transmission_task>:

  }
}

static void e22_transmission_task(void *parameter)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  static TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(1000);
 80008ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b0:	617b      	str	r3, [r7, #20]
  xLastWakeTime = xTaskGetTickCount();
 80008b2:	f003 faf7 	bl	8003ea4 <xTaskGetTickCount>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <e22_transmission_task+0x50>)
 80008ba:	6013      	str	r3, [r2, #0]

  const uint8_t packetSize = 4;  //  Gönderilecek paketin boyutu
 80008bc:	2304      	movs	r3, #4
 80008be:	74fb      	strb	r3, [r7, #19]
  const uint8_t receiverAddress = 0x09; // Alıcının adresi
 80008c0:	2309      	movs	r3, #9
 80008c2:	74bb      	strb	r3, [r7, #18]
  const uint8_t ComChannel = 0x06; //  İletişim kanalı
 80008c4:	2306      	movs	r3, #6
 80008c6:	747b      	strb	r3, [r7, #17]
  uint8_t packet[5] = "pong";  // Gönderilecek veri paketi
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <e22_transmission_task+0x54>)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d2:	6018      	str	r0, [r3, #0]
 80008d4:	3304      	adds	r3, #4
 80008d6:	7019      	strb	r1, [r3, #0]

  for(;;)
  {
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80008d8:	6979      	ldr	r1, [r7, #20]
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <e22_transmission_task+0x50>)
 80008dc:	f003 f926 	bl	8003b2c <vTaskDelayUntil>
    e22_lora_transnit(packet, packetSize, receiverAddress, ComChannel);
 80008e0:	7cfb      	ldrb	r3, [r7, #19]
 80008e2:	b299      	uxth	r1, r3
 80008e4:	7cbb      	ldrb	r3, [r7, #18]
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	7c7b      	ldrb	r3, [r7, #17]
 80008ea:	f107 000c 	add.w	r0, r7, #12
 80008ee:	f7ff fd03 	bl	80002f8 <e22_lora_transnit>
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80008f2:	e7f1      	b.n	80008d8 <e22_transmission_task+0x34>
 80008f4:	2000103c 	.word	0x2000103c
 80008f8:	08004bd8 	.word	0x08004bd8

080008fc <main_e22_transceiverMode>:
/**
 * @brief 	LoRa module transceiver mode selection.  when this mode is active, the module configuration can't be modified.
 *
 */
static void main_e22_transceiverMode(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	// F103RB'de M0 ve M1 pinleri kullanılmıyor
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <main_e22_configurationMode>:
/**
 * @brief 	LoRa module config mode selection. when this mode is active, wireless communication is inactive.
 *
 */
static void main_e22_configurationMode(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	// F103RB'de M0 ve M1 pinleri kullanılmıyor
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <HAL_UART_TxCpltCallback>:
 *
 * @param 	huart	:	Pointer to the UART handler
 */
// UART ile bir veri gönderme işlemi tamamlandığında otomatik olarak çağrılır.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	//Change the TX line state to ready
	e22_lora_make_ready();
 800091c:	f7ff fd7a 	bl	8000414 <e22_lora_make_ready>
	// Bu fonksiyon, E22 modülünü yeni bir işleme (örneğin başka bir paket gönderimi)
	// hazır duruma getirmek için çağrılır.
	// Gönderim tamamlandıktan sonra sistemin yeni işlem yapabilmesi
	// için tetikleme yapılmış olur.
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <HAL_UARTEx_RxEventCallback>:
 * @param 	Size	:	Packet size received over UART
 */
// UART üzerinden veri alımı tamamlandığında otomatik olarak
// çağrılan bir HAL fonksiyonudur (DMA veya kesmeyle çalıştığında kullanılır).
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	807b      	strh	r3, [r7, #2]
	e22_lora_reception_complete(Size);
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd77 	bl	800042c <e22_lora_reception_complete>
	// Bu fonksiyon, alınan verinin işlenmesini başlatır.
	// Alınan Size kadar byte’lık veriyi ele alacak şekilde E22 modülünün
	// işleyici fonksiyonuna yönlendirir.
	//HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <main_lora_packet_receive>:
 * @param 	size		:	size of the received data packet.
 */
// Bu fonksiyon, gelen LoRa paketlerini yorumlamak için tasarlanmıştır.
// Veriyi alır, içerik kontrolü yapar ve belirli komutlara karşı tepki verir.
static void main_lora_packet_receive(uint8_t* dataPacket, uint8_t size)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0be      	sub	sp, #248	; 0xf8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
	uint8_t loraPacket[MAX_DATA_PACKET_SIZE] = {0}; // Gelen paketi tutmak için sıfırlarla başlatılmış bir tampon (buffer) oluşturuluyor.
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	22ec      	movs	r2, #236	; 0xec
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f004 f8c5 	bl	8004af0 <memset>
	//Copy data to the main layer
	memcpy(&loraPacket, dataPacket, size);
 8000966:	78fa      	ldrb	r2, [r7, #3]
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4618      	mov	r0, r3
 8000970:	f004 f8ea 	bl	8004b48 <memcpy>
	//Gelen veri (dataPacket) size kadar loraPacket tamponuna kopyalanıyor.
	// TODO: implement main layer packet handling

	if(0 == memcmp(loraPacket, "ping", size))
 8000974:	78fa      	ldrb	r2, [r7, #3]
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	4907      	ldr	r1, [pc, #28]	; (8000998 <main_lora_packet_receive+0x50>)
 800097c:	4618      	mov	r0, r3
 800097e:	f004 f8a7 	bl	8004ad0 <memcmp>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <main_lora_packet_receive+0x48>
	{
		// Kopyalanan veri ile "ping" kelimesi aynı mı diye karşılaştırma yapılır.
			  // memcmp sonucu 0 ise iki veri aynıdır.
		 HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8000988:	2120      	movs	r1, #32
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <main_lora_packet_receive+0x54>)
 800098c:	f000 ff36 	bl	80017fc <HAL_GPIO_TogglePin>
		 // Eğer gelen veri "ping" ise, bir LED’in durumu değiştirilir (açıkken kapanır, kapalıysa açılır).
	}
}
 8000990:	bf00      	nop
 8000992:	37f8      	adds	r7, #248	; 0xf8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08004be0 	.word	0x08004be0
 800099c:	40010800 	.word	0x40010800

080009a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f002 fe69 	bl	8003680 <osDelay>
 80009ae:	e7fb      	b.n	80009a8 <StartDefaultTask+0x8>

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_MspInit+0x68>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_MspInit+0x68>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6193      	str	r3, [r2, #24]
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_MspInit+0x68>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_MspInit+0x68>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <HAL_MspInit+0x68>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x68>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	210f      	movs	r1, #15
 80009f6:	f06f 0001 	mvn.w	r0, #1
 80009fa:	f000 fa8a 	bl	8000f12 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_MspInit+0x6c>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_MspInit+0x6c>)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010000 	.word	0x40010000

08000a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a3c:	d10b      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_TIM_Base_MspInit+0x34>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_TIM_Base_MspInit+0x34>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_TIM_Base_MspInit+0x34>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a47      	ldr	r2, [pc, #284]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	f040 8086 	bne.w	8000b92 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a86:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <HAL_UART_MspInit+0x13c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a45      	ldr	r2, [pc, #276]	; (8000ba0 <HAL_UART_MspInit+0x13c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <HAL_UART_MspInit+0x13c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b40      	ldr	r3, [pc, #256]	; (8000ba0 <HAL_UART_MspInit+0x13c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <HAL_UART_MspInit+0x13c>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b3d      	ldr	r3, [pc, #244]	; (8000ba0 <HAL_UART_MspInit+0x13c>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4836      	ldr	r0, [pc, #216]	; (8000ba4 <HAL_UART_MspInit+0x140>)
 8000acc:	f000 fcfa 	bl	80014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	482f      	ldr	r0, [pc, #188]	; (8000ba4 <HAL_UART_MspInit+0x140>)
 8000ae6:	f000 fced 	bl	80014c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000aec:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <HAL_UART_MspInit+0x148>)
 8000aee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af0:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b1a:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000b1c:	f000 fa30 	bl	8000f80 <HAL_DMA_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000b26:	f7ff ff43 	bl	80009b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000b2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_UART_MspInit+0x144>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <HAL_UART_MspInit+0x150>)
 8000b3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b3e:	2210      	movs	r2, #16
 8000b40:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b66:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b68:	f000 fa0a 	bl	8000f80 <HAL_DMA_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000b72:	f7ff ff1d 	bl	80009b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <HAL_UART_MspInit+0x14c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	2025      	movs	r0, #37	; 0x25
 8000b88:	f000 f9c3 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b8c:	2025      	movs	r0, #37	; 0x25
 8000b8e:	f000 f9dc 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010800 	.word	0x40010800
 8000ba8:	20000fa8 	.word	0x20000fa8
 8000bac:	40020058 	.word	0x40020058
 8000bb0:	20000fec 	.word	0x20000fec
 8000bb4:	40020044 	.word	0x40020044

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 f8a1 	bl	8000d2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bea:	f003 fb51 	bl	8004290 <xTaskGetSchedulerState>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d001      	beq.n	8000bf8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bf4:	f003 fd40 	bl	8004678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <DMA1_Channel4_IRQHandler+0x10>)
 8000c02:	f000 fb2b 	bl	800125c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000fec 	.word	0x20000fec

08000c10 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <DMA1_Channel5_IRQHandler+0x10>)
 8000c16:	f000 fb21 	bl	800125c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000fa8 	.word	0x20000fa8

08000c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <USART1_IRQHandler+0x10>)
 8000c2a:	f001 fdc5 	bl	80027b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000f60 	.word	0x20000f60

08000c38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c40:	f000 fdf6 	bl	8001830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff fff8 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c5a:	490c      	ldr	r1, [pc, #48]	; (8000c8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c70:	4c09      	ldr	r4, [pc, #36]	; (8000c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f003 ff3f 	bl	8004b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c82:	f7ff fc09 	bl	8000498 <main>
  bx lr
 8000c86:	4770      	bx	lr
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c90:	08004c24 	.word	0x08004c24
  ldr r2, =_sbss
 8000c94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c98:	20001d98 	.word	0x20001d98

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x28>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x28>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f923 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fe7e 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f93b 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f903 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_IncTick+0x1c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_IncTick+0x20>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <HAL_IncTick+0x20>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20001040 	.word	0x20001040

08000d50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <HAL_GetTick+0x10>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20001040 	.word	0x20001040

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4906      	ldr	r1, [pc, #24]	; (8000dfc <__NVIC_EnableIRQ+0x34>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff2d 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff42 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff35 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e043      	b.n	800101e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <HAL_DMA_Init+0xa8>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a22      	ldr	r2, [pc, #136]	; (800102c <HAL_DMA_Init+0xac>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	009a      	lsls	r2, r3, #2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <HAL_DMA_Init+0xb0>)
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	bffdfff8 	.word	0xbffdfff8
 800102c:	cccccccd 	.word	0xcccccccd
 8001030:	40020000 	.word	0x40020000

08001034 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_DMA_Start_IT+0x20>
 8001050:	2302      	movs	r3, #2
 8001052:	e04b      	b.n	80010ec <HAL_DMA_Start_IT+0xb8>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d13a      	bne.n	80010de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2202      	movs	r2, #2
 800106c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f9eb 	bl	8001468 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 020e 	orr.w	r2, r2, #14
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e00f      	b.n	80010cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0204 	bic.w	r2, r2, #4
 80010ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 020a 	orr.w	r2, r2, #10
 80010ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0201 	orr.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e005      	b.n	80010ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010e6:	2302      	movs	r3, #2
 80010e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d008      	beq.n	800111e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2204      	movs	r2, #4
 8001110:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e020      	b.n	8001160 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 020e 	bic.w	r2, r2, #14
 800112c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0201 	bic.w	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001146:	2101      	movs	r1, #1
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
	...

0800116c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d005      	beq.n	8001190 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2204      	movs	r2, #4
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e051      	b.n	8001234 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 020e 	bic.w	r2, r2, #14
 800119e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HAL_DMA_Abort_IT+0xd4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d029      	beq.n	800120e <HAL_DMA_Abort_IT+0xa2>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a21      	ldr	r2, [pc, #132]	; (8001244 <HAL_DMA_Abort_IT+0xd8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d022      	beq.n	800120a <HAL_DMA_Abort_IT+0x9e>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <HAL_DMA_Abort_IT+0xdc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d01a      	beq.n	8001204 <HAL_DMA_Abort_IT+0x98>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1e      	ldr	r2, [pc, #120]	; (800124c <HAL_DMA_Abort_IT+0xe0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d012      	beq.n	80011fe <HAL_DMA_Abort_IT+0x92>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_DMA_Abort_IT+0xe4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00a      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x8c>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_DMA_Abort_IT+0xe8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d102      	bne.n	80011f2 <HAL_DMA_Abort_IT+0x86>
 80011ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011f0:	e00e      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 80011f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011f6:	e00b      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 80011f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fc:	e008      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	e005      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 8001204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001208:	e002      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 800120a:	2310      	movs	r3, #16
 800120c:	e000      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 800120e:	2301      	movs	r3, #1
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_DMA_Abort_IT+0xec>)
 8001212:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4798      	blx	r3
    } 
  }
  return status;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020008 	.word	0x40020008
 8001244:	4002001c 	.word	0x4002001c
 8001248:	40020030 	.word	0x40020030
 800124c:	40020044 	.word	0x40020044
 8001250:	40020058 	.word	0x40020058
 8001254:	4002006c 	.word	0x4002006c
 8001258:	40020000 	.word	0x40020000

0800125c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	2204      	movs	r2, #4
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d04f      	beq.n	8001324 <HAL_DMA_IRQHandler+0xc8>
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d04a      	beq.n	8001324 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	2b00      	cmp	r3, #0
 800129a:	d107      	bne.n	80012ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0204 	bic.w	r2, r2, #4
 80012aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a66      	ldr	r2, [pc, #408]	; (800144c <HAL_DMA_IRQHandler+0x1f0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d029      	beq.n	800130a <HAL_DMA_IRQHandler+0xae>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_DMA_IRQHandler+0x1f4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d022      	beq.n	8001306 <HAL_DMA_IRQHandler+0xaa>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a63      	ldr	r2, [pc, #396]	; (8001454 <HAL_DMA_IRQHandler+0x1f8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01a      	beq.n	8001300 <HAL_DMA_IRQHandler+0xa4>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a62      	ldr	r2, [pc, #392]	; (8001458 <HAL_DMA_IRQHandler+0x1fc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d012      	beq.n	80012fa <HAL_DMA_IRQHandler+0x9e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a60      	ldr	r2, [pc, #384]	; (800145c <HAL_DMA_IRQHandler+0x200>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00a      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x98>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a5f      	ldr	r2, [pc, #380]	; (8001460 <HAL_DMA_IRQHandler+0x204>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d102      	bne.n	80012ee <HAL_DMA_IRQHandler+0x92>
 80012e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ec:	e00e      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 80012ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012f2:	e00b      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 80012f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012f8:	e008      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 80012fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012fe:	e005      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 8001300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001304:	e002      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	e000      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 800130a:	2304      	movs	r3, #4
 800130c:	4a55      	ldr	r2, [pc, #340]	; (8001464 <HAL_DMA_IRQHandler+0x208>)
 800130e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 8094 	beq.w	8001442 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001322:	e08e      	b.n	8001442 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	2202      	movs	r2, #2
 800132a:	409a      	lsls	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d056      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x186>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d051      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10b      	bne.n	8001364 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 020a 	bic.w	r2, r2, #10
 800135a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <HAL_DMA_IRQHandler+0x1f0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d029      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x166>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a37      	ldr	r2, [pc, #220]	; (8001450 <HAL_DMA_IRQHandler+0x1f4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d022      	beq.n	80013be <HAL_DMA_IRQHandler+0x162>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a35      	ldr	r2, [pc, #212]	; (8001454 <HAL_DMA_IRQHandler+0x1f8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01a      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x15c>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a34      	ldr	r2, [pc, #208]	; (8001458 <HAL_DMA_IRQHandler+0x1fc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d012      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x156>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a32      	ldr	r2, [pc, #200]	; (800145c <HAL_DMA_IRQHandler+0x200>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00a      	beq.n	80013ac <HAL_DMA_IRQHandler+0x150>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a31      	ldr	r2, [pc, #196]	; (8001460 <HAL_DMA_IRQHandler+0x204>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d102      	bne.n	80013a6 <HAL_DMA_IRQHandler+0x14a>
 80013a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013a4:	e00e      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013aa:	e00b      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b0:	e008      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	e005      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013bc:	e002      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013be:	2320      	movs	r3, #32
 80013c0:	e000      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013c2:	2302      	movs	r3, #2
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_DMA_IRQHandler+0x208>)
 80013c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d034      	beq.n	8001442 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013e0:	e02f      	b.n	8001442 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2208      	movs	r2, #8
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d028      	beq.n	8001444 <HAL_DMA_IRQHandler+0x1e8>
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 020e 	bic.w	r2, r2, #14
 800140a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	2101      	movs	r1, #1
 8001416:	fa01 f202 	lsl.w	r2, r1, r2
 800141a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	4798      	blx	r3
    }
  }
  return;
 8001442:	bf00      	nop
 8001444:	bf00      	nop
}
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40020008 	.word	0x40020008
 8001450:	4002001c 	.word	0x4002001c
 8001454:	40020030 	.word	0x40020030
 8001458:	40020044 	.word	0x40020044
 800145c:	40020058 	.word	0x40020058
 8001460:	4002006c 	.word	0x4002006c
 8001464:	40020000 	.word	0x40020000

08001468 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b10      	cmp	r3, #16
 8001494:	d108      	bne.n	80014a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014a6:	e007      	b.n	80014b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b08b      	sub	sp, #44	; 0x2c
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d6:	e169      	b.n	80017ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d8:	2201      	movs	r2, #1
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	f040 8158 	bne.w	80017a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4a9a      	ldr	r2, [pc, #616]	; (8001764 <HAL_GPIO_Init+0x2a0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d05e      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 8001500:	4a98      	ldr	r2, [pc, #608]	; (8001764 <HAL_GPIO_Init+0x2a0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d875      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 8001506:	4a98      	ldr	r2, [pc, #608]	; (8001768 <HAL_GPIO_Init+0x2a4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d058      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 800150c:	4a96      	ldr	r2, [pc, #600]	; (8001768 <HAL_GPIO_Init+0x2a4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d86f      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 8001512:	4a96      	ldr	r2, [pc, #600]	; (800176c <HAL_GPIO_Init+0x2a8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d052      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 8001518:	4a94      	ldr	r2, [pc, #592]	; (800176c <HAL_GPIO_Init+0x2a8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d869      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 800151e:	4a94      	ldr	r2, [pc, #592]	; (8001770 <HAL_GPIO_Init+0x2ac>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d04c      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 8001524:	4a92      	ldr	r2, [pc, #584]	; (8001770 <HAL_GPIO_Init+0x2ac>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d863      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 800152a:	4a92      	ldr	r2, [pc, #584]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d046      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 8001530:	4a90      	ldr	r2, [pc, #576]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d85d      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 8001536:	2b12      	cmp	r3, #18
 8001538:	d82a      	bhi.n	8001590 <HAL_GPIO_Init+0xcc>
 800153a:	2b12      	cmp	r3, #18
 800153c:	d859      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 800153e:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <HAL_GPIO_Init+0x80>)
 8001540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001544:	080015bf 	.word	0x080015bf
 8001548:	08001599 	.word	0x08001599
 800154c:	080015ab 	.word	0x080015ab
 8001550:	080015ed 	.word	0x080015ed
 8001554:	080015f3 	.word	0x080015f3
 8001558:	080015f3 	.word	0x080015f3
 800155c:	080015f3 	.word	0x080015f3
 8001560:	080015f3 	.word	0x080015f3
 8001564:	080015f3 	.word	0x080015f3
 8001568:	080015f3 	.word	0x080015f3
 800156c:	080015f3 	.word	0x080015f3
 8001570:	080015f3 	.word	0x080015f3
 8001574:	080015f3 	.word	0x080015f3
 8001578:	080015f3 	.word	0x080015f3
 800157c:	080015f3 	.word	0x080015f3
 8001580:	080015f3 	.word	0x080015f3
 8001584:	080015f3 	.word	0x080015f3
 8001588:	080015a1 	.word	0x080015a1
 800158c:	080015b5 	.word	0x080015b5
 8001590:	4a79      	ldr	r2, [pc, #484]	; (8001778 <HAL_GPIO_Init+0x2b4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d013      	beq.n	80015be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001596:	e02c      	b.n	80015f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e029      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	3304      	adds	r3, #4
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e024      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	3308      	adds	r3, #8
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e01f      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	330c      	adds	r3, #12
 80015ba:	623b      	str	r3, [r7, #32]
          break;
 80015bc:	e01a      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015c6:	2304      	movs	r3, #4
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e013      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d4:	2308      	movs	r3, #8
 80015d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	611a      	str	r2, [r3, #16]
          break;
 80015de:	e009      	b.n	80015f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e0:	2308      	movs	r3, #8
 80015e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	615a      	str	r2, [r3, #20]
          break;
 80015ea:	e003      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
          break;
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          break;
 80015f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2bff      	cmp	r3, #255	; 0xff
 80015f8:	d801      	bhi.n	80015fe <HAL_GPIO_Init+0x13a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	e001      	b.n	8001602 <HAL_GPIO_Init+0x13e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3304      	adds	r3, #4
 8001602:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2bff      	cmp	r3, #255	; 0xff
 8001608:	d802      	bhi.n	8001610 <HAL_GPIO_Init+0x14c>
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x152>
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	3b08      	subs	r3, #8
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	210f      	movs	r1, #15
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	6a39      	ldr	r1, [r7, #32]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	431a      	orrs	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 80b1 	beq.w	80017a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001644:	4b4d      	ldr	r3, [pc, #308]	; (800177c <HAL_GPIO_Init+0x2b8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a4c      	ldr	r2, [pc, #304]	; (800177c <HAL_GPIO_Init+0x2b8>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b4a      	ldr	r3, [pc, #296]	; (800177c <HAL_GPIO_Init+0x2b8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800165c:	4a48      	ldr	r2, [pc, #288]	; (8001780 <HAL_GPIO_Init+0x2bc>)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001668:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a40      	ldr	r2, [pc, #256]	; (8001784 <HAL_GPIO_Init+0x2c0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d013      	beq.n	80016b0 <HAL_GPIO_Init+0x1ec>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3f      	ldr	r2, [pc, #252]	; (8001788 <HAL_GPIO_Init+0x2c4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00d      	beq.n	80016ac <HAL_GPIO_Init+0x1e8>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3e      	ldr	r2, [pc, #248]	; (800178c <HAL_GPIO_Init+0x2c8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_GPIO_Init+0x1e4>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <HAL_GPIO_Init+0x2cc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <HAL_GPIO_Init+0x1e0>
 80016a0:	2303      	movs	r3, #3
 80016a2:	e006      	b.n	80016b2 <HAL_GPIO_Init+0x1ee>
 80016a4:	2304      	movs	r3, #4
 80016a6:	e004      	b.n	80016b2 <HAL_GPIO_Init+0x1ee>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e002      	b.n	80016b2 <HAL_GPIO_Init+0x1ee>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_GPIO_Init+0x1ee>
 80016b0:	2300      	movs	r3, #0
 80016b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b4:	f002 0203 	and.w	r2, r2, #3
 80016b8:	0092      	lsls	r2, r2, #2
 80016ba:	4093      	lsls	r3, r2
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c2:	492f      	ldr	r1, [pc, #188]	; (8001780 <HAL_GPIO_Init+0x2bc>)
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	492c      	ldr	r1, [pc, #176]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4928      	ldr	r1, [pc, #160]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	4922      	ldr	r1, [pc, #136]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	60cb      	str	r3, [r1, #12]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	491e      	ldr	r1, [pc, #120]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800171c:	4013      	ands	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4918      	ldr	r1, [pc, #96]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	4914      	ldr	r1, [pc, #80]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d021      	beq.n	8001798 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e021      	b.n	80017a6 <HAL_GPIO_Init+0x2e2>
 8001762:	bf00      	nop
 8001764:	10320000 	.word	0x10320000
 8001768:	10310000 	.word	0x10310000
 800176c:	10220000 	.word	0x10220000
 8001770:	10210000 	.word	0x10210000
 8001774:	10120000 	.word	0x10120000
 8001778:	10110000 	.word	0x10110000
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	40010800 	.word	0x40010800
 8001788:	40010c00 	.word	0x40010c00
 800178c:	40011000 	.word	0x40011000
 8001790:	40011400 	.word	0x40011400
 8001794:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_GPIO_Init+0x304>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	43db      	mvns	r3, r3
 80017a0:	4909      	ldr	r1, [pc, #36]	; (80017c8 <HAL_GPIO_Init+0x304>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	3301      	adds	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f47f ae8e 	bne.w	80014d8 <HAL_GPIO_Init+0x14>
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
 80017d8:	4613      	mov	r3, r2
 80017da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017dc:	787b      	ldrb	r3, [r7, #1]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e8:	e003      	b.n	80017f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	041a      	lsls	r2, r3, #16
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43d9      	mvns	r1, r3
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	400b      	ands	r3, r1
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	611a      	str	r2, [r3, #16]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f806 	bl	8001860 <HAL_GPIO_EXTI_Callback>
  }
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e272      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8087 	beq.w	80019a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001894:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b04      	cmp	r3, #4
 800189e:	d00c      	beq.n	80018ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a0:	4b8f      	ldr	r3, [pc, #572]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d112      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5e>
 80018ac:	4b8c      	ldr	r3, [pc, #560]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d10b      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ba:	4b89      	ldr	r3, [pc, #548]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x12c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d168      	bne.n	80019a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e24c      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x76>
 80018dc:	4b80      	ldr	r3, [pc, #512]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a7f      	ldr	r2, [pc, #508]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e02e      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x98>
 80018f2:	4b7b      	ldr	r3, [pc, #492]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a7a      	ldr	r2, [pc, #488]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b78      	ldr	r3, [pc, #480]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a77      	ldr	r2, [pc, #476]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0xbc>
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a71      	ldr	r2, [pc, #452]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6e      	ldr	r2, [pc, #440]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 8001930:	4b6b      	ldr	r3, [pc, #428]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a6a      	ldr	r2, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a67      	ldr	r2, [pc, #412]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001946:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff f9fe 	bl	8000d50 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff f9fa 	bl	8000d50 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e200      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xe4>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff f9ea 	bl	8000d50 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f9e6 	bl	8000d50 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1ec      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x10c>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d063      	beq.n	8001a76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ae:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ba:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x18c>
 80019c6:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x176>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1c0      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4939      	ldr	r1, [pc, #228]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f99f 	bl	8000d50 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff f99b 	bl	8000d50 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1a1      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4927      	ldr	r1, [pc, #156]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff f97e 	bl	8000d50 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff f97a 	bl	8000d50 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e180      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d03a      	beq.n	8001af8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d019      	beq.n	8001abe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff f95e 	bl	8000d50 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff f95a 	bl	8000d50 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e160      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 face 	bl	8002058 <RCC_Delay>
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff f944 	bl	8000d50 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aca:	e00f      	b.n	8001aec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff f940 	bl	8000d50 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d908      	bls.n	8001aec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e146      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	42420000 	.word	0x42420000
 8001ae8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b92      	ldr	r3, [pc, #584]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e9      	bne.n	8001acc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a6 	beq.w	8001c52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10d      	bne.n	8001b32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b88      	ldr	r3, [pc, #544]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a87      	ldr	r2, [pc, #540]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x4c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x4c8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a7e      	ldr	r2, [pc, #504]	; (8001d3c <HAL_RCC_OscConfig+0x4c8>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f901 	bl	8000d50 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff f8fd 	bl	8000d50 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b64      	cmp	r3, #100	; 0x64
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e103      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x4c8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x312>
 8001b78:	4b6f      	ldr	r3, [pc, #444]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a6e      	ldr	r2, [pc, #440]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	e02d      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x334>
 8001b8e:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a69      	ldr	r2, [pc, #420]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	4b67      	ldr	r3, [pc, #412]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a66      	ldr	r2, [pc, #408]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	6213      	str	r3, [r2, #32]
 8001ba6:	e01c      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d10c      	bne.n	8001bca <HAL_RCC_OscConfig+0x356>
 8001bb0:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a60      	ldr	r2, [pc, #384]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	4b5e      	ldr	r3, [pc, #376]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a5d      	ldr	r2, [pc, #372]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	e00b      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001bca:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a5a      	ldr	r2, [pc, #360]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a57      	ldr	r2, [pc, #348]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d015      	beq.n	8001c16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7ff f8b1 	bl	8000d50 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f8ad 	bl	8000d50 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0b1      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ee      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x37e>
 8001c14:	e014      	b.n	8001c40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c16:	f7ff f89b 	bl	8000d50 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff f897 	bl	8000d50 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e09b      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ee      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d105      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a3b      	ldr	r2, [pc, #236]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8087 	beq.w	8001d6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d061      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d146      	bne.n	8001cfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <HAL_RCC_OscConfig+0x4cc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff f86b 	bl	8000d50 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff f867 	bl	8000d50 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e06d      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d108      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4921      	ldr	r1, [pc, #132]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a19      	ldr	r1, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	491b      	ldr	r1, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_OscConfig+0x4cc>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f83b 	bl	8000d50 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff f837 	bl	8000d50 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e03d      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x46a>
 8001cfc:	e035      	b.n	8001d6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f824 	bl	8000d50 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff f820 	bl	8000d50 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e026      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x498>
 8001d2a:	e01e      	b.n	8001d6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e019      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x500>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0d0      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d910      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b67      	ldr	r3, [pc, #412]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 0207 	bic.w	r2, r3, #7
 8001da2:	4965      	ldr	r1, [pc, #404]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0b8      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4a58      	ldr	r2, [pc, #352]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001df6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	494d      	ldr	r1, [pc, #308]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d040      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d115      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e07f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e073      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e06b      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e56:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f023 0203 	bic.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4936      	ldr	r1, [pc, #216]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e68:	f7fe ff72 	bl	8000d50 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f7fe ff6e 	bl	8000d50 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e053      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 020c 	and.w	r2, r3, #12
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1eb      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d210      	bcs.n	8001ec8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4922      	ldr	r1, [pc, #136]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e032      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4916      	ldr	r1, [pc, #88]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	490e      	ldr	r1, [pc, #56]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f06:	f000 f821 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	490a      	ldr	r1, [pc, #40]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001f18:	5ccb      	ldrb	r3, [r1, r3]
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1cc>)
 8001f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1d0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fed0 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40022000 	.word	0x40022000
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08004bf0 	.word	0x08004bf0
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x30>
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x36>
 8001f7a:	e027      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7e:	613b      	str	r3, [r7, #16]
      break;
 8001f80:	e027      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0c9b      	lsrs	r3, r3, #18
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d010      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	0c5b      	lsrs	r3, r3, #17
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fae:	fb03 f202 	mul.w	r2, r3, r2
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e004      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
      break;
 8001fca:	e002      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fce:	613b      	str	r3, [r7, #16]
      break;
 8001fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd2:	693b      	ldr	r3, [r7, #16]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	007a1200 	.word	0x007a1200
 8001fe8:	08004c08 	.word	0x08004c08
 8001fec:	08004c18 	.word	0x08004c18
 8001ff0:	003d0900 	.word	0x003d0900

08001ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800200c:	f7ff fff2 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4903      	ldr	r1, [pc, #12]	; (800202c <HAL_RCC_GetPCLK1Freq+0x24>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	08004c00 	.word	0x08004c00

08002030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002034:	f7ff ffde 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0adb      	lsrs	r3, r3, #11
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4903      	ldr	r1, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08004c00 	.word	0x08004c00

08002058 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <RCC_Delay+0x34>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <RCC_Delay+0x38>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0a5b      	lsrs	r3, r3, #9
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002074:	bf00      	nop
  }
  while (Delay --);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	60fa      	str	r2, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f9      	bne.n	8002074 <RCC_Delay+0x1c>
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	20000000 	.word	0x20000000
 8002090:	10624dd3 	.word	0x10624dd3

08002094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e041      	b.n	800212a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fcb6 	bl	8000a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f000 f8f4 	bl	80022c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_TIM_ConfigClockSource+0x1c>
 800214a:	2302      	movs	r3, #2
 800214c:	e0b4      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x186>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800216c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002174:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002186:	d03e      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0xd4>
 8002188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218c:	f200 8087 	bhi.w	800229e <HAL_TIM_ConfigClockSource+0x16c>
 8002190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002194:	f000 8086 	beq.w	80022a4 <HAL_TIM_ConfigClockSource+0x172>
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219c:	d87f      	bhi.n	800229e <HAL_TIM_ConfigClockSource+0x16c>
 800219e:	2b70      	cmp	r3, #112	; 0x70
 80021a0:	d01a      	beq.n	80021d8 <HAL_TIM_ConfigClockSource+0xa6>
 80021a2:	2b70      	cmp	r3, #112	; 0x70
 80021a4:	d87b      	bhi.n	800229e <HAL_TIM_ConfigClockSource+0x16c>
 80021a6:	2b60      	cmp	r3, #96	; 0x60
 80021a8:	d050      	beq.n	800224c <HAL_TIM_ConfigClockSource+0x11a>
 80021aa:	2b60      	cmp	r3, #96	; 0x60
 80021ac:	d877      	bhi.n	800229e <HAL_TIM_ConfigClockSource+0x16c>
 80021ae:	2b50      	cmp	r3, #80	; 0x50
 80021b0:	d03c      	beq.n	800222c <HAL_TIM_ConfigClockSource+0xfa>
 80021b2:	2b50      	cmp	r3, #80	; 0x50
 80021b4:	d873      	bhi.n	800229e <HAL_TIM_ConfigClockSource+0x16c>
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	d058      	beq.n	800226c <HAL_TIM_ConfigClockSource+0x13a>
 80021ba:	2b40      	cmp	r3, #64	; 0x40
 80021bc:	d86f      	bhi.n	800229e <HAL_TIM_ConfigClockSource+0x16c>
 80021be:	2b30      	cmp	r3, #48	; 0x30
 80021c0:	d064      	beq.n	800228c <HAL_TIM_ConfigClockSource+0x15a>
 80021c2:	2b30      	cmp	r3, #48	; 0x30
 80021c4:	d86b      	bhi.n	800229e <HAL_TIM_ConfigClockSource+0x16c>
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d060      	beq.n	800228c <HAL_TIM_ConfigClockSource+0x15a>
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d867      	bhi.n	800229e <HAL_TIM_ConfigClockSource+0x16c>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d05c      	beq.n	800228c <HAL_TIM_ConfigClockSource+0x15a>
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d05a      	beq.n	800228c <HAL_TIM_ConfigClockSource+0x15a>
 80021d6:	e062      	b.n	800229e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021e8:	f000 f94f 	bl	800248a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	609a      	str	r2, [r3, #8]
      break;
 8002204:	e04f      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002216:	f000 f938 	bl	800248a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002228:	609a      	str	r2, [r3, #8]
      break;
 800222a:	e03c      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002238:	461a      	mov	r2, r3
 800223a:	f000 f8af 	bl	800239c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2150      	movs	r1, #80	; 0x50
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f906 	bl	8002456 <TIM_ITRx_SetConfig>
      break;
 800224a:	e02c      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002258:	461a      	mov	r2, r3
 800225a:	f000 f8cd 	bl	80023f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2160      	movs	r1, #96	; 0x60
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f8f6 	bl	8002456 <TIM_ITRx_SetConfig>
      break;
 800226a:	e01c      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002278:	461a      	mov	r2, r3
 800227a:	f000 f88f 	bl	800239c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2140      	movs	r1, #64	; 0x40
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f8e6 	bl	8002456 <TIM_ITRx_SetConfig>
      break;
 800228a:	e00c      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 f8dd 	bl	8002456 <TIM_ITRx_SetConfig>
      break;
 800229c:	e003      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      break;
 80022a2:	e000      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <TIM_Base_SetConfig+0xd0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00b      	beq.n	80022f0 <TIM_Base_SetConfig+0x30>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d007      	beq.n	80022f0 <TIM_Base_SetConfig+0x30>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <TIM_Base_SetConfig+0xd4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <TIM_Base_SetConfig+0x30>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a2b      	ldr	r2, [pc, #172]	; (8002398 <TIM_Base_SetConfig+0xd8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d108      	bne.n	8002302 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a22      	ldr	r2, [pc, #136]	; (8002390 <TIM_Base_SetConfig+0xd0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00b      	beq.n	8002322 <TIM_Base_SetConfig+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d007      	beq.n	8002322 <TIM_Base_SetConfig+0x62>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <TIM_Base_SetConfig+0xd4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d003      	beq.n	8002322 <TIM_Base_SetConfig+0x62>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <TIM_Base_SetConfig+0xd8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d108      	bne.n	8002334 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <TIM_Base_SetConfig+0xd0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d103      	bne.n	8002368 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f023 0201 	bic.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	611a      	str	r2, [r3, #16]
  }
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800

0800239c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f023 0201 	bic.w	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f023 030a 	bic.w	r3, r3, #10
 80023d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	621a      	str	r2, [r3, #32]
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f023 0210 	bic.w	r2, r3, #16
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	031b      	lsls	r3, r3, #12
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002434:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	621a      	str	r2, [r3, #32]
}
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	f043 0307 	orr.w	r3, r3, #7
 8002478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800248a:	b480      	push	{r7}
 800248c:	b087      	sub	sp, #28
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	021a      	lsls	r2, r3, #8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	609a      	str	r2, [r3, #8]
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024dc:	2302      	movs	r3, #2
 80024de:	e046      	b.n	800256e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d00e      	beq.n	8002542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252c:	d009      	beq.n	8002542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d004      	beq.n	8002542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10c      	bne.n	800255c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4313      	orrs	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40000400 	.word	0x40000400
 8002580:	40000800 	.word	0x40000800

08002584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e042      	b.n	800261c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fa5a 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 ff61 	bl	8003490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	; 0x30
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	d156      	bne.n	80026ec <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_UART_Transmit_DMA+0x26>
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e04f      	b.n	80026ee <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2221      	movs	r2, #33	; 0x21
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <HAL_UART_Transmit_DMA+0xd4>)
 8002674:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	4a20      	ldr	r2, [pc, #128]	; (80026fc <HAL_UART_Transmit_DMA+0xd8>)
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_UART_Transmit_DMA+0xdc>)
 8002684:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	2200      	movs	r2, #0
 800268c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800268e:	f107 0308 	add.w	r3, r7, #8
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3304      	adds	r3, #4
 80026a2:	461a      	mov	r2, r3
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	f7fe fcc5 	bl	8001034 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3314      	adds	r3, #20
 80026ba:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	e853 3f00 	ldrex	r3, [r3]
 80026c2:	617b      	str	r3, [r7, #20]
   return(result);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3314      	adds	r3, #20
 80026d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d4:	627a      	str	r2, [r7, #36]	; 0x24
 80026d6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d8:	6a39      	ldr	r1, [r7, #32]
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	e841 2300 	strex	r3, r2, [r1]
 80026e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1e5      	bne.n	80026b4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3730      	adds	r7, #48	; 0x30
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	08002d25 	.word	0x08002d25
 80026fc:	08002dbf 	.word	0x08002dbf
 8002700:	08002f43 	.word	0x08002f43

08002704 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08c      	sub	sp, #48	; 0x30
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	d146      	bne.n	80027ac <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e03f      	b.n	80027ae <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	461a      	mov	r2, r3
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fc49 	bl	8002fd8 <UART_Start_Receive_DMA>
 8002746:	4603      	mov	r3, r0
 8002748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	2b01      	cmp	r3, #1
 8002752:	d125      	bne.n	80027a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	330c      	adds	r3, #12
 8002770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	617b      	str	r3, [r7, #20]
   return(result);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f043 0310 	orr.w	r3, r3, #16
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800278a:	627a      	str	r2, [r7, #36]	; 0x24
 800278c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278e:	6a39      	ldr	r1, [r7, #32]
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	e841 2300 	strex	r3, r2, [r1]
 8002796:	61fb      	str	r3, [r7, #28]
   return(result);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1e5      	bne.n	800276a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800279e:	e002      	b.n	80027a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 80027a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027aa:	e000      	b.n	80027ae <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3730      	adds	r7, #48	; 0x30
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b0ba      	sub	sp, #232	; 0xe8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_UART_IRQHandler+0x66>
 800280a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fd7c 	bl	8003314 <UART_Receive_IT>
      return;
 800281c:	e25b      	b.n	8002cd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800281e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80de 	beq.w	80029e4 <HAL_UART_IRQHandler+0x22c>
 8002828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002838:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80d1 	beq.w	80029e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_UART_IRQHandler+0xae>
 800284e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_UART_IRQHandler+0xd2>
 8002872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f043 0202 	orr.w	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800288a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_UART_IRQHandler+0xf6>
 8002896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f043 0204 	orr.w	r2, r3, #4
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d011      	beq.n	80028de <HAL_UART_IRQHandler+0x126>
 80028ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f043 0208 	orr.w	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 81f2 	beq.w	8002ccc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_UART_IRQHandler+0x14e>
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fd07 	bl	8003314 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <HAL_UART_IRQHandler+0x17a>
 800292a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d04f      	beq.n	80029d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fc11 	bl	800315a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d041      	beq.n	80029ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3314      	adds	r3, #20
 800294c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002954:	e853 3f00 	ldrex	r3, [r3]
 8002958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800295c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3314      	adds	r3, #20
 800296e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002972:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800297e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800298a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1d9      	bne.n	8002946 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d013      	beq.n	80029c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	4a7e      	ldr	r2, [pc, #504]	; (8002b98 <HAL_UART_IRQHandler+0x3e0>)
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fbe0 	bl	800116c <HAL_DMA_Abort_IT>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029bc:	4610      	mov	r0, r2
 80029be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	e00e      	b.n	80029e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f9a5 	bl	8002d12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	e00a      	b.n	80029e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9a1 	bl	8002d12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d0:	e006      	b.n	80029e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f99d 	bl	8002d12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80029de:	e175      	b.n	8002ccc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	bf00      	nop
    return;
 80029e2:	e173      	b.n	8002ccc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	f040 814f 	bne.w	8002c8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8148 	beq.w	8002c8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8141 	beq.w	8002c8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80b6 	beq.w	8002b9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8145 	beq.w	8002cd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	f080 813e 	bcs.w	8002cd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	f000 8088 	beq.w	8002b78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	330c      	adds	r3, #12
 8002a90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a94:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002aa0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002aa4:	e841 2300 	strex	r3, r2, [r1]
 8002aa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1d9      	bne.n	8002a68 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3314      	adds	r3, #20
 8002aba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002abe:	e853 3f00 	ldrex	r3, [r3]
 8002ac2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ad8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002adc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ae0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ae4:	e841 2300 	strex	r3, r2, [r1]
 8002ae8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e1      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3314      	adds	r3, #20
 8002af6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002afa:	e853 3f00 	ldrex	r3, [r3]
 8002afe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3314      	adds	r3, #20
 8002b10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b1c:	e841 2300 	strex	r3, r2, [r1]
 8002b20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e3      	bne.n	8002af0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b48:	f023 0310 	bic.w	r3, r3, #16
 8002b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b5c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e3      	bne.n	8002b36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fabe 	bl	80010f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fd feca 	bl	8000928 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b94:	e09c      	b.n	8002cd0 <HAL_UART_IRQHandler+0x518>
 8002b96:	bf00      	nop
 8002b98:	0800321f 	.word	0x0800321f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 808e 	beq.w	8002cd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8089 	beq.w	8002cd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	e853 3f00 	ldrex	r3, [r3]
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	330c      	adds	r3, #12
 8002be2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002be6:	647a      	str	r2, [r7, #68]	; 0x44
 8002be8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e3      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3314      	adds	r3, #20
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	623b      	str	r3, [r7, #32]
   return(result);
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3314      	adds	r3, #20
 8002c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c1e:	633a      	str	r2, [r7, #48]	; 0x30
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e3      	bne.n	8002bfa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0310 	bic.w	r3, r3, #16
 8002c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c64:	61fa      	str	r2, [r7, #28]
 8002c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	69b9      	ldr	r1, [r7, #24]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	617b      	str	r3, [r7, #20]
   return(result);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e3      	bne.n	8002c40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7fd fe4f 	bl	8000928 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c8a:	e023      	b.n	8002cd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <HAL_UART_IRQHandler+0x4f4>
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 face 	bl	8003246 <UART_Transmit_IT>
    return;
 8002caa:	e014      	b.n	8002cd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x51e>
 8002cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fb0d 	bl	80032e4 <UART_EndTransmit_IT>
    return;
 8002cca:	e004      	b.n	8002cd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002ccc:	bf00      	nop
 8002cce:	e002      	b.n	8002cd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cd0:	bf00      	nop
 8002cd2:	e000      	b.n	8002cd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cd4:	bf00      	nop
  }
}
 8002cd6:	37e8      	adds	r7, #232	; 0xe8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b090      	sub	sp, #64	; 0x40
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d137      	bne.n	8002db0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d42:	2200      	movs	r2, #0
 8002d44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3314      	adds	r3, #20
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	623b      	str	r3, [r7, #32]
   return(result);
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3314      	adds	r3, #20
 8002d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d66:	633a      	str	r2, [r7, #48]	; 0x30
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6e:	e841 2300 	strex	r3, r2, [r1]
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1e5      	bne.n	8002d46 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
 8002d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d9a:	61fa      	str	r2, [r7, #28]
 8002d9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	69b9      	ldr	r1, [r7, #24]
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	617b      	str	r3, [r7, #20]
   return(result);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e5      	bne.n	8002d7a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002dae:	e002      	b.n	8002db6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002db0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002db2:	f7fd fdaf 	bl	8000914 <HAL_UART_TxCpltCallback>
}
 8002db6:	bf00      	nop
 8002db8:	3740      	adds	r7, #64	; 0x40
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff ff85 	bl	8002cdc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b09c      	sub	sp, #112	; 0x70
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d172      	bne.n	8002edc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df8:	2200      	movs	r2, #0
 8002dfa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e5      	bne.n	8002dfc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3314      	adds	r3, #20
 8002e36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	667b      	str	r3, [r7, #100]	; 0x64
 8002e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e50:	647a      	str	r2, [r7, #68]	; 0x44
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e58:	e841 2300 	strex	r3, r2, [r1]
 8002e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e5      	bne.n	8002e30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3314      	adds	r3, #20
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	623b      	str	r3, [r7, #32]
   return(result);
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3314      	adds	r3, #20
 8002e82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e84:	633a      	str	r2, [r7, #48]	; 0x30
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e5      	bne.n	8002e64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d119      	bne.n	8002edc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	e853 3f00 	ldrex	r3, [r3]
 8002eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0310 	bic.w	r3, r3, #16
 8002ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ec8:	61fa      	str	r2, [r7, #28]
 8002eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	69b9      	ldr	r1, [r7, #24]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e5      	bne.n	8002ea8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ede:	2200      	movs	r2, #0
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002ef2:	f7fd fd19 	bl	8000928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ef6:	e002      	b.n	8002efe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002ef8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002efa:	f7ff fef8 	bl	8002cee <HAL_UART_RxCpltCallback>
}
 8002efe:	bf00      	nop
 8002f00:	3770      	adds	r7, #112	; 0x70
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d108      	bne.n	8002f34 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7fd fcfb 	bl	8000928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f32:	e002      	b.n	8002f3a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff fee3 	bl	8002d00 <HAL_UART_RxHalfCpltCallback>
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b21      	cmp	r3, #33	; 0x21
 8002f74:	d108      	bne.n	8002f88 <UART_DMAError+0x46>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002f82:	68b8      	ldr	r0, [r7, #8]
 8002f84:	f000 f8c2 	bl	800310c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b22      	cmp	r3, #34	; 0x22
 8002fa8:	d108      	bne.n	8002fbc <UART_DMAError+0x7a>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002fb6:	68b8      	ldr	r0, [r7, #8]
 8002fb8:	f000 f8cf 	bl	800315a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f043 0210 	orr.w	r2, r3, #16
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fc8:	68b8      	ldr	r0, [r7, #8]
 8002fca:	f7ff fea2 	bl	8002d12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b098      	sub	sp, #96	; 0x60
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2222      	movs	r2, #34	; 0x22
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	4a3e      	ldr	r2, [pc, #248]	; (8003100 <UART_Start_Receive_DMA+0x128>)
 8003006:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <UART_Start_Receive_DMA+0x12c>)
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	4a3c      	ldr	r2, [pc, #240]	; (8003108 <UART_Start_Receive_DMA+0x130>)
 8003016:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	2200      	movs	r2, #0
 800301e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003020:	f107 0308 	add.w	r3, r7, #8
 8003024:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3304      	adds	r3, #4
 8003030:	4619      	mov	r1, r3
 8003032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	f7fd fffc 	bl	8001034 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d019      	beq.n	800308e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003070:	65bb      	str	r3, [r7, #88]	; 0x58
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800307a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800307c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003082:	e841 2300 	strex	r3, r2, [r1]
 8003086:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e5      	bne.n	800305a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3314      	adds	r3, #20
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	657b      	str	r3, [r7, #84]	; 0x54
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3314      	adds	r3, #20
 80030ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e5      	bne.n	800308e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3314      	adds	r3, #20
 80030c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	617b      	str	r3, [r7, #20]
   return(result);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d8:	653b      	str	r3, [r7, #80]	; 0x50
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3314      	adds	r3, #20
 80030e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030e2:	627a      	str	r2, [r7, #36]	; 0x24
 80030e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6a39      	ldr	r1, [r7, #32]
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e5      	bne.n	80030c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3760      	adds	r7, #96	; 0x60
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	08002ddb 	.word	0x08002ddb
 8003104:	08002f07 	.word	0x08002f07
 8003108:	08002f43 	.word	0x08002f43

0800310c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	60bb      	str	r3, [r7, #8]
   return(result);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	61ba      	str	r2, [r7, #24]
 8003136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6979      	ldr	r1, [r7, #20]
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	e841 2300 	strex	r3, r2, [r1]
 8003140:	613b      	str	r3, [r7, #16]
   return(result);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e5      	bne.n	8003114 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003150:	bf00      	nop
 8003152:	3724      	adds	r7, #36	; 0x24
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800315a:	b480      	push	{r7}
 800315c:	b095      	sub	sp, #84	; 0x54
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003182:	643a      	str	r2, [r7, #64]	; 0x40
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e5      	bne.n	8003162 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3314      	adds	r3, #20
 800319c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3314      	adds	r3, #20
 80031b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e5      	bne.n	8003196 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d119      	bne.n	8003206 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f023 0310 	bic.w	r3, r3, #16
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031f2:	61ba      	str	r2, [r7, #24]
 80031f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	6979      	ldr	r1, [r7, #20]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e5      	bne.n	80031d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003214:	bf00      	nop
 8003216:	3754      	adds	r7, #84	; 0x54
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff fd6a 	bl	8002d12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b21      	cmp	r3, #33	; 0x21
 8003258:	d13e      	bne.n	80032d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d114      	bne.n	800328e <UART_Transmit_IT+0x48>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d110      	bne.n	800328e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003280:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	1c9a      	adds	r2, r3, #2
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	621a      	str	r2, [r3, #32]
 800328c:	e008      	b.n	80032a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	1c59      	adds	r1, r3, #1
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6211      	str	r1, [r2, #32]
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4619      	mov	r1, r3
 80032ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10f      	bne.n	80032d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7fd fb05 	bl	8000914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b22      	cmp	r3, #34	; 0x22
 8003326:	f040 80ae 	bne.w	8003486 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d117      	bne.n	8003364 <UART_Receive_IT+0x50>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d113      	bne.n	8003364 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	b29b      	uxth	r3, r3
 800334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003352:	b29a      	uxth	r2, r3
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	1c9a      	adds	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
 8003362:	e026      	b.n	80033b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d007      	beq.n	8003388 <UART_Receive_IT+0x74>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <UART_Receive_IT+0x82>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e008      	b.n	80033a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4619      	mov	r1, r3
 80033c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d15d      	bne.n	8003482 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0220 	bic.w	r2, r2, #32
 80033d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	2b01      	cmp	r3, #1
 800340a:	d135      	bne.n	8003478 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	613b      	str	r3, [r7, #16]
   return(result);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f023 0310 	bic.w	r3, r3, #16
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	623a      	str	r2, [r7, #32]
 8003434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	69f9      	ldr	r1, [r7, #28]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e5      	bne.n	8003412 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b10      	cmp	r3, #16
 8003452:	d10a      	bne.n	800346a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fd fa59 	bl	8000928 <HAL_UARTEx_RxEventCallback>
 8003476:	e002      	b.n	800347e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fc38 	bl	8002cee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e002      	b.n	8003488 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3730      	adds	r7, #48	; 0x30
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034ca:	f023 030c 	bic.w	r3, r3, #12
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2c      	ldr	r2, [pc, #176]	; (80035a4 <UART_SetConfig+0x114>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d103      	bne.n	8003500 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034f8:	f7fe fd9a 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	e002      	b.n	8003506 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7fe fd82 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 8003504:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	4a22      	ldr	r2, [pc, #136]	; (80035a8 <UART_SetConfig+0x118>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	0119      	lsls	r1, r3, #4
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009a      	lsls	r2, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	fbb2 f2f3 	udiv	r2, r2, r3
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <UART_SetConfig+0x118>)
 800353e:	fba3 0302 	umull	r0, r3, r3, r2
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2064      	movs	r0, #100	; 0x64
 8003546:	fb00 f303 	mul.w	r3, r0, r3
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	3332      	adds	r3, #50	; 0x32
 8003550:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <UART_SetConfig+0x118>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355c:	4419      	add	r1, r3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009a      	lsls	r2, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	fbb2 f2f3 	udiv	r2, r2, r3
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <UART_SetConfig+0x118>)
 8003576:	fba3 0302 	umull	r0, r3, r3, r2
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2064      	movs	r0, #100	; 0x64
 800357e:	fb00 f303 	mul.w	r3, r0, r3
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	3332      	adds	r3, #50	; 0x32
 8003588:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <UART_SetConfig+0x118>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	f003 020f 	and.w	r2, r3, #15
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	440a      	add	r2, r1
 800359a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40013800 	.word	0x40013800
 80035a8:	51eb851f 	.word	0x51eb851f

080035ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035be:	2b84      	cmp	r3, #132	; 0x84
 80035c0:	d005      	beq.n	80035ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80035c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4413      	add	r3, r2
 80035ca:	3303      	adds	r3, #3
 80035cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80035ce:	68fb      	ldr	r3, [r7, #12]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035de:	f000 fb57 	bl	8003c90 <vTaskStartScheduler>
  
  return osOK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d020      	beq.n	800363c <osThreadCreate+0x54>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01c      	beq.n	800363c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685c      	ldr	r4, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691e      	ldr	r6, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ffc9 	bl	80035ac <makeFreeRtosPriority>
 800361a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003624:	9202      	str	r2, [sp, #8]
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	9100      	str	r1, [sp, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	4632      	mov	r2, r6
 800362e:	4629      	mov	r1, r5
 8003630:	4620      	mov	r0, r4
 8003632:	f000 f8e8 	bl	8003806 <xTaskCreateStatic>
 8003636:	4603      	mov	r3, r0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e01c      	b.n	8003676 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685c      	ldr	r4, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003648:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ffab 	bl	80035ac <makeFreeRtosPriority>
 8003656:	4602      	mov	r2, r0
 8003658:	f107 030c 	add.w	r3, r7, #12
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	9200      	str	r2, [sp, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4632      	mov	r2, r6
 8003664:	4629      	mov	r1, r5
 8003666:	4620      	mov	r0, r4
 8003668:	f000 f92a 	bl	80038c0 <xTaskCreate>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d001      	beq.n	8003676 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003676:	68fb      	ldr	r3, [r7, #12]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003680 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <osDelay+0x16>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	e000      	b.n	8003698 <osDelay+0x18>
 8003696:	2301      	movs	r3, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fac5 	bl	8003c28 <vTaskDelay>
  
  return osOK;
 800369e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f103 0208 	add.w	r2, r3, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295
 80036c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f103 0208 	add.w	r2, r3, #8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f103 0208 	add.w	r2, r3, #8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d103      	bne.n	8003764 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e00c      	b.n	800377e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3308      	adds	r3, #8
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e002      	b.n	8003772 <vListInsert+0x2e>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d2f6      	bcs.n	800376c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6852      	ldr	r2, [r2, #4]
 80037d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d103      	bne.n	80037e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1e5a      	subs	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003806:	b580      	push	{r7, lr}
 8003808:	b08e      	sub	sp, #56	; 0x38
 800380a:	af04      	add	r7, sp, #16
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xTaskCreateStatic+0x46>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	61fb      	str	r3, [r7, #28]
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800384c:	2354      	movs	r3, #84	; 0x54
 800384e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b54      	cmp	r3, #84	; 0x54
 8003854:	d00a      	beq.n	800386c <xTaskCreateStatic+0x66>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	61bb      	str	r3, [r7, #24]
}
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800386c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01e      	beq.n	80038b2 <xTaskCreateStatic+0xac>
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01b      	beq.n	80038b2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003882:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800388c:	2300      	movs	r3, #0
 800388e:	9303      	str	r3, [sp, #12]
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	9302      	str	r3, [sp, #8]
 8003894:	f107 0314 	add.w	r3, r7, #20
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f850 	bl	800394a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ac:	f000 f8d4 	bl	8003a58 <prvAddNewTaskToReadyList>
 80038b0:	e001      	b.n	80038b6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038b6:	697b      	ldr	r3, [r7, #20]
	}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	; 0x30
 80038c4:	af04      	add	r7, sp, #16
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 ff13 	bl	8004700 <pvPortMalloc>
 80038da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00e      	beq.n	8003900 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038e2:	2054      	movs	r0, #84	; 0x54
 80038e4:	f000 ff0c 	bl	8004700 <pvPortMalloc>
 80038e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
 80038f6:	e005      	b.n	8003904 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038f8:	6978      	ldr	r0, [r7, #20]
 80038fa:	f000 ffcd 	bl	8004898 <vPortFree>
 80038fe:	e001      	b.n	8003904 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d017      	beq.n	800393a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	2300      	movs	r3, #0
 8003916:	9303      	str	r3, [sp, #12]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	9302      	str	r3, [sp, #8]
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f80e 	bl	800394a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800392e:	69f8      	ldr	r0, [r7, #28]
 8003930:	f000 f892 	bl	8003a58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003934:	2301      	movs	r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e002      	b.n	8003940 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295
 800393e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003940:	69bb      	ldr	r3, [r7, #24]
	}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b088      	sub	sp, #32
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003962:	3b01      	subs	r3, #1
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f023 0307 	bic.w	r3, r3, #7
 8003970:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <prvInitialiseNewTask+0x48>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	617b      	str	r3, [r7, #20]
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01f      	beq.n	80039d8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e012      	b.n	80039c4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	7819      	ldrb	r1, [r3, #0]
 80039a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	3334      	adds	r3, #52	; 0x34
 80039ae:	460a      	mov	r2, r1
 80039b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d006      	beq.n	80039cc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3301      	adds	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b0f      	cmp	r3, #15
 80039c8:	d9e9      	bls.n	800399e <prvInitialiseNewTask+0x54>
 80039ca:	e000      	b.n	80039ce <prvInitialiseNewTask+0x84>
			{
				break;
 80039cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d6:	e003      	b.n	80039e0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d901      	bls.n	80039ea <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039e6:	2306      	movs	r3, #6
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	2200      	movs	r2, #0
 80039fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	3304      	adds	r3, #4
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fe70 	bl	80036e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	3318      	adds	r3, #24
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fe6b 	bl	80036e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	f1c3 0207 	rsb	r2, r3, #7
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2200      	movs	r2, #0
 8003a2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	68f9      	ldr	r1, [r7, #12]
 8003a38:	69b8      	ldr	r0, [r7, #24]
 8003a3a:	f000 fcad 	bl	8004398 <pxPortInitialiseStack>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a50:	bf00      	nop
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a60:	f000 fd8c 	bl	800457c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a64:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <prvAddNewTaskToReadyList+0xb8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a29      	ldr	r2, [pc, #164]	; (8003b10 <prvAddNewTaskToReadyList+0xb8>)
 8003a6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a6e:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <prvAddNewTaskToReadyList+0xbc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a76:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <prvAddNewTaskToReadyList+0xbc>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a7c:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <prvAddNewTaskToReadyList+0xb8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d110      	bne.n	8003aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a84:	f000 fb46 	bl	8004114 <prvInitialiseTaskLists>
 8003a88:	e00d      	b.n	8003aa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a8a:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <prvAddNewTaskToReadyList+0xc0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <prvAddNewTaskToReadyList+0xbc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d802      	bhi.n	8003aa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003aa0:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <prvAddNewTaskToReadyList+0xbc>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <prvAddNewTaskToReadyList+0xc4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <prvAddNewTaskToReadyList+0xc4>)
 8003aae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <prvAddNewTaskToReadyList+0xc8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <prvAddNewTaskToReadyList+0xc8>)
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <prvAddNewTaskToReadyList+0xcc>)
 8003ad0:	441a      	add	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f7ff fe10 	bl	80036fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ade:	f000 fd7d 	bl	80045dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <prvAddNewTaskToReadyList+0xc0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00e      	beq.n	8003b08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <prvAddNewTaskToReadyList+0xbc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d207      	bcs.n	8003b08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <prvAddNewTaskToReadyList+0xd0>)
 8003afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20001144 	.word	0x20001144
 8003b14:	20001044 	.word	0x20001044
 8003b18:	20001150 	.word	0x20001150
 8003b1c:	20001160 	.word	0x20001160
 8003b20:	2000114c 	.word	0x2000114c
 8003b24:	20001048 	.word	0x20001048
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <vTaskDelayUntil+0x2a>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	617b      	str	r3, [r7, #20]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <vTaskDelayUntil+0x46>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	613b      	str	r3, [r7, #16]
}
 8003b6e:	bf00      	nop
 8003b70:	e7fe      	b.n	8003b70 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <vTaskDelayUntil+0xf0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <vTaskDelayUntil+0x64>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	60fb      	str	r3, [r7, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003b90:	f000 f8de 	bl	8003d50 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003b94:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <vTaskDelayUntil+0xf4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d20b      	bcs.n	8003bc6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d211      	bcs.n	8003bdc <vTaskDelayUntil+0xb0>
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d90d      	bls.n	8003bdc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc4:	e00a      	b.n	8003bdc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d303      	bcc.n	8003bd8 <vTaskDelayUntil+0xac>
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d901      	bls.n	8003bdc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d006      	beq.n	8003bf6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fb6b 	bl	80042cc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003bf6:	f000 f8b9 	bl	8003d6c <xTaskResumeAll>
 8003bfa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <vTaskDelayUntil+0xf8>)
 8003c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c12:	bf00      	nop
 8003c14:	3728      	adds	r7, #40	; 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	2000116c 	.word	0x2000116c
 8003c20:	20001148 	.word	0x20001148
 8003c24:	e000ed04 	.word	0xe000ed04

08003c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d017      	beq.n	8003c6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c3a:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <vTaskDelay+0x60>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <vTaskDelay+0x30>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	60bb      	str	r3, [r7, #8]
}
 8003c54:	bf00      	nop
 8003c56:	e7fe      	b.n	8003c56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c58:	f000 f87a 	bl	8003d50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fb34 	bl	80042cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c64:	f000 f882 	bl	8003d6c <xTaskResumeAll>
 8003c68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <vTaskDelay+0x64>)
 8003c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	2000116c 	.word	0x2000116c
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c9e:	463a      	mov	r2, r7
 8003ca0:	1d39      	adds	r1, r7, #4
 8003ca2:	f107 0308 	add.w	r3, r7, #8
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fc fbde 	bl	8000468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cac:	6839      	ldr	r1, [r7, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	9202      	str	r2, [sp, #8]
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	460a      	mov	r2, r1
 8003cbe:	491e      	ldr	r1, [pc, #120]	; (8003d38 <vTaskStartScheduler+0xa8>)
 8003cc0:	481e      	ldr	r0, [pc, #120]	; (8003d3c <vTaskStartScheduler+0xac>)
 8003cc2:	f7ff fda0 	bl	8003806 <xTaskCreateStatic>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <vTaskStartScheduler+0xb0>)
 8003cca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ccc:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <vTaskStartScheduler+0xb0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e001      	b.n	8003cde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d116      	bne.n	8003d12 <vTaskStartScheduler+0x82>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	613b      	str	r3, [r7, #16]
}
 8003cf6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <vTaskStartScheduler+0xb4>)
 8003cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d00:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <vTaskStartScheduler+0xb8>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <vTaskStartScheduler+0xbc>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d0c:	f000 fbc4 	bl	8004498 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d10:	e00e      	b.n	8003d30 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d10a      	bne.n	8003d30 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	60fb      	str	r3, [r7, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	e7fe      	b.n	8003d2e <vTaskStartScheduler+0x9e>
}
 8003d30:	bf00      	nop
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	08004be8 	.word	0x08004be8
 8003d3c:	080040e5 	.word	0x080040e5
 8003d40:	20001168 	.word	0x20001168
 8003d44:	20001164 	.word	0x20001164
 8003d48:	20001150 	.word	0x20001150
 8003d4c:	20001148 	.word	0x20001148

08003d50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <vTaskSuspendAll+0x18>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	4a03      	ldr	r2, [pc, #12]	; (8003d68 <vTaskSuspendAll+0x18>)
 8003d5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	2000116c 	.word	0x2000116c

08003d6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d7a:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <xTaskResumeAll+0x114>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	603b      	str	r3, [r7, #0]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d98:	f000 fbf0 	bl	800457c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <xTaskResumeAll+0x114>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4a37      	ldr	r2, [pc, #220]	; (8003e80 <xTaskResumeAll+0x114>)
 8003da4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <xTaskResumeAll+0x114>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d161      	bne.n	8003e72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dae:	4b35      	ldr	r3, [pc, #212]	; (8003e84 <xTaskResumeAll+0x118>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d05d      	beq.n	8003e72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003db6:	e02e      	b.n	8003e16 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db8:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <xTaskResumeAll+0x11c>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fcf5 	bl	80037b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fcf0 	bl	80037b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	2201      	movs	r2, #1
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <xTaskResumeAll+0x120>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <xTaskResumeAll+0x120>)
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4a27      	ldr	r2, [pc, #156]	; (8003e90 <xTaskResumeAll+0x124>)
 8003df4:	441a      	add	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f7ff fc7e 	bl	80036fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e06:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <xTaskResumeAll+0x128>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d302      	bcc.n	8003e16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e10:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <xTaskResumeAll+0x12c>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e16:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <xTaskResumeAll+0x11c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1cc      	bne.n	8003db8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e24:	f000 fa14 	bl	8004250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e28:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <xTaskResumeAll+0x130>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e34:	f000 f844 	bl	8003ec0 <xTaskIncrementTick>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <xTaskResumeAll+0x12c>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f1      	bne.n	8003e34 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <xTaskResumeAll+0x130>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <xTaskResumeAll+0x12c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <xTaskResumeAll+0x134>)
 8003e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e72:	f000 fbb3 	bl	80045dc <vPortExitCritical>

	return xAlreadyYielded;
 8003e76:	68bb      	ldr	r3, [r7, #8]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	2000116c 	.word	0x2000116c
 8003e84:	20001144 	.word	0x20001144
 8003e88:	20001104 	.word	0x20001104
 8003e8c:	2000114c 	.word	0x2000114c
 8003e90:	20001048 	.word	0x20001048
 8003e94:	20001044 	.word	0x20001044
 8003e98:	20001158 	.word	0x20001158
 8003e9c:	20001154 	.word	0x20001154
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <xTaskGetTickCount+0x18>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003eb0:	687b      	ldr	r3, [r7, #4]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	20001148 	.word	0x20001148

08003ec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eca:	4b4e      	ldr	r3, [pc, #312]	; (8004004 <xTaskIncrementTick+0x144>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f040 808e 	bne.w	8003ff0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ed4:	4b4c      	ldr	r3, [pc, #304]	; (8004008 <xTaskIncrementTick+0x148>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003edc:	4a4a      	ldr	r2, [pc, #296]	; (8004008 <xTaskIncrementTick+0x148>)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d120      	bne.n	8003f2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ee8:	4b48      	ldr	r3, [pc, #288]	; (800400c <xTaskIncrementTick+0x14c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	603b      	str	r3, [r7, #0]
}
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <xTaskIncrementTick+0x46>
 8003f08:	4b40      	ldr	r3, [pc, #256]	; (800400c <xTaskIncrementTick+0x14c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	4b40      	ldr	r3, [pc, #256]	; (8004010 <xTaskIncrementTick+0x150>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a3e      	ldr	r2, [pc, #248]	; (800400c <xTaskIncrementTick+0x14c>)
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4a3e      	ldr	r2, [pc, #248]	; (8004010 <xTaskIncrementTick+0x150>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b3d      	ldr	r3, [pc, #244]	; (8004014 <xTaskIncrementTick+0x154>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <xTaskIncrementTick+0x154>)
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	f000 f993 	bl	8004250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f2a:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <xTaskIncrementTick+0x158>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d348      	bcc.n	8003fc6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f34:	4b35      	ldr	r3, [pc, #212]	; (800400c <xTaskIncrementTick+0x14c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <xTaskIncrementTick+0x158>)
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	601a      	str	r2, [r3, #0]
					break;
 8003f46:	e03e      	b.n	8003fc6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f48:	4b30      	ldr	r3, [pc, #192]	; (800400c <xTaskIncrementTick+0x14c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d203      	bcs.n	8003f68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f60:	4a2d      	ldr	r2, [pc, #180]	; (8004018 <xTaskIncrementTick+0x158>)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f66:	e02e      	b.n	8003fc6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fc21 	bl	80037b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	3318      	adds	r3, #24
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fc18 	bl	80037b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	2201      	movs	r2, #1
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	4b23      	ldr	r3, [pc, #140]	; (800401c <xTaskIncrementTick+0x15c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	4a22      	ldr	r2, [pc, #136]	; (800401c <xTaskIncrementTick+0x15c>)
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <xTaskIncrementTick+0x160>)
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7ff fba6 	bl	80036fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <xTaskIncrementTick+0x164>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d3b9      	bcc.n	8003f34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc4:	e7b6      	b.n	8003f34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fc6:	4b17      	ldr	r3, [pc, #92]	; (8004024 <xTaskIncrementTick+0x164>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fcc:	4914      	ldr	r1, [pc, #80]	; (8004020 <xTaskIncrementTick+0x160>)
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d901      	bls.n	8003fe2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <xTaskIncrementTick+0x168>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003fea:	2301      	movs	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e004      	b.n	8003ffa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	; (800402c <xTaskIncrementTick+0x16c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	4a0d      	ldr	r2, [pc, #52]	; (800402c <xTaskIncrementTick+0x16c>)
 8003ff8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ffa:	697b      	ldr	r3, [r7, #20]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	2000116c 	.word	0x2000116c
 8004008:	20001148 	.word	0x20001148
 800400c:	200010fc 	.word	0x200010fc
 8004010:	20001100 	.word	0x20001100
 8004014:	2000115c 	.word	0x2000115c
 8004018:	20001164 	.word	0x20001164
 800401c:	2000114c 	.word	0x2000114c
 8004020:	20001048 	.word	0x20001048
 8004024:	20001044 	.word	0x20001044
 8004028:	20001158 	.word	0x20001158
 800402c:	20001154 	.word	0x20001154

08004030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <vTaskSwitchContext+0xa0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800403e:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <vTaskSwitchContext+0xa4>)
 8004040:	2201      	movs	r2, #1
 8004042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004044:	e03f      	b.n	80040c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <vTaskSwitchContext+0xa4>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800404c:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <vTaskSwitchContext+0xa8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800405a:	7afb      	ldrb	r3, [r7, #11]
 800405c:	f1c3 031f 	rsb	r3, r3, #31
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	491e      	ldr	r1, [pc, #120]	; (80040dc <vTaskSwitchContext+0xac>)
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	607b      	str	r3, [r7, #4]
}
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <vTaskSwitchContext+0x5a>
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4a11      	ldr	r2, [pc, #68]	; (80040dc <vTaskSwitchContext+0xac>)
 8004098:	4413      	add	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	3308      	adds	r3, #8
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d104      	bne.n	80040bc <vTaskSwitchContext+0x8c>
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	605a      	str	r2, [r3, #4]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <vTaskSwitchContext+0xb0>)
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	2000116c 	.word	0x2000116c
 80040d4:	20001158 	.word	0x20001158
 80040d8:	2000114c 	.word	0x2000114c
 80040dc:	20001048 	.word	0x20001048
 80040e0:	20001044 	.word	0x20001044

080040e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040ec:	f000 f852 	bl	8004194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <prvIdleTask+0x28>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d9f9      	bls.n	80040ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <prvIdleTask+0x2c>)
 80040fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004108:	e7f0      	b.n	80040ec <prvIdleTask+0x8>
 800410a:	bf00      	nop
 800410c:	20001048 	.word	0x20001048
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	e00c      	b.n	800413a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4a12      	ldr	r2, [pc, #72]	; (8004174 <prvInitialiseTaskLists+0x60>)
 800412c:	4413      	add	r3, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff faba 	bl	80036a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3301      	adds	r3, #1
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b06      	cmp	r3, #6
 800413e:	d9ef      	bls.n	8004120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004140:	480d      	ldr	r0, [pc, #52]	; (8004178 <prvInitialiseTaskLists+0x64>)
 8004142:	f7ff fab1 	bl	80036a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004146:	480d      	ldr	r0, [pc, #52]	; (800417c <prvInitialiseTaskLists+0x68>)
 8004148:	f7ff faae 	bl	80036a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800414c:	480c      	ldr	r0, [pc, #48]	; (8004180 <prvInitialiseTaskLists+0x6c>)
 800414e:	f7ff faab 	bl	80036a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004152:	480c      	ldr	r0, [pc, #48]	; (8004184 <prvInitialiseTaskLists+0x70>)
 8004154:	f7ff faa8 	bl	80036a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004158:	480b      	ldr	r0, [pc, #44]	; (8004188 <prvInitialiseTaskLists+0x74>)
 800415a:	f7ff faa5 	bl	80036a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <prvInitialiseTaskLists+0x78>)
 8004160:	4a05      	ldr	r2, [pc, #20]	; (8004178 <prvInitialiseTaskLists+0x64>)
 8004162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <prvInitialiseTaskLists+0x7c>)
 8004166:	4a05      	ldr	r2, [pc, #20]	; (800417c <prvInitialiseTaskLists+0x68>)
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20001048 	.word	0x20001048
 8004178:	200010d4 	.word	0x200010d4
 800417c:	200010e8 	.word	0x200010e8
 8004180:	20001104 	.word	0x20001104
 8004184:	20001118 	.word	0x20001118
 8004188:	20001130 	.word	0x20001130
 800418c:	200010fc 	.word	0x200010fc
 8004190:	20001100 	.word	0x20001100

08004194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800419a:	e019      	b.n	80041d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800419c:	f000 f9ee 	bl	800457c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a0:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <prvCheckTasksWaitingTermination+0x50>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fb01 	bl	80037b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <prvCheckTasksWaitingTermination+0x54>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <prvCheckTasksWaitingTermination+0x54>)
 80041ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <prvCheckTasksWaitingTermination+0x58>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <prvCheckTasksWaitingTermination+0x58>)
 80041c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041c6:	f000 fa09 	bl	80045dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f810 	bl	80041f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <prvCheckTasksWaitingTermination+0x58>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e1      	bne.n	800419c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20001118 	.word	0x20001118
 80041e8:	20001144 	.word	0x20001144
 80041ec:	2000112c 	.word	0x2000112c

080041f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fb46 	bl	8004898 <vPortFree>
				vPortFree( pxTCB );
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb43 	bl	8004898 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004212:	e018      	b.n	8004246 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800421a:	2b01      	cmp	r3, #1
 800421c:	d103      	bne.n	8004226 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fb3a 	bl	8004898 <vPortFree>
	}
 8004224:	e00f      	b.n	8004246 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800422c:	2b02      	cmp	r3, #2
 800422e:	d00a      	beq.n	8004246 <prvDeleteTCB+0x56>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <prvDeleteTCB+0x54>
	}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <prvResetNextTaskUnblockTime+0x38>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <prvResetNextTaskUnblockTime+0x3c>)
 8004262:	f04f 32ff 	mov.w	r2, #4294967295
 8004266:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004268:	e008      	b.n	800427c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800426a:	4b07      	ldr	r3, [pc, #28]	; (8004288 <prvResetNextTaskUnblockTime+0x38>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a04      	ldr	r2, [pc, #16]	; (800428c <prvResetNextTaskUnblockTime+0x3c>)
 800427a:	6013      	str	r3, [r2, #0]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	200010fc 	.word	0x200010fc
 800428c:	20001164 	.word	0x20001164

08004290 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <xTaskGetSchedulerState+0x34>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800429e:	2301      	movs	r3, #1
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	e008      	b.n	80042b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a4:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <xTaskGetSchedulerState+0x38>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042ac:	2302      	movs	r3, #2
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	e001      	b.n	80042b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042b6:	687b      	ldr	r3, [r7, #4]
	}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20001150 	.word	0x20001150
 80042c8:	2000116c 	.word	0x2000116c

080042cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <prvAddCurrentTaskToDelayedList+0xb0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042dc:	4b28      	ldr	r3, [pc, #160]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fa66 	bl	80037b4 <uxListRemove>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	2201      	movs	r2, #1
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43da      	mvns	r2, r3
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4013      	ands	r3, r2
 8004302:	4a20      	ldr	r2, [pc, #128]	; (8004384 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004304:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d10a      	bne.n	8004324 <prvAddCurrentTaskToDelayedList+0x58>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	481a      	ldr	r0, [pc, #104]	; (8004388 <prvAddCurrentTaskToDelayedList+0xbc>)
 800431e:	f7ff f9ee 	bl	80036fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004322:	e026      	b.n	8004372 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4413      	add	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	429a      	cmp	r2, r3
 800433a:	d209      	bcs.n	8004350 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800433c:	4b13      	ldr	r3, [pc, #76]	; (800438c <prvAddCurrentTaskToDelayedList+0xc0>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3304      	adds	r3, #4
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f7ff f9fb 	bl	8003744 <vListInsert>
}
 800434e:	e010      	b.n	8004372 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004350:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3304      	adds	r3, #4
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7ff f9f1 	bl	8003744 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	d202      	bcs.n	8004372 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800436c:	4a09      	ldr	r2, [pc, #36]	; (8004394 <prvAddCurrentTaskToDelayedList+0xc8>)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6013      	str	r3, [r2, #0]
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20001148 	.word	0x20001148
 8004380:	20001044 	.word	0x20001044
 8004384:	2000114c 	.word	0x2000114c
 8004388:	20001130 	.word	0x20001130
 800438c:	20001100 	.word	0x20001100
 8004390:	200010fc 	.word	0x200010fc
 8004394:	20001164 	.word	0x20001164

08004398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3b04      	subs	r3, #4
 80043a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3b04      	subs	r3, #4
 80043b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f023 0201 	bic.w	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3b04      	subs	r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043c8:	4a08      	ldr	r2, [pc, #32]	; (80043ec <pxPortInitialiseStack+0x54>)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3b14      	subs	r3, #20
 80043d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b20      	subs	r3, #32
 80043de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043e0:	68fb      	ldr	r3, [r7, #12]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	080043f1 	.word	0x080043f1

080043f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <prvTaskExitError+0x54>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d00a      	beq.n	800441a <prvTaskExitError+0x2a>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	60fb      	str	r3, [r7, #12]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <prvTaskExitError+0x28>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60bb      	str	r3, [r7, #8]
}
 800442c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800442e:	bf00      	nop
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0fc      	beq.n	8004430 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	2000000c 	.word	0x2000000c
	...

08004450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <pxCurrentTCBConst2>)
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800445a:	f380 8809 	msr	PSP, r0
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8811 	msr	BASEPRI, r0
 800446a:	f04e 0e0d 	orr.w	lr, lr, #13
 800446e:	4770      	bx	lr

08004470 <pxCurrentTCBConst2>:
 8004470:	20001044 	.word	0x20001044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004478:	4806      	ldr	r0, [pc, #24]	; (8004494 <prvPortStartFirstTask+0x1c>)
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	6800      	ldr	r0, [r0, #0]
 800447e:	f380 8808 	msr	MSP, r0
 8004482:	b662      	cpsie	i
 8004484:	b661      	cpsie	f
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	df00      	svc	0
 8004490:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004492:	bf00      	nop
 8004494:	e000ed08 	.word	0xe000ed08

08004498 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800449e:	4b32      	ldr	r3, [pc, #200]	; (8004568 <xPortStartScheduler+0xd0>)
 80044a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	22ff      	movs	r2, #255	; 0xff
 80044ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	4b2a      	ldr	r3, [pc, #168]	; (800456c <xPortStartScheduler+0xd4>)
 80044c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044c6:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <xPortStartScheduler+0xd8>)
 80044c8:	2207      	movs	r2, #7
 80044ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044cc:	e009      	b.n	80044e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80044ce:	4b28      	ldr	r3, [pc, #160]	; (8004570 <xPortStartScheduler+0xd8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <xPortStartScheduler+0xd8>)
 80044d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d0ef      	beq.n	80044ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <xPortStartScheduler+0xd8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1c3 0307 	rsb	r3, r3, #7
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d00a      	beq.n	8004510 <xPortStartScheduler+0x78>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	60bb      	str	r3, [r7, #8]
}
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004510:	4b17      	ldr	r3, [pc, #92]	; (8004570 <xPortStartScheduler+0xd8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <xPortStartScheduler+0xd8>)
 8004518:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <xPortStartScheduler+0xd8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004522:	4a13      	ldr	r2, [pc, #76]	; (8004570 <xPortStartScheduler+0xd8>)
 8004524:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <xPortStartScheduler+0xdc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <xPortStartScheduler+0xdc>)
 8004534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004538:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <xPortStartScheduler+0xdc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <xPortStartScheduler+0xdc>)
 8004540:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004544:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004546:	f000 f8b9 	bl	80046bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <xPortStartScheduler+0xe0>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004550:	f7ff ff92 	bl	8004478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004554:	f7ff fd6c 	bl	8004030 <vTaskSwitchContext>
	prvTaskExitError();
 8004558:	f7ff ff4a 	bl	80043f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	e000e400 	.word	0xe000e400
 800456c:	20001170 	.word	0x20001170
 8004570:	20001174 	.word	0x20001174
 8004574:	e000ed20 	.word	0xe000ed20
 8004578:	2000000c 	.word	0x2000000c

0800457c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	607b      	str	r3, [r7, #4]
}
 8004594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004596:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <vPortEnterCritical+0x58>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3301      	adds	r3, #1
 800459c:	4a0d      	ldr	r2, [pc, #52]	; (80045d4 <vPortEnterCritical+0x58>)
 800459e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <vPortEnterCritical+0x58>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10f      	bne.n	80045c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <vPortEnterCritical+0x5c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	603b      	str	r3, [r7, #0]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <vPortEnterCritical+0x4a>
	}
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2000000c 	.word	0x2000000c
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045e2:	4b11      	ldr	r3, [pc, #68]	; (8004628 <vPortExitCritical+0x4c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <vPortExitCritical+0x24>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	607b      	str	r3, [r7, #4]
}
 80045fc:	bf00      	nop
 80045fe:	e7fe      	b.n	80045fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <vPortExitCritical+0x4c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3b01      	subs	r3, #1
 8004606:	4a08      	ldr	r2, [pc, #32]	; (8004628 <vPortExitCritical+0x4c>)
 8004608:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800460a:	4b07      	ldr	r3, [pc, #28]	; (8004628 <vPortExitCritical+0x4c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <vPortExitCritical+0x42>
 8004612:	2300      	movs	r3, #0
 8004614:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800461c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	2000000c 	.word	0x2000000c
 800462c:	00000000 	.word	0x00000000

08004630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004630:	f3ef 8009 	mrs	r0, PSP
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <pxCurrentTCBConst>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004640:	6010      	str	r0, [r2, #0]
 8004642:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004646:	f04f 0050 	mov.w	r0, #80	; 0x50
 800464a:	f380 8811 	msr	BASEPRI, r0
 800464e:	f7ff fcef 	bl	8004030 <vTaskSwitchContext>
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8811 	msr	BASEPRI, r0
 800465a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	6808      	ldr	r0, [r1, #0]
 8004662:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004666:	f380 8809 	msr	PSP, r0
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	4770      	bx	lr

08004670 <pxCurrentTCBConst>:
 8004670:	20001044 	.word	0x20001044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop

08004678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	607b      	str	r3, [r7, #4]
}
 8004690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004692:	f7ff fc15 	bl	8003ec0 <xTaskIncrementTick>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <xPortSysTickHandler+0x40>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	2300      	movs	r3, #0
 80046a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f383 8811 	msr	BASEPRI, r3
}
 80046ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <vPortSetupTimerInterrupt+0x30>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <vPortSetupTimerInterrupt+0x34>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046cc:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <vPortSetupTimerInterrupt+0x38>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <vPortSetupTimerInterrupt+0x3c>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	4a08      	ldr	r2, [pc, #32]	; (80046fc <vPortSetupTimerInterrupt+0x40>)
 80046da:	3b01      	subs	r3, #1
 80046dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046de:	4b03      	ldr	r3, [pc, #12]	; (80046ec <vPortSetupTimerInterrupt+0x30>)
 80046e0:	2207      	movs	r2, #7
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr
 80046ec:	e000e010 	.word	0xe000e010
 80046f0:	e000e018 	.word	0xe000e018
 80046f4:	20000000 	.word	0x20000000
 80046f8:	10624dd3 	.word	0x10624dd3
 80046fc:	e000e014 	.word	0xe000e014

08004700 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	; 0x28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800470c:	f7ff fb20 	bl	8003d50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004710:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <pvPortMalloc+0x180>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004718:	f000 f920 	bl	800495c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800471c:	4b59      	ldr	r3, [pc, #356]	; (8004884 <pvPortMalloc+0x184>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 8093 	bne.w	8004850 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01d      	beq.n	800476c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004730:	2208      	movs	r2, #8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	2b00      	cmp	r3, #0
 8004740:	d014      	beq.n	800476c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f023 0307 	bic.w	r3, r3, #7
 8004748:	3308      	adds	r3, #8
 800474a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <pvPortMalloc+0x6c>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	617b      	str	r3, [r7, #20]
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d06e      	beq.n	8004850 <pvPortMalloc+0x150>
 8004772:	4b45      	ldr	r3, [pc, #276]	; (8004888 <pvPortMalloc+0x188>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	429a      	cmp	r2, r3
 800477a:	d869      	bhi.n	8004850 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800477c:	4b43      	ldr	r3, [pc, #268]	; (800488c <pvPortMalloc+0x18c>)
 800477e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004780:	4b42      	ldr	r3, [pc, #264]	; (800488c <pvPortMalloc+0x18c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004786:	e004      	b.n	8004792 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d903      	bls.n	80047a4 <pvPortMalloc+0xa4>
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f1      	bne.n	8004788 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <pvPortMalloc+0x180>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d050      	beq.n	8004850 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2208      	movs	r2, #8
 80047b4:	4413      	add	r3, r2
 80047b6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	1ad2      	subs	r2, r2, r3
 80047c8:	2308      	movs	r3, #8
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d91f      	bls.n	8004810 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <pvPortMalloc+0xf8>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	613b      	str	r3, [r7, #16]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800480a:	69b8      	ldr	r0, [r7, #24]
 800480c:	f000 f908 	bl	8004a20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004810:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <pvPortMalloc+0x188>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <pvPortMalloc+0x188>)
 800481c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800481e:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <pvPortMalloc+0x188>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <pvPortMalloc+0x190>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d203      	bcs.n	8004832 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800482a:	4b17      	ldr	r3, [pc, #92]	; (8004888 <pvPortMalloc+0x188>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <pvPortMalloc+0x190>)
 8004830:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <pvPortMalloc+0x184>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	431a      	orrs	r2, r3
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <pvPortMalloc+0x194>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3301      	adds	r3, #1
 800484c:	4a11      	ldr	r2, [pc, #68]	; (8004894 <pvPortMalloc+0x194>)
 800484e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004850:	f7ff fa8c 	bl	8003d6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <pvPortMalloc+0x174>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	60fb      	str	r3, [r7, #12]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <pvPortMalloc+0x172>
	return pvReturn;
 8004874:	69fb      	ldr	r3, [r7, #28]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3728      	adds	r7, #40	; 0x28
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20001d80 	.word	0x20001d80
 8004884:	20001d94 	.word	0x20001d94
 8004888:	20001d84 	.word	0x20001d84
 800488c:	20001d78 	.word	0x20001d78
 8004890:	20001d88 	.word	0x20001d88
 8004894:	20001d8c 	.word	0x20001d8c

08004898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d04d      	beq.n	8004946 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048aa:	2308      	movs	r3, #8
 80048ac:	425b      	negs	r3, r3
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4413      	add	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <vPortFree+0xb8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <vPortFree+0x44>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	60fb      	str	r3, [r7, #12]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <vPortFree+0x62>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	60bb      	str	r3, [r7, #8]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	4b14      	ldr	r3, [pc, #80]	; (8004950 <vPortFree+0xb8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01e      	beq.n	8004946 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11a      	bne.n	8004946 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <vPortFree+0xb8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	43db      	mvns	r3, r3
 800491a:	401a      	ands	r2, r3
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004920:	f7ff fa16 	bl	8003d50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <vPortFree+0xbc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4413      	add	r3, r2
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <vPortFree+0xbc>)
 8004930:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004932:	6938      	ldr	r0, [r7, #16]
 8004934:	f000 f874 	bl	8004a20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <vPortFree+0xc0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	4a06      	ldr	r2, [pc, #24]	; (8004958 <vPortFree+0xc0>)
 8004940:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004942:	f7ff fa13 	bl	8003d6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20001d94 	.word	0x20001d94
 8004954:	20001d84 	.word	0x20001d84
 8004958:	20001d90 	.word	0x20001d90

0800495c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004962:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004966:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004968:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <prvHeapInit+0xac>)
 800496a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00c      	beq.n	8004990 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3307      	adds	r3, #7
 800497a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0307 	bic.w	r3, r3, #7
 8004982:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <prvHeapInit+0xac>)
 800498c:	4413      	add	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <prvHeapInit+0xb0>)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800499a:	4b1c      	ldr	r3, [pc, #112]	; (8004a0c <prvHeapInit+0xb0>)
 800499c:	2200      	movs	r2, #0
 800499e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	4413      	add	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049a8:	2208      	movs	r2, #8
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0307 	bic.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <prvHeapInit+0xb4>)
 80049bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <prvHeapInit+0xb4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2200      	movs	r2, #0
 80049c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049c6:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <prvHeapInit+0xb4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	1ad2      	subs	r2, r2, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <prvHeapInit+0xb4>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <prvHeapInit+0xb8>)
 80049ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <prvHeapInit+0xbc>)
 80049f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <prvHeapInit+0xc0>)
 80049f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049fa:	601a      	str	r2, [r3, #0]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20001178 	.word	0x20001178
 8004a0c:	20001d78 	.word	0x20001d78
 8004a10:	20001d80 	.word	0x20001d80
 8004a14:	20001d88 	.word	0x20001d88
 8004a18:	20001d84 	.word	0x20001d84
 8004a1c:	20001d94 	.word	0x20001d94

08004a20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <prvInsertBlockIntoFreeList+0xa8>)
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e002      	b.n	8004a34 <prvInsertBlockIntoFreeList+0x14>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d8f7      	bhi.n	8004a2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d108      	bne.n	8004a62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	441a      	add	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	441a      	add	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d118      	bne.n	8004aa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <prvInsertBlockIntoFreeList+0xac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d00d      	beq.n	8004a9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	441a      	add	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e008      	b.n	8004ab0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <prvInsertBlockIntoFreeList+0xac>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e003      	b.n	8004ab0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d002      	beq.n	8004abe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	20001d78 	.word	0x20001d78
 8004acc:	20001d80 	.word	0x20001d80

08004ad0 <memcmp>:
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	3901      	subs	r1, #1
 8004ad4:	4402      	add	r2, r0
 8004ad6:	4290      	cmp	r0, r2
 8004ad8:	d101      	bne.n	8004ade <memcmp+0xe>
 8004ada:	2000      	movs	r0, #0
 8004adc:	e005      	b.n	8004aea <memcmp+0x1a>
 8004ade:	7803      	ldrb	r3, [r0, #0]
 8004ae0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	d001      	beq.n	8004aec <memcmp+0x1c>
 8004ae8:	1b18      	subs	r0, r3, r4
 8004aea:	bd10      	pop	{r4, pc}
 8004aec:	3001      	adds	r0, #1
 8004aee:	e7f2      	b.n	8004ad6 <memcmp+0x6>

08004af0 <memset>:
 8004af0:	4603      	mov	r3, r0
 8004af2:	4402      	add	r2, r0
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d100      	bne.n	8004afa <memset+0xa>
 8004af8:	4770      	bx	lr
 8004afa:	f803 1b01 	strb.w	r1, [r3], #1
 8004afe:	e7f9      	b.n	8004af4 <memset+0x4>

08004b00 <__libc_init_array>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	2600      	movs	r6, #0
 8004b04:	4d0c      	ldr	r5, [pc, #48]	; (8004b38 <__libc_init_array+0x38>)
 8004b06:	4c0d      	ldr	r4, [pc, #52]	; (8004b3c <__libc_init_array+0x3c>)
 8004b08:	1b64      	subs	r4, r4, r5
 8004b0a:	10a4      	asrs	r4, r4, #2
 8004b0c:	42a6      	cmp	r6, r4
 8004b0e:	d109      	bne.n	8004b24 <__libc_init_array+0x24>
 8004b10:	f000 f828 	bl	8004b64 <_init>
 8004b14:	2600      	movs	r6, #0
 8004b16:	4d0a      	ldr	r5, [pc, #40]	; (8004b40 <__libc_init_array+0x40>)
 8004b18:	4c0a      	ldr	r4, [pc, #40]	; (8004b44 <__libc_init_array+0x44>)
 8004b1a:	1b64      	subs	r4, r4, r5
 8004b1c:	10a4      	asrs	r4, r4, #2
 8004b1e:	42a6      	cmp	r6, r4
 8004b20:	d105      	bne.n	8004b2e <__libc_init_array+0x2e>
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b28:	4798      	blx	r3
 8004b2a:	3601      	adds	r6, #1
 8004b2c:	e7ee      	b.n	8004b0c <__libc_init_array+0xc>
 8004b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b32:	4798      	blx	r3
 8004b34:	3601      	adds	r6, #1
 8004b36:	e7f2      	b.n	8004b1e <__libc_init_array+0x1e>
 8004b38:	08004c1c 	.word	0x08004c1c
 8004b3c:	08004c1c 	.word	0x08004c1c
 8004b40:	08004c1c 	.word	0x08004c1c
 8004b44:	08004c20 	.word	0x08004c20

08004b48 <memcpy>:
 8004b48:	440a      	add	r2, r1
 8004b4a:	4291      	cmp	r1, r2
 8004b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b50:	d100      	bne.n	8004b54 <memcpy+0xc>
 8004b52:	4770      	bx	lr
 8004b54:	b510      	push	{r4, lr}
 8004b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b5a:	4291      	cmp	r1, r2
 8004b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b60:	d1f9      	bne.n	8004b56 <memcpy+0xe>
 8004b62:	bd10      	pop	{r4, pc}

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
